.TH CosNotifyChannelAdmin_SequenceProxyPullSupplier 3 "cosNotification 1.1.21" "Ericsson AB" "Erlang Module Definition"
.SH NAME
CosNotifyChannelAdmin_SequenceProxyPullSupplier \- This module implements the OMG  CosNotifyChannelAdmin::SequenceProxyPullSupplier interface.
.SH DESCRIPTION
.LP
To get access to the record definitions for the structures use: 
.br
\fI-include_lib("cosNotification/include/*\&.hrl")\&.\fR\&
.LP
This module also exports the functions described in:
.RS 2
.TP 2
*
\fBCosNotifyComm_NotifySubscribe\fR\&
.LP
.TP 2
*
\fBCosNotification_QoSAdmin\fR\&
.LP
.TP 2
*
\fBCosNotifyFilter_FilterAdmin\fR\&
.LP
.TP 2
*
\fBCosNotifyChannelAdmin_ProxySupplier\fR\&
.LP
.RE

.SH EXPORTS
.LP
.B
connect_sequence_pull_consumer(SequenceProxyPullSupplier, PullConsumer) -> Reply
.br
.RS
.LP
Types:

.RS 3
SequenceProxyPullSupplier = #objref
.br
PullConsumer = #objref
.br
Reply = ok | {\&'EXCEPTION\&', #\&'CosEventChannelAdmin_AlreadyConnected\&'{}}
.br
.RE
.RE
.RS
.LP
This operation connects a \fIPullConsumer\fR\& to the target object\&. If a connection already exists an exception is raised\&.
.RE
.LP
.B
pull_structured_events(SequenceProxyPullSupplier, MaxEvents) -> Reply
.br
.RS
.LP
Types:

.RS 3
SequenceProxyPullSupplier = #objref
.br
MaxEvents = long()
.br
Reply = EventBatch | {\&'EXCEPTION\&', #\&'CosEventChannelAdmin_Disconnected\&'{}}
.br
EventBatch = [StructuredEvent]
.br
StructuredEvent = #\&'CosNotification_StructuredEvent\&'{header, filterable_data, remainder_of_body}
.br
header = EventHeader
.br
filterable_data = [#\&'CosNotification_Property\&'{name, value}]
.br
name = string()
.br
value = #any
.br
remainder_of_body = #any
.br
EventHeader = #\&'CosNotification_EventHeader\&'{fixed_header, variable_header}
.br
fixed_header = FixedEventHeader
.br
variable_header = OptionalHeaderFields
.br
FixedEventHeader = #\&'CosNotification_FixedEventHeader\&'{event_type, event_name}
.br
event_type = EventType
.br
event_name = string()
.br
EventType = #\&'CosNotification_EventType\&'{domain_name, type_name}
.br
domain_name = type_name = string()
.br
OptionalHeaderFields = [#\&'CosNotification_Property\&'{name, value}]
.br
.RE
.RE
.RS
.LP
A client use this operation to pull next event sequence of maximum length \fIMaxEvents\fR\&\&. This operation is blocking and will not reply until the requested amount of events can be delivered or the QoS property \fIPacingInterval\fR\& is reached\&. For more information see the \fIUser\&'s Guide\fR\&\&.
.RE
.LP
.B
try_pull_structured_events(SequenceProxyPullSupplier, MaxEvents) -> Reply
.br
.RS
.LP
Types:

.RS 3
SequenceProxyPullSupplier = #objref
.br
MaxEvents = long()
.br
Reply = {EventBatch, HasEvent} | {\&'EXCEPTION\&', #\&'CosEventChannelAdmin_Disconnected\&'{}}
.br
HasEvent = boolean()
.br
EventBatch = [StructuredEvent]
.br
StructuredEvent = #\&'CosNotification_StructuredEvent\&'{header, filterable_data, remainder_of_body}
.br
header = EventHeader
.br
filterable_data = [#\&'CosNotification_Property\&'{name, value}]
.br
name = string()
.br
value = #any
.br
remainder_of_body = #any
.br
EventHeader = #\&'CosNotification_EventHeader\&'{fixed_header, variable_header}
.br
fixed_header = FixedEventHeader
.br
variable_header = OptionalHeaderFields
.br
FixedEventHeader = #\&'CosNotification_FixedEventHeader\&'{event_type, event_name}
.br
event_type = EventType
.br
event_name = string()
.br
EventType = #\&'CosNotification_EventType\&'{domain_name, type_name}
.br
domain_name = type_name = string()
.br
OptionalHeaderFields = [#\&'CosNotification_Property\&'{name, value}]
.br
.RE
.RE
.RS
.LP
This operation pulls an event sequence of the maximum length \fIMaxEvents\fR\&, but do not block if the target object have no events to forward\&. The outparameter, \fIHasEvent\fR\& is true if the sequence contain any events\&.
.RE
.LP
.B
disconnect_sequence_pull_supplier(SequenceProxyPullSupplier) -> ok
.br
.RS
.LP
Types:

.RS 3
SequenceProxyPullSupplier = #objref
.br
.RE
.RE
.RS
.LP
This operation cause the target object to close the connection and terminate\&.
.RE