.TH edoc_run 3 "edoc 0.7.13" "" "Erlang Module Definition"
.SH NAME
edoc_run \- Interface for calling EDoc from Erlang startup options.
.SH DESCRIPTION
.LP
Interface for calling EDoc from Erlang startup options\&.
.LP
The following is an example of typical usage in a Makefile:
.LP
.nf
     docs:
             erl -noshell -run edoc_run application "'$(APP_NAME)'" \\
               '"."' '[{def,{vsn,"$(VSN)"}}]'
.fi
.LP
(note the single-quotes to avoid shell expansion, and the double-quotes enclosing the strings)\&.
.LP
\fINew feature in version 0\&.6\&.9\fR\&: It is no longer necessary to write \fI-s init stop\fR\& last on the command line in order to make the execution terminate\&. The termination (signalling success or failure to the operating system) is now built into these functions\&.
.SH EXPORTS
.LP
.B
application(Args::[string()]) -> none()
.br
.RS
.LP
Calls \fBedoc:application/3\fR\& with the corresponding arguments\&. The strings in the list are parsed as Erlang constant terms\&. The list can be either \fI[App]\fR\&, \fI[App, Options]\fR\& or \fI[App, Dir, Options]\fR\&\&. In the first case \fBedoc:application/1\fR\& is called instead; in the second case, \fBedoc:application/2\fR\& is called\&.
.LP
The function call never returns; instead, the emulator is automatically terminated when the call has completed, signalling success or failure to the operating system\&.
.RE
.LP
.B
file(Args::[string()]) -> none()
.br
.RS
.LP
\fIThis function is deprecated: \fR\&This is part of the old interface to EDoc and is mainly kept for backwards compatibility\&. The preferred way of generating documentation is through one of the functions \fBapplication/1\fR\&, \fBpackages/1\fR\& and \fBfiles/1\fR\&\&.
.LP
Calls \fBedoc:file/2\fR\& with the corresponding arguments\&. The strings in the list are parsed as Erlang constant terms\&. The list can be either \fI[File]\fR\& or \fI[File, Options]\fR\&\&. In the first case, an empty list of options is passed to \fBedoc:file/2\fR\&\&.
.LP
The following is an example of typical usage in a Makefile:
.LP
.nf
     $(DOCDIR)/%.html:%.erl
             erl -noshell -run edoc_run file '"$<"' '[{dir,"$(DOCDIR)"}]' \\
               -s init stop
.fi
.LP
The function call never returns; instead, the emulator is automatically terminated when the call has completed, signalling success or failure to the operating system\&.
.RE
.LP
.B
files(Args::[string()]) -> none()
.br
.RS
.LP
Calls \fBedoc:files/2\fR\& with the corresponding arguments\&. The strings in the list are parsed as Erlang constant terms\&. The list can be either \fI[Files]\fR\& or \fI[Files, Options]\fR\&\&. In the first case, \fBedoc:files/1\fR\& is called instead\&.
.LP
The function call never returns; instead, the emulator is automatically terminated when the call has completed, signalling success or failure to the operating system\&.
.RE
.LP
.B
packages(Args::[string()]) -> none()
.br
.RS
.LP
Calls \fBedoc:application/2\fR\& with the corresponding arguments\&. The strings in the list are parsed as Erlang constant terms\&. The list can be either \fI[Packages]\fR\& or \fI[Packages, Options]\fR\&\&. In the first case \fBedoc:application/1\fR\& is called instead\&.
.LP
The function call never returns; instead, the emulator is automatically terminated when the call has completed, signalling success or failure to the operating system\&.
.RE
.SH "SEE ALSO"

.LP
\fBedoc\fR\&
.SH AUTHORS
.LP
Richard Carlsson
.I
<carlsson\&.richard@gmail\&.com>