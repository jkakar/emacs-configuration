.TH erl_lint 3 "stdlib 2.0" "Ericsson AB" "Erlang Module Definition"
.SH NAME
erl_lint \- The Erlang Code Linter
.SH DESCRIPTION
.LP
This module is used to check Erlang code for illegal syntax and other bugs\&. It also warns against coding practices which are not recommended\&.
.LP
The errors detected include:
.RS 2
.TP 2
*
redefined and undefined functions
.LP
.TP 2
*
unbound and unsafe variables
.LP
.TP 2
*
illegal record usage\&.
.LP
.RE

.LP
Warnings include:
.RS 2
.TP 2
*
unused functions and imports
.LP
.TP 2
*
unused variables
.LP
.TP 2
*
variables imported into matches
.LP
.TP 2
*
variables exported from \fIif\fR\&/\fIcase\fR\&/\fIreceive\fR\&
.LP
.TP 2
*
variables shadowed in lambdas and list comprehensions\&.
.LP
.RE

.LP
Some of the warnings are optional, and can be turned on by giving the appropriate option, described below\&.
.LP
The functions in this module are invoked automatically by the Erlang compiler and there is no reason to invoke these functions separately unless you have written your own Erlang compiler\&.
.SH DATA TYPES
.nf

\fBerror_info()\fR\& = {\fBerl_scan:line()\fR\&, module(), \fBerror_description()\fR\&}
.br
.fi
.nf

\fBerror_description()\fR\& = term()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
module(AbsForms) -> {ok, Warnings} | {error, Errors, Warnings}
.br
.fi
.br
.nf

.B
module(AbsForms, FileName) ->
.B
          {ok, Warnings} | {error, Errors, Warnings}
.br
.fi
.br
.nf

.B
module(AbsForms, FileName, CompileOptions) ->
.B
          {ok, Warnings} | {error, Errors, Warnings}
.br
.fi
.br
.RS
.LP
Types:

.RS 3
AbsForms = [\fBerl_parse:abstract_form()\fR\&]
.br
FileName = atom() | string()
.br
CompileOptions = [\fBcompile:option()\fR\&]
.br
Warnings = [{\fBfile:filename()\fR\&, [ErrorInfo]}]
.br
Errors = [{FileName2 :: \fBfile:filename()\fR\&, [ErrorInfo]}]
.br
ErrorInfo = \fBerror_info()\fR\&
.br
.RE
.RE
.RS
.LP
This function checks all the forms in a module for errors\&. It returns:
.RS 2
.TP 2
.B
\fI{ok,Warnings}\fR\&:
There were no errors in the module\&.
.TP 2
.B
\fI{error,Errors,Warnings}\fR\&:
There were errors in the module\&.
.RE
.LP
Since this module is of interest only to the maintainers of the compiler, and to avoid having the same description in two places to avoid the usual maintenance nightmare, the elements of \fIOptions\fR\& that control the warnings are only described in \fBcompile(3)\fR\&\&.
.LP
The \fIAbsForms\fR\& of a module which comes from a file that is read through \fIepp\fR\&, the Erlang pre-processor, can come from many files\&. This means that any references to errors must include the file name (see \fBepp(3)\fR\&, or parser \fBerl_parse(3)\fR\&)\&. The warnings and errors returned have the following format:
.LP
.nf

    [{FileName2,[ErrorInfo]}]        
.fi
.LP
The errors and warnings are listed in the order in which they are encountered in the forms\&. This means that the errors from one file may be split into different entries in the list of errors\&.
.RE
.LP
.nf

.B
is_guard_test(Expr) -> boolean()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Expr = \fBerl_parse:abstract_expr()\fR\&
.br
.RE
.RE
.RS
.LP
This function tests if \fIExpr\fR\& is a legal guard test\&. \fIExpr\fR\& is an Erlang term representing the abstract form for the expression\&. \fIerl_parse:parse_exprs(Tokens)\fR\& can be used to generate a list of \fIExpr\fR\&\&.
.RE
.LP
.nf

.B
format_error(ErrorDescriptor) -> io_lib:chars()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
ErrorDescriptor = \fBerror_description()\fR\&
.br
.RE
.RE
.RS
.LP
Takes an \fIErrorDescriptor\fR\& and returns a string which describes the error or warning\&. This function is usually called implicitly when processing an \fIErrorInfo\fR\& structure (see below)\&.
.RE
.SH "ERROR INFORMATION"

.LP
The \fIErrorInfo\fR\& mentioned above is the standard \fIErrorInfo\fR\& structure which is returned from all IO modules\&. It has the following format:
.LP
.nf

    {ErrorLine, Module, ErrorDescriptor}    
.fi
.LP
A string which describes the error is obtained with the following call:
.LP
.nf

    Module:format_error(ErrorDescriptor)    
.fi
.SH "SEE ALSO"

.LP
\fBerl_parse(3)\fR\&, \fBepp(3)\fR\&