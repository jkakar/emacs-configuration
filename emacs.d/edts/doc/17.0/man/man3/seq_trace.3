.TH seq_trace 3 "kernel 3.0" "Ericsson AB" "Erlang Module Definition"
.SH NAME
seq_trace \- Sequential Tracing of Messages
.SH DESCRIPTION
.LP
Sequential tracing makes it possible to trace all messages resulting from one initial message\&. Sequential tracing is completely independent of the ordinary tracing in Erlang, which is controlled by the \fIerlang:trace/3\fR\& BIF\&. See the chapter \fBWhat is Sequential Tracing\fR\& below for more information about what sequential tracing is and how it can be used\&.
.LP
\fIseq_trace\fR\& provides functions which control all aspects of sequential tracing\&. There are functions for activation, deactivation, inspection and for collection of the trace output\&.
.LP

.RS -4
.B
Note:
.RE
The implementation of sequential tracing is in beta status\&. This means that the programming interface still might undergo minor adjustments (possibly incompatible) based on feedback from users\&.

.SH DATA TYPES
.nf

\fBtoken()\fR\& = {integer(), boolean(), term(), term(), term()}
.br
.fi
.RS
.LP
An opaque term (a tuple) representing a trace token\&.
.RE
.SH EXPORTS
.LP
.nf

.B
set_token(Token) -> PreviousToken | ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Token = PreviousToken = [] | \fBtoken()\fR\&
.br
.RE
.RE
.RS
.LP
Sets the trace token for the calling process to \fIToken\fR\&\&. If \fIToken == []\fR\& then tracing is disabled, otherwise \fIToken\fR\& should be an Erlang term returned from \fIget_token/0\fR\& or \fIset_token/1\fR\&\&. \fIset_token/1\fR\& can be used to temporarily exclude message passing from the trace by setting the trace token to empty like this:
.LP
.nf

OldToken = seq_trace:set_token([]), % set to empty and save 
                                    % old value
% do something that should not be part of the trace
io:format("Exclude the signalling caused by this~n"),
seq_trace:set_token(OldToken), % activate the trace token again
...  
.fi
.LP
Returns the previous value of the trace token\&.
.RE
.LP
.nf

.B
set_token(Component, Val) -> {Component, OldVal}
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Component = \fBcomponent()\fR\&
.br
Val = OldVal = \fBvalue()\fR\&
.br
.nf
\fBcomponent()\fR\& = label | serial | \fBflag()\fR\&
.fi
.br
.nf
\fBflag()\fR\& = send | \&'receive\&' | print | timestamp
.fi
.br
.nf
\fBvalue()\fR\& = (Integer :: integer() >= 0)
.br
        | {Previous :: integer() >= 0,
.br
           Current :: integer() >= 0}
.br
        | (Bool :: boolean())
.fi
.br
.RE
.RE
.RS
.LP
Sets the individual \fIComponent\fR\& of the trace token to \fIVal\fR\&\&. Returns the previous value of the component\&.
.RS 2
.TP 2
.B
\fIset_token(label, Integer)\fR\&:
The \fIlabel\fR\& component is an integer which identifies all events belonging to the same sequential trace\&. If several sequential traces can be active simultaneously, \fIlabel\fR\& is used to identify the separate traces\&. Default is 0\&.
.TP 2
.B
\fIset_token(serial, SerialValue)\fR\&:
\fISerialValue = {Previous, Current}\fR\&\&. The \fIserial\fR\& component contains counters which enables the traced messages to be sorted, should never be set explicitly by the user as these counters are updated automatically\&. Default is \fI{0, 0}\fR\&\&.
.TP 2
.B
\fIset_token(send, Bool)\fR\&:
A trace token flag (\fItrue | false\fR\&) which enables/disables tracing on message sending\&. Default is \fIfalse\fR\&\&.
.TP 2
.B
\fIset_token(\&'receive\&', Bool)\fR\&:
A trace token flag (\fItrue | false\fR\&) which enables/disables tracing on message reception\&. Default is \fIfalse\fR\&\&.
.TP 2
.B
\fIset_token(print, Bool)\fR\&:
A trace token flag (\fItrue | false\fR\&) which enables/disables tracing on explicit calls to \fIseq_trace:print/1\fR\&\&. Default is \fIfalse\fR\&\&.
.TP 2
.B
\fIset_token(timestamp, Bool)\fR\&:
A trace token flag (\fItrue | false\fR\&) which enables/disables a timestamp to be generated for each traced event\&. Default is \fIfalse\fR\&\&.
.RE
.RE
.LP
.nf

.B
get_token() -> [] | token()
.br
.fi
.br
.RS
.LP
Returns the value of the trace token for the calling process\&. If \fI[]\fR\& is returned, it means that tracing is not active\&. Any other value returned is the value of an active trace token\&. The value returned can be used as input to the \fIset_token/1\fR\& function\&.
.RE
.LP
.nf

.B
get_token(Component) -> {Component, Val}
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Component = \fBcomponent()\fR\&
.br
Val = \fBvalue()\fR\&
.br
.nf
\fBcomponent()\fR\& = label | serial | \fBflag()\fR\&
.fi
.br
.nf
\fBflag()\fR\& = send | \&'receive\&' | print | timestamp
.fi
.br
.nf
\fBvalue()\fR\& = (Integer :: integer() >= 0)
.br
        | {Previous :: integer() >= 0,
.br
           Current :: integer() >= 0}
.br
        | (Bool :: boolean())
.fi
.br
.RE
.RE
.RS
.LP
Returns the value of the trace token component \fIComponent\fR\&\&. See \fBset_token/2\fR\& for possible values of \fIComponent\fR\& and \fIVal\fR\&\&.
.RE
.LP
.nf

.B
print(TraceInfo) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
TraceInfo = term()
.br
.RE
.RE
.RS
.LP
Puts the Erlang term \fITraceInfo\fR\& into the sequential trace output if the calling process currently is executing within a sequential trace and the \fIprint\fR\& flag of the trace token is set\&.
.RE
.LP
.nf

.B
print(Label, TraceInfo) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Label = integer()
.br
TraceInfo = term()
.br
.RE
.RE
.RS
.LP
Same as \fIprint/1\fR\& with the additional condition that \fITraceInfo\fR\& is output only if \fILabel\fR\& is equal to the label component of the trace token\&.
.RE
.LP
.nf

.B
reset_trace() -> true
.br
.fi
.br
.RS
.LP
Sets the trace token to empty for all processes on the local node\&. The process internal counters used to create the serial of the trace token is set to 0\&. The trace token is set to empty for all messages in message queues\&. Together this will effectively stop all ongoing sequential tracing in the local node\&.
.RE
.LP
.nf

.B
set_system_tracer(Tracer) -> OldTracer
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Tracer = OldTracer = \fBtracer()\fR\&
.br
.nf
\fBtracer()\fR\& = (Pid :: pid()) | port() | false
.fi
.br
.RE
.RE
.RS
.LP
Sets the system tracer\&. The system tracer can be either a process or port denoted by \fITracer\fR\&\&. Returns the previous value (which can be \fIfalse\fR\& if no system tracer is active)\&.
.LP
Failure: \fI{badarg, Info}}\fR\& if \fIPid\fR\& is not an existing local pid\&.
.RE
.LP
.nf

.B
get_system_tracer() -> Tracer
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Tracer = \fBtracer()\fR\&
.br
.nf
\fBtracer()\fR\& = (Pid :: pid()) | port() | false
.fi
.br
.RE
.RE
.RS
.LP
Returns the pid or port identifier of the current system tracer or \fIfalse\fR\& if no system tracer is activated\&.
.RE
.SH "TRACE MESSAGES SENT TO THE SYSTEM TRACER"

.LP
The format of the messages are:
.LP
.nf

{seq_trace, Label, SeqTraceInfo, TimeStamp}
.fi
.LP
or
.LP
.nf

{seq_trace, Label, SeqTraceInfo}
.fi
.LP
depending on whether the \fItimestamp\fR\& flag of the trace token is set to \fItrue\fR\& or \fIfalse\fR\&\&. Where:
.LP
.nf

Label = int()
TimeStamp = {Seconds, Milliseconds, Microseconds}  
  Seconds = Milliseconds = Microseconds = int()
.fi
.LP
The \fISeqTraceInfo\fR\& can have the following formats:
.RS 2
.TP 2
.B
\fI{send, Serial, From, To, Message}\fR\&:
Used when a process \fIFrom\fR\& with its trace token flag \fIprint\fR\& set to \fItrue\fR\& has sent a message\&.
.TP 2
.B
\fI{\&'receive\&', Serial, From, To, Message}\fR\&:
Used when a process \fITo\fR\& receives a message with a trace token that has the \fI\&'receive\&'\fR\& flag set to \fItrue\fR\&\&.
.TP 2
.B
\fI{print, Serial, From, _, Info}\fR\&:
Used when a process \fIFrom\fR\& has called \fIseq_trace:print(Label, TraceInfo)\fR\& and has a trace token with the \fIprint\fR\& flag set to \fItrue\fR\& and \fIlabel\fR\& set to \fILabel\fR\&\&.
.RE
.LP
\fISerial\fR\& is a tuple \fI{PreviousSerial, ThisSerial}\fR\&, where the first integer \fIPreviousSerial\fR\& denotes the serial counter passed in the last received message which carried a trace token\&. If the process is the first one in a new sequential trace, \fIPreviousSerial\fR\& is set to the value of the process internal "trace clock"\&. The second integer \fIThisSerial\fR\& is the serial counter that a process sets on outgoing messages and it is based on the process internal "trace clock" which is incremented by one before it is attached to the trace token in the message\&.
.SH "WHAT IS SEQUENTIAL TRACING"

.LP
Sequential tracing is a way to trace a sequence of messages sent between different local or remote processes, where the sequence is initiated by one single message\&. In short it works like this:
.LP
Each process has a \fItrace token\fR\&, which can be empty or not empty\&. When not empty the trace token can be seen as the tuple \fI{Label, Flags, Serial, From}\fR\&\&. The trace token is passed invisibly with each message\&.
.LP
In order to start a sequential trace the user must explicitly set the trace token in the process that will send the first message in a sequence\&.
.LP
The trace token of a process is set each time the process matches a message in a receive statement, according to the trace token carried by the received message, empty or not\&.
.LP
On each Erlang node a process can be set as the \fIsystem tracer\fR\&\&. This process will receive trace messages each time a message with a trace token is sent or received (if the trace token flag \fIsend\fR\& or \fI\&'receive\&'\fR\& is set)\&. The system tracer can then print each trace event, write it to a file or whatever suitable\&.
.LP

.RS -4
.B
Note:
.RE
The system tracer will only receive those trace events that occur locally within the Erlang node\&. To get the whole picture of a sequential trace that involves processes on several Erlang nodes, the output from the system tracer on each involved node must be merged (off line)\&.

.LP
In the following sections Sequential Tracing and its most fundamental concepts are described\&.
.SH "TRACE TOKEN"

.LP
Each process has a current trace token\&. Initially the token is empty\&. When the process sends a message to another process, a copy of the current token will be sent "invisibly" along with the message\&.
.LP
The current token of a process is set in two ways, either
.RS 2
.TP 2
*
explicitly by the process itself, through a call to \fIseq_trace:set_token\fR\&, or
.LP
.TP 2
*
when a message is received\&.
.LP
.RE

.LP
In both cases the current token will be set\&. In particular, if the token of a message received is empty, the current token of the process is set to empty\&.
.LP
A trace token contains a label, and a set of flags\&. Both the label and the flags are set in 1 and 2 above\&.
.SH "SERIAL"

.LP
The trace token contains a component which is called \fIserial\fR\&\&. It consists of two integers \fIPrevious\fR\& and \fICurrent\fR\&\&. The purpose is to uniquely identify each traced event within a trace sequence and to order the messages chronologically and in the different branches if any\&.
.LP
The algorithm for updating \fISerial\fR\& can be described as follows:
.LP
Let each process have two counters \fIprev_cnt\fR\& and \fIcurr_cnt\fR\& which both are set to 0 when a process is created\&. The counters are updated at the following occasions:
.RS 2
.TP 2
*
\fIWhen the process is about to send a message and the trace token is not empty\&.\fR\&
.RS 2
.LP
Let the serial of the trace token be \fItprev\fR\& and \fItcurr\fR\&\&. 
.br
\fIcurr_cnt := curr_cnt + 1\fR\& 
.br
\fItprev := prev_cnt\fR\& 
.br
\fItcurr := curr_cnt\fR\&
.RE
.RS 2
.LP
The trace token with \fItprev\fR\& and \fItcurr\fR\& is then passed along with the message\&.
.RE
.LP
.TP 2
*
\fIWhen the process calls\fR\&\fIseq_trace:print(Label, Info)\fR\&, \fILabel matches the label part of the trace token and the trace token print flag is true\&.\fR\&
.RS 2
.LP
The same algorithm as for send above\&.
.RE
.LP
.TP 2
*
\fIWhen a message is received and contains a nonempty trace token\&.\fR\&
.RS 2
.LP
The process trace token is set to the trace token from the message\&.
.RE
.RS 2
.LP
Let the serial of the trace token be \fItprev\fR\& and \fItcurr\fR\&\&. 
.br
\fIif (curr_cnt < tcurr )\fR\& 
.br
\fIcurr_cnt := tcurr\fR\& 
.br
\fIprev_cnt := tcurr\fR\&
.RE
.LP
.RE

.LP
The \fIcurr_cnt\fR\& of a process is incremented each time the process is involved in a sequential trace\&. The counter can reach its limit (27 bits) if a process is very long-lived and is involved in much sequential tracing\&. If the counter overflows it will not be possible to use the serial for ordering of the trace events\&. To prevent the counter from overflowing in the middle of a sequential trace the function \fIseq_trace:reset_trace/0\fR\& can be called to reset the \fIprev_cnt\fR\& and \fIcurr_cnt\fR\& of all processes in the Erlang node\&. This function will also set all trace tokens in processes and their message queues to empty and will thus stop all ongoing sequential tracing\&.
.SH "PERFORMANCE CONSIDERATIONS"

.LP
The performance degradation for a system which is enabled for Sequential Tracing is negligible as long as no tracing is activated\&. When tracing is activated there will of course be an extra cost for each traced message but all other messages will be unaffected\&.
.SH "PORTS"

.LP
Sequential tracing is not performed across ports\&.
.LP
If the user for some reason wants to pass the trace token to a port this has to be done manually in the code of the port controlling process\&. The port controlling processes have to check the appropriate sequential trace settings (as obtained from \fIseq_trace:get_token/1\fR\& and include trace information in the message data sent to their respective ports\&.
.LP
Similarly, for messages received from a port, a port controller has to retrieve trace specific information, and set appropriate sequential trace flags through calls to \fIseq_trace:set_token/2\fR\&\&.
.SH "DISTRIBUTION"

.LP
Sequential tracing between nodes is performed transparently\&. This applies to C-nodes built with Erl_Interface too\&. A C-node built with Erl_Interface only maintains one trace token, which means that the C-node will appear as one process from the sequential tracing point of view\&.
.LP
In order to be able to perform sequential tracing between distributed Erlang nodes, the distribution protocol has been extended (in a backward compatible way)\&. An Erlang node which supports sequential tracing can communicate with an older (OTP R3B) node but messages passed within that node can of course not be traced\&.
.SH "EXAMPLE OF USAGE"

.LP
The example shown here will give rough idea of how the new primitives can be used and what kind of output it will produce\&.
.LP
Assume that we have an initiating process with \fIPid == <0\&.30\&.0>\fR\& like this:
.LP
.nf

-module(seqex).
-compile(export_all).

loop(Port) ->
    receive 
        {Port,Message} ->
            seq_trace:set_token(label,17),
            seq_trace:set_token('receive',true),
            seq_trace:set_token(print,true),
            seq_trace:print(17,"**** Trace Started ****"),
            call_server ! {self(),the_message};
        {ack,Ack} ->
            ok
    end,
    loop(Port).
.fi
.LP
And a registered process \fIcall_server\fR\& with \fIPid == <0\&.31\&.0>\fR\& like this:
.LP
.nf

loop() ->
    receive
        {PortController,Message} ->
            Ack = {received, Message},
            seq_trace:print(17,"We are here now"),
            PortController ! {ack,Ack}
    end,
    loop().
.fi
.LP
A possible output from the system\&'s sequential_tracer (inspired by AXE-10 and MD-110) could look like:
.LP
.nf

17:<0.30.0> Info {0,1} WITH
"**** Trace Started ****"
17:<0.31.0> Received {0,2} FROM <0.30.0> WITH
{<0.30.0>,the_message}
17:<0.31.0> Info {2,3} WITH
"We are here now"
17:<0.30.0> Received {2,4} FROM <0.31.0> WITH
{ack,{received,the_message}}
.fi
.LP
The implementation of a system tracer process that produces the printout above could look like this:
.LP
.nf

tracer() ->
    receive
        {seq_trace,Label,TraceInfo} ->
           print_trace(Label,TraceInfo,false);
        {seq_trace,Label,TraceInfo,Ts} ->
           print_trace(Label,TraceInfo,Ts);
        Other -> ignore
    end,
    tracer().        

print_trace(Label,TraceInfo,false) ->
    io:format("~p:",[Label]),
    print_trace(TraceInfo);
print_trace(Label,TraceInfo,Ts) ->
    io:format("~p ~p:",[Label,Ts]),
    print_trace(TraceInfo).

print_trace({print,Serial,From,_,Info}) ->
    io:format("~p Info ~p WITH~n~p~n", [From,Serial,Info]);
print_trace({'receive',Serial,From,To,Message}) ->
    io:format("~p Received ~p FROM ~p WITH~n~p~n", 
              [To,Serial,From,Message]);
print_trace({send,Serial,From,To,Message}) ->
    io:format("~p Sent ~p TO ~p WITH~n~p~n", 
              [From,Serial,To,Message]).
.fi
.LP
The code that creates a process that runs the tracer function above and sets that process as the system tracer could look like this:
.LP
.nf

start() ->
    Pid = spawn(?MODULE,tracer,[]),
    seq_trace:set_system_tracer(Pid), % set Pid as the system tracer 
    ok.
.fi
.LP
With a function like \fItest/0\fR\& below the whole example can be started\&.
.LP
.nf

test() ->
    P = spawn(?MODULE, loop, [port]),
    register(call_server, spawn(?MODULE, loop, [])),
    start(),
    P ! {port,message}.
.fi