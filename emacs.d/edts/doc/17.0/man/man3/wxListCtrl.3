.TH wxListCtrl 3 "wx 1.2" "" "Erlang Module Definition"
.SH NAME
wxListCtrl \- See external documentation: wxListCtrl.
.SH DESCRIPTION
.LP
See external documentation: wxListCtrl\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxControl\fR\& 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxListCtrl()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxListCtrl()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow)) -> wxListCtrl()
.br
.RS
.LP
Equivalent to \fBnew(Parent, [])\fR\&\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow), Options::[Option]) -> wxListCtrl()
.br
.RS
.LP
Types:

.RS 3
Option = {winid, integer()} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()} | {validator, wx() (see module wx)} | {onGetItemText, OnGetItemText} | {onGetItemAttr, OnGetItemAttr} | {onGetItemColumnImage, OnGetItemColumnImage}
.br
OnGetItemText = (This, Item, Column) -> wxString()
.br
OnGetItemAttr = (This, Item) -> wxListItemAttr()
.br
OnGetItemColumnImage = (This, Item, Column) -> integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
arrange(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBarrange(This, [])\fR\&\&.
.RE
.LP
.B
arrange(This, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Option = {flag, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
assignImageList(This, ImageList, Which) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
ImageList = wxImageList() (see module wxImageList)
.br
Which = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clearAll(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This::wxListCtrl(), Parent::wxWindow() (see module wxWindow)) -> bool()
.br
.RS
.LP
Equivalent to \fBcreate(This, Parent, [])\fR\&\&.
.RE
.LP
.B
create(This::wxListCtrl(), Parent::wxWindow() (see module wxWindow), Options::[Option]) -> bool()
.br
.RS
.LP
Types:

.RS 3
Option = {winid, integer()} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()} | {validator, wx() (see module wx)} | {onGetItemText, OnGetItemText} | {onGetItemAttr, OnGetItemAttr} | {onGetItemColumnImage, OnGetItemColumnImage}
.br
OnGetItemText = (This, Item, Column) -> wxString()
.br
OnGetItemAttr = (This, Item) -> wxListItemAttr()
.br
OnGetItemColumnImage = (This, Item, Column) -> integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteAllItems(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteColumn(This, Col) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Col = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteItem(This, Item) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
editLabel(This, Item) -> wxTextCtrl() (see module wxTextCtrl)
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
ensureVisible(This, Item) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findItem(This, Start, Str) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Start = integer()
.br
Str = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBfindItem(This, Start, Str, [])\fR\&\&.
.RE
.LP
.B
findItem(This, Start, Str, Option::[Option]) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Start = integer()
.br
Str = chardata() (see module unicode)
.br
Option = {partial, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
findItem(This, Start, Pt, Direction) -> integer() when
.br
This::wxListCtrl(), Start::integer(), Pt::{X::integer(), Y::integer()}, Direction::integer()\&.
.br

.RE
.LP
.B
getColumn(This, Col, Item) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Col = integer()
.br
Item = wxListItem() (see module wxListItem)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getColumnCount(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getColumnWidth(This, Col) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Col = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCountPerPage(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getEditControl(This) -> wxTextCtrl() (see module wxTextCtrl)
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getImageList(This, Which) -> wxImageList() (see module wxImageList)
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Which = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItem(This, Info) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Info = wxListItem() (see module wxListItem)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemBackgroundColour(This, Item) -> wx_colour4() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemCount(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemData(This, Item) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemFont(This, Item) -> wxFont() (see module wxFont)
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemPosition(This, Item) -> Result
.br
.RS
.LP
Types:

.RS 3
Result = {Res::boolean(), Pos::{X::integer(), Y::integer()}}
.br
This = wxListCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemRect(This, Item) -> Result
.br
.RS
.LP
Types:

.RS 3
Result = {Res::boolean(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}}
.br
This = wxListCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBgetItemRect(This, Item, [])\fR\&\&.
.RE
.LP
.B
getItemRect(This, Item, Option::[Option]) -> Result
.br
.RS
.LP
Types:

.RS 3
Result = {Res::boolean(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}}
.br
This = wxListCtrl()
.br
Item = integer()
.br
Option = {code, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemSpacing(This) -> {W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemState(This, Item, StateMask) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
StateMask = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemText(This, Item) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemTextColour(This, Item) -> wx_colour4() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getNextItem(This, Item) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBgetNextItem(This, Item, [])\fR\&\&.
.RE
.LP
.B
getNextItem(This, Item, Option::[Option]) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
Option = {geometry, integer()} | {state, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectedItemCount(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTextColour(This) -> wx_colour4() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTopItem(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getViewRect(This) -> {X::integer(), Y::integer(), W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hitTest(This, Point, Flags) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Point = {X::integer(), Y::integer()}
.br
Flags = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertColumn(This, Col, Heading) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Col = integer()
.br
Heading = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
insertColumn(This, Col, Info) -> integer() when
.br
This::wxListCtrl(), Col::integer(), Info::wxListItem:wxListItem()\&.
.br

.RE
.LP
.B
insertColumn(This, Col, Heading, Option::[Option]) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Col = integer()
.br
Heading = chardata() (see module unicode)
.br
Option = {format, integer()} | {width, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertItem(This, Info) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Info = wxListItem() (see module wxListItem)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertItem(This, Index, ImageIndex) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Index = integer()
.br
ImageIndex = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
insertItem(This, Index, Label) -> integer() when
.br
This::wxListCtrl(), Index::integer(), Label::unicode:chardata()\&.
.br

.RE
.LP
.B
insertItem(This, Index, Label, ImageIndex) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Index = integer()
.br
Label = chardata() (see module unicode)
.br
ImageIndex = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
refreshItem(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
refreshItems(This, ItemFrom, ItemTo) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
ItemFrom = integer()
.br
ItemTo = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
scrollList(This, Dx, Dy) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Dx = integer()
.br
Dy = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setBackgroundColour(This, Colour) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Colour = wx_colour() (see module wx)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColumn(This, Col, Item) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Col = integer()
.br
Item = wxListItem() (see module wxListItem)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColumnWidth(This, Col, Width) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Col = integer()
.br
Width = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setImageList(This, ImageList, Which) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
ImageList = wxImageList() (see module wxImageList)
.br
Which = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItem(This, Info) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Info = wxListItem() (see module wxListItem)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItem(This, Index, Col, Label) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Index = integer()
.br
Col = integer()
.br
Label = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBsetItem(This, Index, Col, Label, [])\fR\&\&.
.RE
.LP
.B
setItem(This, Index, Col, Label, Option::[Option]) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Index = integer()
.br
Col = integer()
.br
Label = chardata() (see module unicode)
.br
Option = {imageId, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemBackgroundColour(This, Item, Col) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
Col = wx_colour() (see module wx)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemCount(This, Count) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Count = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemData(This, Item, Data) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
Data = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemFont(This, Item, F) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
F = wxFont() (see module wxFont)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemImage(This, Item, Image) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
Image = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBsetItemImage(This, Item, Image, [])\fR\&\&.
.RE
.LP
.B
setItemImage(This, Item, Image, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
Image = integer()
.br
Option = {selImage, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemColumnImage(This, Item, Column, Image) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
Column = integer()
.br
Image = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemPosition(This, Item, Pos) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
Pos = {X::integer(), Y::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemState(This, Item, State, StateMask) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
State = integer()
.br
StateMask = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemText(This, Item, Str) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
Str = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemTextColour(This, Item, Col) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Item = integer()
.br
Col = wx_colour() (see module wx)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSingleStyle(This, Style) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Style = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBsetSingleStyle(This, Style, [])\fR\&\&.
.RE
.LP
.B
setSingleStyle(This, Style, Option::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Style = integer()
.br
Option = {add, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setTextColour(This, Col) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Col = wx_colour() (see module wx)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWindowStyleFlag(This, Style) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxListCtrl()
.br
Style = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
sortItems(This::wxListCtrl(), SortCallBack::function()) -> boolean()
.br
.RS
.LP
Sort the items in the list control
.br

.LP
.nf
SortCallBack(Item1,Item2) -> integer()
.fi
.LP

.br
SortCallBack receives the client data associated with two items to compare, and should return 0 if the items are equal, a negative value if the first item is less than the second one and a positive value if the first item is greater than the second one\&. 
.br
NOTE: The callback may not call other (wx) processes\&.
.RE
.LP
.B
destroy(This::wxListCtrl()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>