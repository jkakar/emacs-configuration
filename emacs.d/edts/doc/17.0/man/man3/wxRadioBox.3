.TH wxRadioBox 3 "wx 1.2" "" "Erlang Module Definition"
.SH NAME
wxRadioBox \- See external documentation: wxRadioBox.
.SH DESCRIPTION
.LP
See external documentation: wxRadioBox\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxControl\fR\& 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxRadioBox()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new(Parent, Id, Title, Pos, Size, Choices) -> wxRadioBox()
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow() (see module wxWindow)
.br
Id = integer()
.br
Title = chardata() (see module unicode)
.br
Pos = {X::integer(), Y::integer()}
.br
Size = {W::integer(), H::integer()}
.br
Choices = [chardata() (see module unicode)]
.br
.RE
.RE
.RS
.LP
Equivalent to \fBnew(Parent, Id, Title, Pos, Size, Choices, [])\fR\&\&.
.RE
.LP
.B
new(Parent, Id, Title, Pos, Size, Choices, Option::[Option]) -> wxRadioBox()
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow() (see module wxWindow)
.br
Id = integer()
.br
Title = chardata() (see module unicode)
.br
Pos = {X::integer(), Y::integer()}
.br
Size = {W::integer(), H::integer()}
.br
Choices = [chardata() (see module unicode)]
.br
Option = {majorDim, integer()} | {style, integer()} | {val, wx_object() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This, Parent, Id, Title, Pos, Size, Choices) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
Parent = wxWindow() (see module wxWindow)
.br
Id = integer()
.br
Title = chardata() (see module unicode)
.br
Pos = {X::integer(), Y::integer()}
.br
Size = {W::integer(), H::integer()}
.br
Choices = [chardata() (see module unicode)]
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcreate(This, Parent, Id, Title, Pos, Size, Choices, [])\fR\&\&.
.RE
.LP
.B
create(This, Parent, Id, Title, Pos, Size, Choices, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
Parent = wxWindow() (see module wxWindow)
.br
Id = integer()
.br
Title = chardata() (see module unicode)
.br
Pos = {X::integer(), Y::integer()}
.br
Size = {W::integer(), H::integer()}
.br
Choices = [chardata() (see module unicode)]
.br
Option = {majorDim, integer()} | {style, integer()} | {val, wx_object() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enable(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBenable(This, [])\fR\&\&.
.RE
.LP
.B
enable(This, N) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
N = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
enable(This, [Option]) -> boolean() when
.br
This::wxRadioBox(),
.br
Option :: {enable, boolean()}\&.
.br

.RE
.LP
.B
enable(This, N, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
N = integer()
.br
Option = {enable, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelection(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getString(This, N) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
N = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelection(This, N) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
N = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
show(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBshow(This, [])\fR\&\&.
.RE
.LP
.B
show(This, N) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
N = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
show(This, [Option]) -> boolean() when
.br
This::wxRadioBox(),
.br
Option :: {show, boolean()}\&.
.br

.RE
.LP
.B
show(This, N, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
N = integer()
.br
Option = {show, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getColumnCount(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemHelpText(This, N) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
N = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemToolTip(This, Item) -> wxToolTip() (see module wxToolTip)
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemFromPoint(This, Pt) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
Pt = {X::integer(), Y::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getRowCount(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isItemEnabled(This, N) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
N = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isItemShown(This, N) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
N = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemHelpText(This, N, HelpText) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
N = integer()
.br
HelpText = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemToolTip(This, Item, Text) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxRadioBox()
.br
Item = integer()
.br
Text = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxRadioBox()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>