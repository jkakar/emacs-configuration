.TH wxRegion 3 "wx 1.2" "" "Erlang Module Definition"
.SH NAME
wxRegion \- See external documentation: wxRegion.
.SH DESCRIPTION
.LP
See external documentation: wxRegion\&.
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxRegion()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxRegion()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Bmp) -> wxRegion()
.br
.RS
.LP
Types:

.RS 3
Bmp = wxBitmap() (see module wxBitmap)
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
new(Rect) -> wxRegion() when
.br
Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}\&.
.br

.RE
.LP
.B
new(TopLeft, BottomRight) -> wxRegion()
.br
.RS
.LP
Types:

.RS 3
TopLeft = {X::integer(), Y::integer()}
.br
BottomRight = {X::integer(), Y::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(X, Y, W, H) -> wxRegion()
.br
.RS
.LP
Types:

.RS 3
X = integer()
.br
Y = integer()
.br
W = integer()
.br
H = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clear(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
contains(This, Pt) -> wx_enum() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
Pt = {X::integer(), Y::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
contains(This, Rect) -> wx:wx_enum() when
.br
This::wxRegion(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}\&.
.br

.LP

.br
Res = ?wxOutRegion | ?wxPartRegion | ?wxInRegion
.RE
.LP
.B
contains(This, X, Y) -> wx_enum() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Res = ?wxOutRegion | ?wxPartRegion | ?wxInRegion
.RE
.LP
.B
contains(This, X, Y, W, H) -> wx_enum() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
X = integer()
.br
Y = integer()
.br
W = integer()
.br
H = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Res = ?wxOutRegion | ?wxPartRegion | ?wxInRegion
.RE
.LP
.B
convertToBitmap(This) -> wxBitmap() (see module wxBitmap)
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getBox(This) -> {X::integer(), Y::integer(), W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
intersect(This, Region) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
Region = wxRegion()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
intersect(This, Rect) -> boolean() when
.br
This::wxRegion(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}\&.
.br

.RE
.LP
.B
intersect(This, X, Y, W, H) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
X = integer()
.br
Y = integer()
.br
W = integer()
.br
H = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isEmpty(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
subtract(This, Region) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
Region = wxRegion()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
subtract(This, Rect) -> boolean() when
.br
This::wxRegion(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}\&.
.br

.RE
.LP
.B
subtract(This, X, Y, W, H) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
X = integer()
.br
Y = integer()
.br
W = integer()
.br
H = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
offset(This, Pt) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
Pt = {X::integer(), Y::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
offset(This, X, Y) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
union(This, Region) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
Region = wxRegion() | wxBitmap() (see module wxBitmap)
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
union(This, Rect) -> boolean() when
.br
This::wxRegion(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}\&.
.br

.RE
.LP
.B
union(This, Bmp, Transp) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
Bmp = wxBitmap() (see module wxBitmap)
.br
Transp = wx_colour() (see module wx)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBunion(This, Bmp, Transp, [])\fR\&\&.
.RE
.LP
.B
union(This, Bmp, Transp, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
Bmp = wxBitmap() (see module wxBitmap)
.br
Transp = wx_colour() (see module wx)
.br
Option = {tolerance, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
union(This, X, Y, W, H) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
X = integer()
.br
Y = integer()
.br
W = integer()
.br
H = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
Xor(This, Region) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
Region = wxRegion()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
\&'Xor\&'(This, Rect) -> boolean() when
.br
This::wxRegion(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}\&.
.br

.RE
.LP
.B
Xor(This, X, Y, W, H) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxRegion()
.br
X = integer()
.br
Y = integer()
.br
W = integer()
.br
H = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxRegion()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>