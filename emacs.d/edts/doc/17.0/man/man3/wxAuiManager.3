.TH wxAuiManager 3 "wx 1.2" "" "Erlang Module Definition"
.SH NAME
wxAuiManager \- See external documentation: wxAuiManager.
.SH DESCRIPTION
.LP
See external documentation: wxAuiManager\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxAuiManager()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxAuiManager()
.br
.RS
.LP
Equivalent to \fBnew([])\fR\&\&.
.RE
.LP
.B
new(Option::[Option]) -> wxAuiManager()
.br
.RS
.LP
Types:

.RS 3
Option = {managed_wnd, wxWindow() (see module wxWindow)} | {flags, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
addPane(This, Window) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Window = wxWindow() (see module wxWindow)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBaddPane(This, Window, [])\fR\&\&.
.RE
.LP
.B
addPane(This, Window, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Window = wxWindow() (see module wxWindow)
.br
Option = {direction, integer()} | {caption, chardata() (see module unicode)}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
addPane(This, Window, Pane_info) -> boolean() when
.br
This::wxAuiManager(), Window::wxWindow:wxWindow(), Pane_info::wxAuiPaneInfo:wxAuiPaneInfo()\&.
.br

.RE
.LP
.B
addPane(This, Window, Pane_info, Drop_pos) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Window = wxWindow() (see module wxWindow)
.br
Pane_info = wxAuiPaneInfo() (see module wxAuiPaneInfo)
.br
Drop_pos = {X::integer(), Y::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
detachPane(This, Window) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Window = wxWindow() (see module wxWindow)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getAllPanes(This) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getArtProvider(This) -> wxAuiDockArt() (see module wxAuiDockArt)
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDockSizeConstraint(This) -> {Width_pct::number(), Height_pct::number()}
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFlags(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getManagedWindow(This) -> wxWindow() (see module wxWindow)
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getManager(Window) -> wxAuiManager()
.br
.RS
.LP
Types:

.RS 3
Window = wxWindow() (see module wxWindow)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPane(This, Name) -> wxAuiPaneInfo() (see module wxAuiPaneInfo)
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Name = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
getPane(This, Window) -> wxAuiPaneInfo:wxAuiPaneInfo() when
.br
This::wxAuiManager(), Window::wxWindow:wxWindow()\&.
.br

.RE
.LP
.B
hideHint(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertPane(This, Window, Insert_location) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Window = wxWindow() (see module wxWindow)
.br
Insert_location = wxAuiPaneInfo() (see module wxAuiPaneInfo)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBinsertPane(This, Window, Insert_location, [])\fR\&\&.
.RE
.LP
.B
insertPane(This, Window, Insert_location, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Window = wxWindow() (see module wxWindow)
.br
Insert_location = wxAuiPaneInfo() (see module wxAuiPaneInfo)
.br
Option = {insert_level, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadPaneInfo(This, Pane_part, Pane) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Pane_part = chardata() (see module unicode)
.br
Pane = wxAuiPaneInfo() (see module wxAuiPaneInfo)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadPerspective(This, Perspective) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Perspective = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBloadPerspective(This, Perspective, [])\fR\&\&.
.RE
.LP
.B
loadPerspective(This, Perspective, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Perspective = chardata() (see module unicode)
.br
Option = {update, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
savePaneInfo(This, Pane) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Pane = wxAuiPaneInfo() (see module wxAuiPaneInfo)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
savePerspective(This) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setArtProvider(This, Art_provider) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Art_provider = wxAuiDockArt() (see module wxAuiDockArt)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDockSizeConstraint(This, Width_pct, Height_pct) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Width_pct = number()
.br
Height_pct = number()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFlags(This, Flags) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Flags = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setManagedWindow(This, Managed_wnd) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Managed_wnd = wxWindow() (see module wxWindow)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
showHint(This, Rect) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
Rect = {X::integer(), Y::integer(), W::integer(), H::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
unInit(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
update(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManager()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxAuiManager()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>