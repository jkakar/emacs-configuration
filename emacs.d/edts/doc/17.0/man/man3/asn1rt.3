.TH asn1rt 3 "asn1 3.0" "Ericsson AB" "Erlang Module Definition"
.SH NAME
asn1rt \- ASN.1 runtime support functions
.SH DESCRIPTION
.LP

.RS -4
.B
Warning:
.RE
All functions in this module are deprecated and will be removed in a future release\&.

.SH EXPORTS
.LP
.B
decode(Module,Type,Bytes) -> {ok,Value}|{error,Reason}
.br
.RS
.LP
Types:

.RS 3
Module = Type = atom()
.br
Value = Reason = term()
.br
Bytes = binary
.br
.RE
.RE
.RS
.LP
Decodes \fIType\fR\& from \fIModule\fR\& from the binary \fIBytes\fR\&\&. Returns \fI{ok,Value}\fR\& if successful\&.
.LP
Use \fIModule:decode(Type, Bytes)\fR\& instead of this function\&.
.RE
.LP
.B
encode(Module,Type,Value)-> {ok,Bytes} | {error,Reason}
.br
.RS
.LP
Types:

.RS 3
Module = Type = atom()
.br
Value = term()
.br
Bytes = binary
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Encodes \fIValue\fR\& of \fIType\fR\& defined in the ASN\&.1 module \fIModule\fR\&\&. Returns a binary if successful\&. To get as fast execution as possible the encode function only performs rudimentary tests that the input \fIValue\fR\& is a correct instance of \fIType\fR\&\&. The length of strings is, for example, not always checked\&.
.LP
Use \fIModule:encode(Type, Value)\fR\& instead of this function\&.
.RE
.LP
.B
info(Module) -> {ok,Info} | {error,Reason}
.br
.RS
.LP
Types:

.RS 3
Module = atom()
.br
Info = list()
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
\fIinfo/1\fR\& returns the version of the asn1 compiler that was used to compile the module\&. It also returns the compiler options that was used\&.
.LP
Use \fIModule:info()\fR\& instead of this function\&.
.RE
.LP
.B
utf8_binary_to_list(UTF8Binary) -> {ok,UnicodeList} | {error,Reason}
.br
.RS
.LP
Types:

.RS 3
UTF8Binary = binary()
.br
UnicodeList = [integer()]
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
\fIutf8_binary_to_list/1\fR\& Transforms a UTF8 encoded binary to a list of integers, where each integer represents one character as its unicode value\&. The function fails if the binary is not a properly encoded UTF8 string\&.
.LP
Use \fBunicode:characters_to_list/1\fR\& instead of this function\&.
.RE
.LP
.B
utf8_list_to_binary(UnicodeList) -> {ok,UTF8Binary} | {error,Reason}
.br
.RS
.LP
Types:

.RS 3
UnicodeList = [integer()]
.br
UTF8Binary = binary()
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
\fIutf8_list_to_binary/1\fR\& Transforms a list of integers, where each integer represents one character as its unicode value, to a UTF8 encoded binary\&.
.LP
Use \fBunicode:characters_to_binary/1\fR\& instead of this function\&.
.RE