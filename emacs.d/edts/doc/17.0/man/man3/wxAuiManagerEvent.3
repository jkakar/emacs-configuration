.TH wxAuiManagerEvent 3 "wx 1.2" "" "Erlang Module Definition"
.SH NAME
wxAuiManagerEvent \- See external documentation: wxAuiManagerEvent.
.SH DESCRIPTION
.LP
See external documentation: wxAuiManagerEvent\&.
.RS 2
.TP 2
.B
Use \fBwxEvtHandler:connect/3\fR\& with EventType::
\fIaui_pane_button\fR\&, \fIaui_pane_close\fR\&, \fIaui_pane_maximize\fR\&, \fIaui_pane_restore\fR\&, \fIaui_render\fR\&, \fIaui_find_manager\fR\&
.RE
.LP
See also the message variant \fB#wxAuiManager{\fR\&} event record type\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxEvent\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxAuiManagerEvent()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
setManager(This, Mgr) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManagerEvent()
.br
Mgr = wxAuiManager() (see module wxAuiManager)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getManager(This) -> wxAuiManager() (see module wxAuiManager)
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManagerEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setPane(This, P) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManagerEvent()
.br
P = wxAuiPaneInfo() (see module wxAuiPaneInfo)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPane(This) -> wxAuiPaneInfo() (see module wxAuiPaneInfo)
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManagerEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setButton(This, B) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManagerEvent()
.br
B = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getButton(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManagerEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDC(This, Pdc) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManagerEvent()
.br
Pdc = wxDC() (see module wxDC)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDC(This) -> wxDC() (see module wxDC)
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManagerEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
veto(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManagerEvent()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBveto(This, [])\fR\&\&.
.RE
.LP
.B
veto(This, Option::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManagerEvent()
.br
Option = {veto, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getVeto(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManagerEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCanVeto(This, Can_veto) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManagerEvent()
.br
Can_veto = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canVeto(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxAuiManagerEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.SH AUTHORS
.LP

.I
<>