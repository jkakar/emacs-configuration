.TH wxTreeCtrl 3 "wx 1.2" "" "Erlang Module Definition"
.SH NAME
wxTreeCtrl \- See external documentation: wxTreeCtrl.
.SH DESCRIPTION
.LP
See external documentation: wxTreeCtrl\&.
.LP
Note: The representation of treeItemId() have changed from the original class implementation to be an semi-opaque type,Equality between TreeItemId\&'s can be tested and zero means that the TreeItem is invalid\&.
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxTreeCtrl()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxTreeCtrl()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent) -> wxTreeCtrl()
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow() (see module wxWindow)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBnew(Parent, [])\fR\&\&.
.RE
.LP
.B
new(Parent, Option::[Option]) -> wxTreeCtrl()
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow() (see module wxWindow)
.br
Option = {id, integer()} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()} | {validator, wx_object() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
addRoot(This, Text) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Text = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBaddRoot(This, Text, [])\fR\&\&.
.RE
.LP
.B
addRoot(This, Text, Option::[Option]) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Text = chardata() (see module unicode)
.br
Option = {image, integer()} | {selectedImage, integer()} | {data, term()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
appendItem(This, Parent, Text) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Parent = integer()
.br
Text = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBappendItem(This, Parent, Text, [])\fR\&\&.
.RE
.LP
.B
appendItem(This, Parent, Text, Option::[Option]) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Parent = integer()
.br
Text = chardata() (see module unicode)
.br
Option = {image, integer()} | {selectedImage, integer()} | {data, term()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
assignImageList(This, ImageList) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
ImageList = wxImageList() (see module wxImageList)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
assignStateImageList(This, ImageList) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
ImageList = wxImageList() (see module wxImageList)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
collapse(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
collapseAndReset(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This, Parent) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Parent = wxWindow() (see module wxWindow)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcreate(This, Parent, [])\fR\&\&.
.RE
.LP
.B
create(This, Parent, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Parent = wxWindow() (see module wxWindow)
.br
Option = {id, integer()} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()} | {validator, wx_object() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
delete(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteAllItems(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteChildren(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
editLabel(This, Item) -> wxTextCtrl() (see module wxTextCtrl)
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
ensureVisible(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
expand(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getBoundingRect(This, Item) -> Result
.br
.RS
.LP
Types:

.RS 3
Result = {Res::boolean(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}}
.br
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBgetBoundingRect(This, Item, [])\fR\&\&.
.RE
.LP
.B
getBoundingRect(This, Item, Option::[Option]) -> Result
.br
.RS
.LP
Types:

.RS 3
Result = {Res::boolean(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}}
.br
This = wxTreeCtrl()
.br
Item = integer()
.br
Option = {textOnly, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getChildrenCount(This, Item) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBgetChildrenCount(This, Item, [])\fR\&\&.
.RE
.LP
.B
getChildrenCount(This, Item, Option::[Option]) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
Option = {recursively, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCount(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getEditControl(This) -> wxTextCtrl() (see module wxTextCtrl)
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFirstChild(This, Item) -> Result
.br
.RS
.LP
Types:

.RS 3
Result = {Res::integer(), Cookie::integer()}
.br
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getNextChild(This, Item, Cookie) -> Result
.br
.RS
.LP
Types:

.RS 3
Result = {Res::integer(), Cookie::integer()}
.br
This = wxTreeCtrl()
.br
Item = integer()
.br
Cookie = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFirstVisibleItem(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getImageList(This) -> wxImageList() (see module wxImageList)
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getIndent(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemBackgroundColour(This, Item) -> wx_colour4() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemData(This, Item) -> term()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemFont(This, Item) -> wxFont() (see module wxFont)
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemImage(This, Item) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemImage(This, Item, Option::[Option]) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
Option = {which, wx_enum() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Which = ?wxTreeItemIcon_Normal | ?wxTreeItemIcon_Selected | ?wxTreeItemIcon_Expanded | ?wxTreeItemIcon_SelectedExpanded | ?wxTreeItemIcon_Max
.RE
.LP
.B
getItemText(This, Item) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemTextColour(This, Item) -> wx_colour4() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLastChild(This, Item) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getNextSibling(This, Item) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getNextVisible(This, Item) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemParent(This, Item) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPrevSibling(This, Item) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPrevVisible(This, Item) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getRootItem(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelection(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelections(This) -> Result
.br
.RS
.LP
Types:

.RS 3
Result = {Res::integer(), Val::[integer()]}
.br
This = wxTreeCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStateImageList(This) -> wxImageList() (see module wxImageList)
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hitTest(This, Point) -> Result
.br
.RS
.LP
Types:

.RS 3
Result = {Res::integer(), Flags::integer()}
.br
This = wxTreeCtrl()
.br
Point = {X::integer(), Y::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertItem(This, Parent, Pos, Text) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Parent = integer()
.br
Pos = integer()
.br
Text = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBinsertItem(This, Parent, Pos, Text, [])\fR\&\&.
.RE
.LP
.B
insertItem(This, Parent, Pos, Text, Option::[Option]) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Parent = integer()
.br
Pos = integer()
.br
Text = chardata() (see module unicode)
.br
Option = {image, integer()} | {selImage, integer()} | {data, term()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isBold(This, Item) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isExpanded(This, Item) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isSelected(This, Item) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isVisible(This, Item) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
itemHasChildren(This, Item) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isTreeItemIdOk(Id) -> boolean()
.br
.RS
.LP
Types:

.RS 3
Id = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
prependItem(This, Parent, Text) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Parent = integer()
.br
Text = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBprependItem(This, Parent, Text, [])\fR\&\&.
.RE
.LP
.B
prependItem(This, Parent, Text, Option::[Option]) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Parent = integer()
.br
Text = chardata() (see module unicode)
.br
Option = {image, integer()} | {selectedImage, integer()} | {data, term()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
scrollTo(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
selectItem(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
selectItem(This, Item, Option::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
Option = {select, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setIndent(This, Indent) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Indent = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setImageList(This, ImageList) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
ImageList = wxImageList() (see module wxImageList)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemBackgroundColour(This, Item, Col) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
Col = wx_colour() (see module wx)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemBold(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBsetItemBold(This, Item, [])\fR\&\&.
.RE
.LP
.B
setItemBold(This, Item, Option::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
Option = {bold, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemData(This, Item, Data) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
Data = term()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemDropHighlight(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBsetItemDropHighlight(This, Item, [])\fR\&\&.
.RE
.LP
.B
setItemDropHighlight(This, Item, Option::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
Option = {highlight, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemFont(This, Item, Font) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
Font = wxFont() (see module wxFont)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemHasChildren(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBsetItemHasChildren(This, Item, [])\fR\&\&.
.RE
.LP
.B
setItemHasChildren(This, Item, Option::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
Option = {has, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemImage(This, Item, Image) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
Image = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemImage(This, Item, Image, Option::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
Image = integer()
.br
Option = {which, wx_enum() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Which = ?wxTreeItemIcon_Normal | ?wxTreeItemIcon_Selected | ?wxTreeItemIcon_Expanded | ?wxTreeItemIcon_SelectedExpanded | ?wxTreeItemIcon_Max
.RE
.LP
.B
setItemText(This, Item, Text) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
Text = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemTextColour(This, Item, Col) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
Col = wx_colour() (see module wx)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStateImageList(This, ImageList) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
ImageList = wxImageList() (see module wxImageList)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWindowStyle(This, Styles) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Styles = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
sortChildren(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
toggle(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
toggleItemSelection(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
unselect(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
unselectAll(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
unselectItem(This, Item) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTreeCtrl()
.br
Item = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxTreeCtrl()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>