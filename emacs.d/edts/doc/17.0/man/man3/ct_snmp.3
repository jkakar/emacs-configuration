.TH ct_snmp 3 "common_test 1.8" "" "Erlang Module Definition"
.SH NAME
ct_snmp \- Common Test user interface module for the OTP snmp application.
.SH DESCRIPTION
.LP
Common Test user interface module for the OTP snmp application
.LP
The purpose of this module is to make snmp configuration easier for the test case writer\&. Many test cases can use default values for common operations and then no snmp configuration files need to be supplied\&. When it is necessary to change particular configuration parameters, a subset of the relevant snmp configuration files may be passed to \fIct_snmp\fR\& by means of Common Test configuration files\&. For more specialized configuration parameters, it is possible to place a "simple snmp configuration file" in the test suite data directory\&. To simplify the test suite, Common Test keeps track of some of the snmp manager information\&. This way the test suite doesn\&'t have to handle as many input parameters as it would if it had to interface the OTP snmp manager directly\&.
.LP
The following snmp manager and agent parameters are configurable:
.LP
.nf

   {snmp,
          %%% Manager config
          [{start_manager, boolean()}    % Optional - default is true
          {users, [{user_name(), [call_back_module(), user_data()]}]}, %% Optional
          {usm_users, [{usm_user_name(), [usm_config()]}]},%% Optional - snmp v3 only
          % managed_agents is optional
          {managed_agents,[{agent_name(), [user_name(), agent_ip(), agent_port(), [agent_config()]]}]},
          {max_msg_size, integer()},     % Optional - default is 484
          {mgr_port, integer()},         % Optional - default is 5000
          {engine _id, string()},        % Optional - default is "mgrEngine"
  
          %%% Agent config
          {start_agent, boolean()},      % Optional - default is false
          {agent_sysname, string()},     % Optional - default is "ct_test"
          {agent_manager_ip, manager_ip()}, % Optional - default is localhost
          {agent_vsns, list()},          % Optional - default is [v2]
          {agent_trap_udp, integer()},   % Optional - default is 5000
          {agent_udp, integer()},        % Optional - default is 4000
          {agent_notify_type, atom()},   % Optional - default is trap
          {agent_sec_type, sec_type()},  % Optional - default is none
          {agent_passwd, string()},      % Optional - default is ""
          {agent_engine_id, string()},   % Optional - default is "agentEngine"
          {agent_max_msg_size, string()},% Optional - default is 484
  
          %% The following parameters represents the snmp configuration files
          %% context.conf, standard.conf, community.conf, vacm.conf,
          %% usm.conf, notify.conf, target_addr.conf and target_params.conf.
          %% Note all values in agent.conf can be altered by the parametes
          %% above. All these configuration files have default values set
          %% up by the snmp application. These values can be overridden by
          %% suppling a list of valid configuration values or a file located
          %% in the test suites data dir that can produce a list
          %% of valid configuration values if you apply file:consult/1 to the
          %% file.
          {agent_contexts, [term()] | {data_dir_file, rel_path()}}, % Optional
          {agent_community, [term()] | {data_dir_file, rel_path()}},% Optional
          {agent_sysinfo,  [term()] | {data_dir_file, rel_path()}}, % Optional
          {agent_vacm, [term()] | {data_dir_file, rel_path()}},     % Optional
          {agent_usm, [term()] | {data_dir_file, rel_path()}},      % Optional
          {agent_notify_def, [term()] | {data_dir_file, rel_path()}},% Optional
          {agent_target_address_def, [term()] | {data_dir_file, rel_path()}},% Optional
          {agent_target_param_def, [term()] | {data_dir_file, rel_path()}},% Optional
         ]}.
   
.fi
.LP
The \fIMgrAgentConfName\fR\& parameter in the functions should be a name you allocate in your test suite using a \fIrequire\fR\& statement\&. Example (where \fIMgrAgentConfName = snmp_mgr_agent\fR\&):
.LP
.nf
 suite() -> [{require, snmp_mgr_agent, snmp}].
.fi
.LP
or
.LP
.nf
  ct:require(snmp_mgr_agent, snmp).
.fi
.LP
Note that Usm users are needed for snmp v3 configuration and are not to be confused with users\&.
.LP
Snmp traps, inform and report messages are handled by the user callback module\&. For more information about this see the snmp application\&.
.LP
Note: It is recommended to use the \&.hrl-files created by the Erlang/OTP mib-compiler to define the oids\&. Example for the getting the erlang node name from the erlNodeTable in the OTP-MIB:
.LP
.nf
Oid = ?erlNodeEntry ++ [?erlNodeName, 1] 
.fi
.LP
It is also possible to set values for snmp application configuration parameters, such as \fIconfig\fR\&, \fIserver\fR\&, \fInet_if\fR\&, etc (see the "Configuring the application" chapter in the OTP snmp User\&'s Guide for a list of valid parameters and types)\&. This is done by defining a configuration data variable on the following form:
.LP
.nf

   {snmp_app, [{manager, [snmp_app_manager_params()]},
               {agent, [snmp_app_agent_params()]}]}.
.fi
.LP
A name for the data needs to be allocated in the suite using \fIrequire\fR\& (see example above), and this name passed as the \fISnmpAppConfName\fR\& argument to \fIstart/3\fR\&\&. \fIct_snmp\fR\& specifies default values for some snmp application configuration parameters (such as \fI{verbosity,trace}\fR\& for the \fIconfig\fR\& parameter)\&. This set of defaults will be merged with the parameters specified by the user, and user values override \fIct_snmp\fR\& defaults\&.
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIagent_config() = {Item, Value}\fR\&:

.TP 2
.B
\fIagent_ip() = ip()\fR\&:

.TP 2
.B
\fIagent_name() = atom()\fR\&:

.TP 2
.B
\fIagent_port() = integer()\fR\&:

.TP 2
.B
\fIcall_back_module() = atom()\fR\&:

.TP 2
.B
\fIerror_index() = integer()\fR\&:

.TP 2
.B
\fIerror_status() = noError | atom()\fR\&:

.TP 2
.B
\fIip() = string() | {integer(), integer(), integer(), integer()}\fR\&:

.TP 2
.B
\fImanager_ip() = ip()\fR\&:

.TP 2
.B
\fIoid() = [byte()]\fR\&:

.TP 2
.B
\fIoids() = [oid()]\fR\&:

.TP 2
.B
\fIrel_path() = string()\fR\&:

.TP 2
.B
\fIsec_type() = none | minimum | semi\fR\&:

.TP 2
.B
\fIsnmp_app_agent_params() = term()\fR\&:

.TP 2
.B
\fIsnmp_app_manager_params() = term()\fR\&:

.TP 2
.B
\fIsnmpreply() = {error_status(), error_index(), varbinds()}\fR\&:

.TP 2
.B
\fIuser_data() = term()\fR\&:

.TP 2
.B
\fIuser_name() = atom()\fR\&:

.TP 2
.B
\fIusm_config() = {Item, Value}\fR\&:

.TP 2
.B
\fIusm_user_name() = string()\fR\&:

.TP 2
.B
\fIvalue_type() = o(\&'OBJECT IDENTIFIER\&') | i(\&'INTEGER\&') | u(\&'Unsigned32\&') | g(\&'Unsigned32\&') | s(\&'OCTET STRING\&')\fR\&:

.TP 2
.B
\fIvar_and_val() = {oid(), value_type(), value()}\fR\&:

.TP 2
.B
\fIvarbind() = term()\fR\&:

.TP 2
.B
\fIvarbinds() = [varbind()]\fR\&:

.TP 2
.B
\fIvarsandvals() = [var_and_val()]\fR\&:

.RE
.SH EXPORTS
.LP
.B
get_next_values(Agent, Oids, MgrAgentConfName) -> SnmpReply
.br
.RS
.LP
Types:

.RS 3
Agent = agent_name()
.br
Oids = oids()
.br
MgrAgentConfName = atom()
.br
SnmpReply = snmpreply()
.br
.RE
.RE
.RS
.LP
Issues a synchronous snmp get next request\&.
.RE
.LP
.B
get_values(Agent, Oids, MgrAgentConfName) -> SnmpReply
.br
.RS
.LP
Types:

.RS 3
Agent = agent_name()
.br
Oids = oids()
.br
MgrAgentConfName = atom()
.br
SnmpReply = snmpreply()
.br
.RE
.RE
.RS
.LP
Issues a synchronous snmp get request\&.
.RE
.LP
.B
load_mibs(Mibs) -> ok | {error, Reason}
.br
.RS
.LP
Types:

.RS 3
Mibs = [MibName]
.br
MibName = string()
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Load the mibs into the agent \&'snmp_master_agent\&'\&.
.RE
.LP
.B
register_agents(MgrAgentConfName, ManagedAgents) -> ok | {error, Reason}
.br
.RS
.LP
Types:

.RS 3
MgrAgentConfName = atom()
.br
ManagedAgents = [agent()]
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Explicitly instruct the manager to handle this agent\&. Corresponds to making an entry in agents\&.conf This function will try to register the given managed agents, without checking if any of them already exist\&. In order to change an already registered managed agent, the agent must first be unregistered\&. 
.RE
.LP
.B
register_users(MgrAgentConfName, Users) -> ok | {error, Reason}
.br
.RS
.LP
Types:

.RS 3
MgrAgentConfName = atom()
.br
Users = [user()]
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Register the manager entity (=user) responsible for specific agent(s)\&. Corresponds to making an entry in users\&.conf\&. This function will try to register the given users, without checking if any of them already exist\&. In order to change an already registered user, the user must first be unregistered\&. 
.RE
.LP
.B
register_usm_users(MgrAgentConfName, UsmUsers) -> ok | {error, Reason}
.br
.RS
.LP
Types:

.RS 3
MgrAgentConfName = atom()
.br
UsmUsers = [usm_user()]
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Explicitly instruct the manager to handle this USM user\&. Corresponds to making an entry in usm\&.conf This function will try to register the given users, without checking if any of them already exist\&. In order to change an already registered user, the user must first be unregistered\&. 
.RE
.LP
.B
set_info(Config) -> [{Agent, OldVarsAndVals, NewVarsAndVals}]
.br
.RS
.LP
Types:

.RS 3
Config = [{Key, Value}]
.br
Agent = agent_name()
.br
OldVarsAndVals = varsandvals()
.br
NewVarsAndVals = varsandvals()
.br
.RE
.RE
.RS
.LP
Returns a list of all successful set requests performed in the test case in reverse order\&. The list contains the involved user and agent, the value prior to the set and the new value\&. This is intended to facilitate the clean up in the end_per_testcase function i\&.e\&. the undoing of the set requests and its possible side-effects\&.
.RE
.LP
.B
set_values(Agent, VarsAndVals, MgrAgentConfName, Config) -> SnmpReply
.br
.RS
.LP
Types:

.RS 3
Agent = agent_name()
.br
Oids = oids()
.br
MgrAgentConfName = atom()
.br
Config = [{Key, Value}]
.br
SnmpReply = snmpreply()
.br
.RE
.RE
.RS
.LP
Issues a synchronous snmp set request\&.
.RE
.LP
.B
start(Config, MgrAgentConfName) -> ok
.br
.RS
.LP
Equivalent to \fBstart(Config, MgrAgentConfName, undefined)\fR\&\&.
.RE
.LP
.B
start(Config, MgrAgentConfName, SnmpAppConfName) -> ok
.br
.RS
.LP
Types:

.RS 3
Config = [{Key, Value}]
.br
Key = atom()
.br
Value = term()
.br
MgrAgentConfName = atom()
.br
SnmpConfName = atom()
.br
.RE
.RE
.RS
.LP
Starts an snmp manager and/or agent\&. In the manager case, registrations of users and agents as specified by the configuration \fIMgrAgentConfName\fR\& will be performed\&. When using snmp v3 also so called usm users will be registered\&. Note that users, usm_users and managed agents may also be registered at a later time using ct_snmp:register_users/2, ct_snmp:register_agents/2, and ct_snmp:register_usm_users/2\&. The agent started will be called \fIsnmp_master_agent\fR\&\&. Use ct_snmp:load_mibs/1 to load mibs into the agent\&. With \fISnmpAppConfName\fR\& it\&'s possible to configure the snmp application with parameters such as \fIconfig\fR\&, \fImibs\fR\&, \fInet_if\fR\&, etc\&. The values will be merged with (and possibly override) default values set by \fIct_snmp\fR\&\&.
.RE
.LP
.B
stop(Config) -> ok
.br
.RS
.LP
Types:

.RS 3
Config = [{Key, Value}]
.br
Key = atom()
.br
Value = term()
.br
.RE
.RE
.RS
.LP
Stops the snmp manager and/or agent removes all files created\&.
.RE
.LP
.B
unload_mibs(Mibs) -> ok | {error, Reason}
.br
.RS
.LP
Types:

.RS 3
Mibs = [MibName]
.br
MibName = string()
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Unload the mibs from the agent \&'snmp_master_agent\&'\&.
.RE
.LP
.B
unregister_agents(MgrAgentConfName) -> ok
.br
.RS
.LP
Types:

.RS 3
MgrAgentConfName = atom()
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Unregister all managed agents\&.
.RE
.LP
.B
unregister_agents(MgrAgentConfName, ManagedAgents) -> ok
.br
.RS
.LP
Types:

.RS 3
MgrAgentConfName = atom()
.br
ManagedAgents = [agent_name()]
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Unregister the given managed agents\&.
.RE
.LP
.B
unregister_users(MgrAgentConfName) -> ok
.br
.RS
.LP
Types:

.RS 3
MgrAgentConfName = atom()
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Unregister all users\&.
.RE
.LP
.B
unregister_users(MgrAgentConfName, Users) -> ok
.br
.RS
.LP
Types:

.RS 3
MgrAgentConfName = atom()
.br
Users = [user_name()]
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Unregister the given users\&.
.RE
.LP
.B
unregister_usm_users(MgrAgentConfName) -> ok
.br
.RS
.LP
Types:

.RS 3
MgrAgentConfName = atom()
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Unregister all usm users\&.
.RE
.LP
.B
unregister_usm_users(MgrAgentConfName, UsmUsers) -> ok
.br
.RS
.LP
Types:

.RS 3
MgrAgentConfName = atom()
.br
UsmUsers = [usm_user_name()]
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Unregister the given usm users\&.
.RE
.SH AUTHORS
.LP

.I
<>