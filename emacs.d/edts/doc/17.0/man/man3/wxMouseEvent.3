.TH wxMouseEvent 3 "wx 1.2" "" "Erlang Module Definition"
.SH NAME
wxMouseEvent \- See external documentation: wxMouseEvent.
.SH DESCRIPTION
.LP
See external documentation: wxMouseEvent\&.
.RS 2
.TP 2
.B
Use \fBwxEvtHandler:connect/3\fR\& with EventType::
\fIleft_down\fR\&, \fIleft_up\fR\&, \fImiddle_down\fR\&, \fImiddle_up\fR\&, \fIright_down\fR\&, \fIright_up\fR\&, \fImotion\fR\&, \fIenter_window\fR\&, \fIleave_window\fR\&, \fIleft_dclick\fR\&, \fImiddle_dclick\fR\&, \fIright_dclick\fR\&, \fImousewheel\fR\&
.RE
.LP
See also the message variant \fB#wxMouse{\fR\&} event record type\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxEvent\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxMouseEvent()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
altDown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
button(This, But) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
But = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
buttonDClick(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBbuttonDClick(This, [])\fR\&\&.
.RE
.LP
.B
buttonDClick(This, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
Option = {but, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
buttonDown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBbuttonDown(This, [])\fR\&\&.
.RE
.LP
.B
buttonDown(This, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
Option = {but, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
buttonUp(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBbuttonUp(This, [])\fR\&\&.
.RE
.LP
.B
buttonUp(This, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
Option = {but, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
cmdDown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
controlDown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
dragging(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
entering(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getButton(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPosition(This) -> {X::integer(), Y::integer()}
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLogicalPosition(This, Dc) -> {X::integer(), Y::integer()}
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
Dc = wxDC() (see module wxDC)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLinesPerAction(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getWheelRotation(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getWheelDelta(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getX(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getY(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isButton(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isPageScroll(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
leaving(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
leftDClick(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
leftDown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
leftIsDown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
leftUp(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
metaDown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
middleDClick(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
middleDown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
middleIsDown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
middleUp(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
moving(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
rightDClick(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
rightDown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
rightIsDown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
rightUp(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
shiftDown(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMouseEvent()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.SH AUTHORS
.LP

.I
<>