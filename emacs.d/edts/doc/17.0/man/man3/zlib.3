.TH zlib 3 "erts 6.0" "Ericsson AB" "Erlang Module Definition"
.SH NAME
zlib \- Zlib Compression interface.
.SH DESCRIPTION
.LP
The zlib module provides an API for the zlib library (http://www\&.zlib\&.org)\&. It is used to compress and decompress data\&. The data format is described by RFCs 1950 to 1952\&.
.LP
A typical (compress) usage looks like:
.LP
.nf

Z = zlib:open(),
ok = zlib:deflateInit(Z,default),

Compress = fun(end_of_data, _Cont) -> [];
              (Data, Cont) ->
                 [zlib:deflate(Z, Data)|Cont(Read(),Cont)]
           end,
Compressed = Compress(Read(),Compress),
Last = zlib:deflate(Z, [], finish),
ok = zlib:deflateEnd(Z),
zlib:close(Z),
list_to_binary([Compressed|Last])
.fi
.LP
In all functions errors, \fI{\&'EXIT\&',{Reason,Backtrace}}\fR\&, might be thrown, where \fIReason\fR\& describes the error\&. Typical reasons are:
.RS 2
.TP 2
.B
\fIbadarg\fR\&:
Bad argument
.TP 2
.B
\fIdata_error\fR\&:
The data contains errors
.TP 2
.B
\fIstream_error\fR\&:
Inconsistent stream state
.TP 2
.B
\fIeinval\fR\&:
Bad value or wrong function called
.TP 2
.B
\fI{need_dictionary,Adler32}\fR\&:
See \fIinflate/2\fR\&
.RE
.SH DATA TYPES
.nf

\fBzstream()\fR\& = port()
.br
.fi
.RS
.LP
A zlib stream, see \fBopen/0\fR\&\&.
.RE
.nf

\fBzlevel()\fR\& = none
.br
         | default
.br
         | best_compression
.br
         | best_speed
.br
         | 0\&.\&.9
.br
.fi
.nf

\fBzmemlevel()\fR\& = 1\&.\&.9
.br
.fi
.nf

\fBzmethod()\fR\& = deflated
.br
.fi
.nf

\fBzstrategy()\fR\& = default | filtered | huffman_only | rle
.br
.fi
.nf

\fBzwindowbits()\fR\& = -15\&.\&.-9 | 9\&.\&.47
.br
.fi
.RS
.LP
Normally in the range \fI-15\&.\&.-9 | 9\&.\&.15\fR\&\&.
.RE
.SH EXPORTS
.LP
.nf

.B
open() -> zstream()
.br
.fi
.br
.RS
.LP
Open a zlib stream\&.
.RE
.LP
.nf

.B
close(Z) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
.RE
.RE
.RS
.LP
Closes the stream referenced by \fIZ\fR\&\&.
.RE
.LP
.nf

.B
deflateInit(Z) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
.RE
.RE
.RS
.LP
Same as \fIzlib:deflateInit(Z, default)\fR\&\&.
.RE
.LP
.nf

.B
deflateInit(Z, Level) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
Level = \fBzlevel()\fR\&
.br
.RE
.RE
.RS
.LP
Initialize a zlib stream for compression\&.
.LP
\fILevel\fR\& decides the compression level to be used, 0 (\fInone\fR\&), gives no compression at all, 1 (\fIbest_speed\fR\&) gives best speed and 9 (\fIbest_compression\fR\&) gives best compression\&.
.RE
.LP
.nf

.B
deflateInit(Z, Level, Method, WindowBits, MemLevel, Strategy) ->
.B
               ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
Level = \fBzlevel()\fR\&
.br
Method = \fBzmethod()\fR\&
.br
WindowBits = \fBzwindowbits()\fR\&
.br
MemLevel = \fBzmemlevel()\fR\&
.br
Strategy = \fBzstrategy()\fR\&
.br
.RE
.RE
.RS
.LP
Initiates a zlib stream for compression\&.
.LP
The \fILevel\fR\& parameter decides the compression level to be used, 0 (\fInone\fR\&), gives no compression at all, 1 (\fIbest_speed\fR\&) gives best speed and 9 (\fIbest_compression\fR\&) gives best compression\&.
.LP
The \fIMethod\fR\& parameter decides which compression method to use, currently the only supported method is \fIdeflated\fR\&\&.
.LP
The \fIWindowBits\fR\& parameter is the base two logarithm of the window size (the size of the history buffer)\&. It should be in the range 9 through 15\&. Larger values of this parameter result in better compression at the expense of memory usage\&. The default value is 15 if \fIdeflateInit/2\fR\&\&. A negative \fIWindowBits\fR\& value suppresses the zlib header (and checksum) from the stream\&. Note that the zlib source mentions this only as a undocumented feature\&.
.LP
The \fIMemLevel\fR\& parameter specifies how much memory should be allocated for the internal compression state\&. \fIMemLevel\fR\&=1 uses minimum memory but is slow and reduces compression ratio; \fIMemLevel\fR\&=9 uses maximum memory for optimal speed\&. The default value is 8\&.
.LP
The \fIStrategy\fR\& parameter is used to tune the compression algorithm\&. Use the value \fIdefault\fR\& for normal data, \fIfiltered\fR\& for data produced by a filter (or predictor), \fIhuffman_only\fR\& to force Huffman encoding only (no string match), or \fIrle\fR\& to limit match distances to one (run-length encoding)\&. Filtered data consists mostly of small values with a somewhat random distribution\&. In this case, the compression algorithm is tuned to compress them better\&. The effect of \fIfiltered\fR\&is to force more Huffman coding and less string matching; it is somewhat intermediate between \fIdefault\fR\& and \fIhuffman_only\fR\&\&. \fIrle\fR\& is designed to be almost as fast as \fIhuffman_only\fR\&, but give better compression for PNG image data\&. The \fIStrategy\fR\& parameter only affects the compression ratio but not the correctness of the compressed output even if it is not set appropriately\&.
.RE
.LP
.nf

.B
deflate(Z, Data) -> Compressed
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
Data = iodata()
.br
Compressed = iolist()
.br
.RE
.RE
.RS
.LP
Same as \fIdeflate(Z, Data, none)\fR\&\&.
.RE
.LP
.nf

.B
deflate(Z, Data, Flush) -> Compressed
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
Data = iodata()
.br
Flush = none | sync | full | finish
.br
Compressed = iolist()
.br
.RE
.RE
.RS
.LP
\fIdeflate/3\fR\& compresses as much data as possible, and stops when the input buffer becomes empty\&. It may introduce some output latency (reading input without producing any output) except when forced to flush\&.
.LP
If the parameter \fIFlush\fR\& is set to \fIsync\fR\&, all pending output is flushed to the output buffer and the output is aligned on a byte boundary, so that the decompressor can get all input data available so far\&. Flushing may degrade compression for some compression algorithms and so it should be used only when necessary\&.
.LP
If \fIFlush\fR\& is set to \fIfull\fR\&, all output is flushed as with \fIsync\fR\&, and the compression state is reset so that decompression can restart from this point if previous compressed data has been damaged or if random access is desired\&. Using \fIfull\fR\& too often can seriously degrade the compression\&.
.LP
If the parameter \fIFlush\fR\& is set to \fIfinish\fR\&, pending input is processed, pending output is flushed and \fIdeflate/3\fR\& returns\&. Afterwards the only possible operations on the stream are \fIdeflateReset/1\fR\& or \fIdeflateEnd/1\fR\&\&.
.LP
\fIFlush\fR\& can be set to \fIfinish\fR\& immediately after \fIdeflateInit\fR\& if all compression is to be done in one step\&.
.LP
.nf

 
zlib:deflateInit(Z),
B1 = zlib:deflate(Z,Data),
B2 = zlib:deflate(Z,<< >>,finish),
zlib:deflateEnd(Z),
list_to_binary([B1,B2])
.fi
.RE
.LP
.nf

.B
deflateSetDictionary(Z, Dictionary) -> Adler32
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
Dictionary = iodata()
.br
Adler32 = integer()
.br
.RE
.RE
.RS
.LP
Initializes the compression dictionary from the given byte sequence without producing any compressed output\&. This function must be called immediately after \fIdeflateInit/[1|2|6]\fR\& or \fIdeflateReset/1\fR\&, before any call of \fIdeflate/3\fR\&\&. The compressor and decompressor must use exactly the same dictionary (see \fIinflateSetDictionary/2\fR\&)\&. The adler checksum of the dictionary is returned\&.
.RE
.LP
.nf

.B
deflateReset(Z) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
.RE
.RE
.RS
.LP
This function is equivalent to \fIdeflateEnd/1\fR\& followed by \fIdeflateInit/[1|2|6]\fR\&, but does not free and reallocate all the internal compression state\&. The stream will keep the same compression level and any other attributes\&.
.RE
.LP
.nf

.B
deflateParams(Z, Level, Strategy) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
Level = \fBzlevel()\fR\&
.br
Strategy = \fBzstrategy()\fR\&
.br
.RE
.RE
.RS
.LP
Dynamically update the compression level and compression strategy\&. The interpretation of \fILevel\fR\& and \fIStrategy\fR\& is as in \fIdeflateInit/6\fR\&\&. This can be used to switch between compression and straight copy of the input data, or to switch to a different kind of input data requiring a different strategy\&. If the compression level is changed, the input available so far is compressed with the old level (and may be flushed); the new level will take effect only at the next call of \fIdeflate/3\fR\&\&.
.LP
Before the call of \fIdeflateParams\fR\&, the stream state must be set as for a call of \fIdeflate/3\fR\&, since the currently available input may have to be compressed and flushed\&.
.RE
.LP
.nf

.B
deflateEnd(Z) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
.RE
.RE
.RS
.LP
End the deflate session and cleans all data used\&. Note that this function will throw an \fIdata_error\fR\& exception if the last call to \fIdeflate/3\fR\& was not called with \fIFlush\fR\& set to \fIfinish\fR\&\&.
.RE
.LP
.nf

.B
inflateInit(Z) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
.RE
.RE
.RS
.LP
Initialize a zlib stream for decompression\&.
.RE
.LP
.nf

.B
inflateInit(Z, WindowBits) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
WindowBits = \fBzwindowbits()\fR\&
.br
.RE
.RE
.RS
.LP
Initialize decompression session on zlib stream\&.
.LP
The \fIWindowBits\fR\& parameter is the base two logarithm of the maximum window size (the size of the history buffer)\&. It should be in the range 9 through 15\&. The default value is 15 if \fIinflateInit/1\fR\& is used\&. If a compressed stream with a larger window size is given as input, inflate() will throw the \fIdata_error\fR\& exception\&. A negative \fIWindowBits\fR\& value makes zlib ignore the zlib header (and checksum) from the stream\&. Note that the zlib source mentions this only as a undocumented feature\&.
.RE
.LP
.nf

.B
inflate(Z, Data) -> Decompressed
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
Data = iodata()
.br
Decompressed = iolist()
.br
.RE
.RE
.RS
.LP
\fIinflate/2\fR\& decompresses as much data as possible\&. It may some introduce some output latency (reading input without producing any output)\&.
.LP
If a preset dictionary is needed at this point (see \fIinflateSetDictionary\fR\& below), \fIinflate/2\fR\& throws a \fI{need_dictionary,Adler}\fR\& exception where \fIAdler\fR\& is the adler32 checksum of the dictionary chosen by the compressor\&.
.RE
.LP
.nf

.B
inflateSetDictionary(Z, Dictionary) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
Dictionary = iodata()
.br
.RE
.RE
.RS
.LP
Initializes the decompression dictionary from the given uncompressed byte sequence\&. This function must be called immediately after a call of \fIinflate/2\fR\& if this call threw a \fI{need_dictionary,Adler}\fR\& exception\&. The dictionary chosen by the compressor can be determined from the Adler value thrown by the call to \fIinflate/2\fR\&\&. The compressor and decompressor must use exactly the same dictionary (see \fIdeflateSetDictionary/2\fR\&)\&.
.LP
Example:
.LP
.nf

unpack(Z, Compressed, Dict) ->
     case catch zlib:inflate(Z, Compressed) of
          {'EXIT',{{need_dictionary,DictID},_}} ->
                   zlib:inflateSetDictionary(Z, Dict),
                 Uncompressed = zlib:inflate(Z, []);
          Uncompressed ->
                 Uncompressed
     end.
.fi
.RE
.LP
.nf

.B
inflateReset(Z) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
.RE
.RE
.RS
.LP
This function is equivalent to \fIinflateEnd/1\fR\& followed by \fIinflateInit/1\fR\&, but does not free and reallocate all the internal decompression state\&. The stream will keep attributes that may have been set by \fIinflateInit/[1|2]\fR\&\&.
.RE
.LP
.nf

.B
inflateEnd(Z) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
.RE
.RE
.RS
.LP
End the inflate session and cleans all data used\&. Note that this function will throw a \fIdata_error\fR\& exception if no end of stream was found (meaning that not all data has been uncompressed)\&.
.RE
.LP
.nf

.B
setBufSize(Z, Size) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
Size = integer() >= 0
.br
.RE
.RE
.RS
.LP
Sets the intermediate buffer size\&.
.RE
.LP
.nf

.B
getBufSize(Z) -> Size
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
Size = integer() >= 0
.br
.RE
.RE
.RS
.LP
Get the size of intermediate buffer\&.
.RE
.LP
.nf

.B
crc32(Z) -> CRC
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
CRC = integer()
.br
.RE
.RE
.RS
.LP
Get the current calculated CRC checksum\&.
.RE
.LP
.nf

.B
crc32(Z, Data) -> CRC
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
Data = iodata()
.br
CRC = integer()
.br
.RE
.RE
.RS
.LP
Calculate the CRC checksum for \fIData\fR\&\&.
.RE
.LP
.nf

.B
crc32(Z, PrevCRC, Data) -> CRC
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
PrevCRC = integer()
.br
Data = iodata()
.br
CRC = integer()
.br
.RE
.RE
.RS
.LP
Update a running CRC checksum for \fIData\fR\&\&. If \fIData\fR\& is the empty binary or the empty iolist, this function returns the required initial value for the crc\&.
.LP
.nf

Crc = lists:foldl(fun(Data,Crc0) ->
                      zlib:crc32(Z, Crc0, Data),
                  end, zlib:crc32(Z,<< >>), Datas)
.fi
.RE
.LP
.nf

.B
crc32_combine(Z, CRC1, CRC2, Size2) -> CRC
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
CRC = CRC1 = CRC2 = Size2 = integer()
.br
.RE
.RE
.RS
.LP
Combine two CRC checksums into one\&. For two binaries or iolists, \fIData1\fR\& and \fIData2\fR\& with sizes of \fISize1\fR\& and \fISize2\fR\&, with CRC checksums \fICRC1\fR\& and \fICRC2\fR\&\&. \fIcrc32_combine/4\fR\& returns the \fICRC\fR\& checksum of \fI[Data1,Data2]\fR\&, requiring only \fICRC1\fR\&, \fICRC2\fR\&, and \fISize2\fR\&\&.
.RE
.LP
.nf

.B
adler32(Z, Data) -> CheckSum
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
Data = iodata()
.br
CheckSum = integer()
.br
.RE
.RE
.RS
.LP
Calculate the Adler-32 checksum for \fIData\fR\&\&.
.RE
.LP
.nf

.B
adler32(Z, PrevAdler, Data) -> CheckSum
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
PrevAdler = integer()
.br
Data = iodata()
.br
CheckSum = integer()
.br
.RE
.RE
.RS
.LP
Update a running Adler-32 checksum for \fIData\fR\&\&. If \fIData\fR\& is the empty binary or the empty iolist, this function returns the required initial value for the checksum\&.
.LP
.nf

Crc = lists:foldl(fun(Data,Crc0) ->
                      zlib:adler32(Z, Crc0, Data),
                  end, zlib:adler32(Z,<< >>), Datas)
.fi
.RE
.LP
.nf

.B
adler32_combine(Z, Adler1, Adler2, Size2) -> Adler
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Z = \fBzstream()\fR\&
.br
Adler = Adler1 = Adler2 = Size2 = integer()
.br
.RE
.RE
.RS
.LP
Combine two Adler-32 checksums into one\&. For two binaries or iolists, \fIData1\fR\& and \fIData2\fR\& with sizes of \fISize1\fR\& and \fISize2\fR\&, with Adler-32 checksums \fIAdler1\fR\& and \fIAdler2\fR\&\&. \fIadler32_combine/4\fR\& returns the \fIAdler\fR\& checksum of \fI[Data1,Data2]\fR\&, requiring only \fIAdler1\fR\&, \fIAdler2\fR\&, and \fISize2\fR\&\&.
.RE
.LP
.nf

.B
compress(Data) -> Compressed
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Data = iodata()
.br
Compressed = binary()
.br
.RE
.RE
.RS
.LP
Compress data (with zlib headers and checksum)\&.
.RE
.LP
.nf

.B
uncompress(Data) -> Decompressed
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Data = iodata()
.br
Decompressed = binary()
.br
.RE
.RE
.RS
.LP
Uncompress data (with zlib headers and checksum)\&.
.RE
.LP
.nf

.B
zip(Data) -> Compressed
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Data = iodata()
.br
Compressed = binary()
.br
.RE
.RE
.RS
.LP
Compress data (without zlib headers and checksum)\&.
.RE
.LP
.nf

.B
unzip(Data) -> Decompressed
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Data = iodata()
.br
Decompressed = binary()
.br
.RE
.RE
.RS
.LP
Uncompress data (without zlib headers and checksum)\&.
.RE
.LP
.nf

.B
gzip(Data) -> Compressed
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Data = iodata()
.br
Compressed = binary()
.br
.RE
.RE
.RS
.LP
Compress data (with gz headers and checksum)\&.
.RE
.LP
.nf

.B
gunzip(Data) -> Decompressed
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Data = iodata()
.br
Decompressed = binary()
.br
.RE
.RE
.RS
.LP
Uncompress data (with gz headers and checksum)\&.
.RE