.TH wxToolBar 3 "wx 1.2" "" "Erlang Module Definition"
.SH NAME
wxToolBar \- See external documentation: wxToolBar.
.SH DESCRIPTION
.LP
See external documentation: wxToolBar\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxControl\fR\& 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxToolBar()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
addControl(This, Control) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Control = wxControl() (see module wxControl)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
addSeparator(This) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
addTool(This, Tool) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Tool = wx_object() (see module wx)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
addTool(This, Toolid, Bitmap) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
Bitmap = wxBitmap() (see module wxBitmap)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBaddTool(This, Toolid, Bitmap, [])\fR\&\&.
.RE
.LP
.B
addTool(This, Toolid, Label, Bitmap) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
Label = chardata() (see module unicode)
.br
Bitmap = wxBitmap() (see module wxBitmap)
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
addTool(This, Toolid, Bitmap, BmpDisabled) -> wx:wx_object() when
.br
This::wxToolBar(), Toolid::integer(), Bitmap::wxBitmap:wxBitmap(), BmpDisabled::wxBitmap:wxBitmap();
.br
(This, Toolid, Bitmap, [Option]) -> wx:wx_object() when
.br
This::wxToolBar(), Toolid::integer(), Bitmap::wxBitmap:wxBitmap(),
.br
Option :: {shortHelpString, unicode:chardata()}
.br
| {longHelpString, unicode:chardata()}\&.
.br

.LP

.br
Kind = ?wxITEM_SEPARATOR | ?wxITEM_NORMAL | ?wxITEM_CHECK | ?wxITEM_RADIO | ?wxITEM_MAX
.RE
.LP
.B
addTool(This, Toolid, Label, Bitmap, BmpDisabled) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
Label = chardata() (see module unicode)
.br
Bitmap = wxBitmap() (see module wxBitmap)
.br
BmpDisabled = wxBitmap() (see module wxBitmap)
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
addTool(This, Toolid, Label, Bitmap, [Option]) -> wx:wx_object() when
.br
This::wxToolBar(), Toolid::integer(), Label::unicode:chardata(), Bitmap::wxBitmap:wxBitmap(),
.br
Option :: {shortHelp, unicode:chardata()}
.br
| {kind, wx:wx_enum()};
.br
(This, Toolid, Bitmap, BmpDisabled, [Option]) -> wx:wx_object() when
.br
This::wxToolBar(), Toolid::integer(), Bitmap::wxBitmap:wxBitmap(), BmpDisabled::wxBitmap:wxBitmap(),
.br
Option :: {toggle, boolean()}
.br
| {clientData, wx:wx_object()}
.br
| {shortHelpString, unicode:chardata()}
.br
| {longHelpString, unicode:chardata()}\&.
.br

.LP

.br
Kind = ?wxITEM_SEPARATOR | ?wxITEM_NORMAL | ?wxITEM_CHECK | ?wxITEM_RADIO | ?wxITEM_MAX
.RE
.LP
.B
addTool(This, Toolid, Bitmap, BmpDisabled, Toggle, XPos) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
Bitmap = wxBitmap() (see module wxBitmap)
.br
BmpDisabled = wxBitmap() (see module wxBitmap)
.br
Toggle = boolean()
.br
XPos = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
addTool(This, Toolid, Label, Bitmap, BmpDisabled, [Option]) -> wx:wx_object() when
.br
This::wxToolBar(), Toolid::integer(), Label::unicode:chardata(), Bitmap::wxBitmap:wxBitmap(), BmpDisabled::wxBitmap:wxBitmap(),
.br
Option :: {kind, wx:wx_enum()}
.br
| {shortHelp, unicode:chardata()}
.br
| {longHelp, unicode:chardata()}
.br
| {data, wx:wx_object()}\&.
.br

.LP

.br
Kind = ?wxITEM_SEPARATOR | ?wxITEM_NORMAL | ?wxITEM_CHECK | ?wxITEM_RADIO | ?wxITEM_MAX
.RE
.LP
.B
addTool(This, Toolid, Bitmap, BmpDisabled, Toggle, XPos, Option::[Option]) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
Bitmap = wxBitmap() (see module wxBitmap)
.br
BmpDisabled = wxBitmap() (see module wxBitmap)
.br
Toggle = boolean()
.br
XPos = integer()
.br
Option = {yPos, integer()} | {clientData, wx_object() (see module wx)} | {shortHelp, chardata() (see module unicode)} | {longHelp, chardata() (see module unicode)}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
addCheckTool(This, Toolid, Label, Bitmap) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
Label = chardata() (see module unicode)
.br
Bitmap = wxBitmap() (see module wxBitmap)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBaddCheckTool(This, Toolid, Label, Bitmap, [])\fR\&\&.
.RE
.LP
.B
addCheckTool(This, Toolid, Label, Bitmap, Option::[Option]) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
Label = chardata() (see module unicode)
.br
Bitmap = wxBitmap() (see module wxBitmap)
.br
Option = {bmpDisabled, wxBitmap() (see module wxBitmap)} | {shortHelp, chardata() (see module unicode)} | {longHelp, chardata() (see module unicode)} | {data, wx_object() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
addRadioTool(This, Toolid, Label, Bitmap) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
Label = chardata() (see module unicode)
.br
Bitmap = wxBitmap() (see module wxBitmap)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBaddRadioTool(This, Toolid, Label, Bitmap, [])\fR\&\&.
.RE
.LP
.B
addRadioTool(This, Toolid, Label, Bitmap, Option::[Option]) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
Label = chardata() (see module unicode)
.br
Bitmap = wxBitmap() (see module wxBitmap)
.br
Option = {bmpDisabled, wxBitmap() (see module wxBitmap)} | {shortHelp, chardata() (see module unicode)} | {longHelp, chardata() (see module unicode)} | {data, wx_object() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteTool(This, Toolid) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteToolByPos(This, Pos) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enableTool(This, Toolid, Enable) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
Enable = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findById(This, Toolid) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findControl(This, Toolid) -> wxControl() (see module wxControl)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findToolForPosition(This, X, Y) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getToolSize(This) -> {W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getToolBitmapSize(This) -> {W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMargins(This) -> {W::integer(), H::integer()}
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getToolEnabled(This, Toolid) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getToolLongHelp(This, Toolid) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getToolPacking(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getToolPos(This, Id) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Id = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getToolSeparation(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getToolShortHelp(This, Toolid) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getToolState(This, Toolid) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertControl(This, Pos, Control) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Pos = integer()
.br
Control = wxControl() (see module wxControl)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertSeparator(This, Pos) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertTool(This, Pos, Tool) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Pos = integer()
.br
Tool = wx_object() (see module wx)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertTool(This, Pos, Toolid, Bitmap) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Pos = integer()
.br
Toolid = integer()
.br
Bitmap = wxBitmap() (see module wxBitmap)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBinsertTool(This, Pos, Toolid, Bitmap, [])\fR\&\&.
.RE
.LP
.B
insertTool(This, Pos, Toolid, Label, Bitmap) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Pos = integer()
.br
Toolid = integer()
.br
Label = chardata() (see module unicode)
.br
Bitmap = wxBitmap() (see module wxBitmap)
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
insertTool(This, Pos, Toolid, Bitmap, [Option]) -> wx:wx_object() when
.br
This::wxToolBar(), Pos::integer(), Toolid::integer(), Bitmap::wxBitmap:wxBitmap(),
.br
Option :: {bmpDisabled, wxBitmap:wxBitmap()}
.br
| {toggle, boolean()}
.br
| {clientData, wx:wx_object()}
.br
| {shortHelp, unicode:chardata()}
.br
| {longHelp, unicode:chardata()}\&.
.br

.LP

.br
Kind = ?wxITEM_SEPARATOR | ?wxITEM_NORMAL | ?wxITEM_CHECK | ?wxITEM_RADIO | ?wxITEM_MAX
.RE
.LP
.B
insertTool(This, Pos, Toolid, Label, Bitmap, Option::[Option]) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Pos = integer()
.br
Toolid = integer()
.br
Label = chardata() (see module unicode)
.br
Bitmap = wxBitmap() (see module wxBitmap)
.br
Option = {bmpDisabled, wxBitmap() (see module wxBitmap)} | {kind, wx_enum() (see module wx)} | {shortHelp, chardata() (see module unicode)} | {longHelp, chardata() (see module unicode)} | {clientData, wx_object() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Kind = ?wxITEM_SEPARATOR | ?wxITEM_NORMAL | ?wxITEM_CHECK | ?wxITEM_RADIO | ?wxITEM_MAX
.RE
.LP
.B
realize(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
removeTool(This, Toolid) -> wx_object() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMargins(This, X, Y) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setToolBitmapSize(This, Size) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Size = {W::integer(), H::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setToolLongHelp(This, Toolid, HelpString) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
HelpString = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setToolPacking(This, Packing) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Packing = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setToolShortHelp(This, Id, HelpString) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Id = integer()
.br
HelpString = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setToolSeparation(This, Separation) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Separation = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
toggleTool(This, Toolid, Toggle) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxToolBar()
.br
Toolid = integer()
.br
Toggle = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.SH AUTHORS
.LP

.I
<>