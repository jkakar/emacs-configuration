.TH wxBitmap 3 "wx 1.2" "" "Erlang Module Definition"
.SH NAME
wxBitmap \- See external documentation: wxBitmap.
.SH DESCRIPTION
.LP
See external documentation: wxBitmap\&.
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxBitmap()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxBitmap()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Filename) -> wxBitmap()
.br
.RS
.LP
Types:

.RS 3
Filename = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
new(Image) -> wxBitmap() when
.br
Image::wxImage:wxImage()\&.
.br

.LP

.br
Type = ?wxBITMAP_TYPE_INVALID | ?wxBITMAP_TYPE_BMP | ?wxBITMAP_TYPE_BMP_RESOURCE | ?wxBITMAP_TYPE_RESOURCE | ?wxBITMAP_TYPE_ICO | ?wxBITMAP_TYPE_ICO_RESOURCE | ?wxBITMAP_TYPE_CUR | ?wxBITMAP_TYPE_CUR_RESOURCE | ?wxBITMAP_TYPE_XBM | ?wxBITMAP_TYPE_XBM_DATA | ?wxBITMAP_TYPE_XPM | ?wxBITMAP_TYPE_XPM_DATA | ?wxBITMAP_TYPE_TIF | ?wxBITMAP_TYPE_TIF_RESOURCE | ?wxBITMAP_TYPE_GIF | ?wxBITMAP_TYPE_GIF_RESOURCE | ?wxBITMAP_TYPE_PNG | ?wxBITMAP_TYPE_PNG_RESOURCE | ?wxBITMAP_TYPE_JPEG | ?wxBITMAP_TYPE_JPEG_RESOURCE | ?wxBITMAP_TYPE_PNM | ?wxBITMAP_TYPE_PNM_RESOURCE | ?wxBITMAP_TYPE_PCX | ?wxBITMAP_TYPE_PCX_RESOURCE | ?wxBITMAP_TYPE_PICT | ?wxBITMAP_TYPE_PICT_RESOURCE | ?wxBITMAP_TYPE_ICON | ?wxBITMAP_TYPE_ICON_RESOURCE | ?wxBITMAP_TYPE_ANI | ?wxBITMAP_TYPE_IFF | ?wxBITMAP_TYPE_TGA | ?wxBITMAP_TYPE_MACCURSOR | ?wxBITMAP_TYPE_MACCURSOR_RESOURCE | ?wxBITMAP_TYPE_ANY
.RE
.LP
.B
new(Width, Height) -> wxBitmap()
.br
.RS
.LP
Types:

.RS 3
Width = integer()
.br
Height = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
new(Filename, [Option]) -> wxBitmap() when
.br
Filename::unicode:chardata(),
.br
Option :: {type, wx:wx_enum()};
.br
(Image, [Option]) -> wxBitmap() when
.br
Image::wxImage:wxImage(),
.br
Option :: {depth, integer()}\&.
.br

.LP

.br
Type = ?wxBITMAP_TYPE_INVALID | ?wxBITMAP_TYPE_BMP | ?wxBITMAP_TYPE_BMP_RESOURCE | ?wxBITMAP_TYPE_RESOURCE | ?wxBITMAP_TYPE_ICO | ?wxBITMAP_TYPE_ICO_RESOURCE | ?wxBITMAP_TYPE_CUR | ?wxBITMAP_TYPE_CUR_RESOURCE | ?wxBITMAP_TYPE_XBM | ?wxBITMAP_TYPE_XBM_DATA | ?wxBITMAP_TYPE_XPM | ?wxBITMAP_TYPE_XPM_DATA | ?wxBITMAP_TYPE_TIF | ?wxBITMAP_TYPE_TIF_RESOURCE | ?wxBITMAP_TYPE_GIF | ?wxBITMAP_TYPE_GIF_RESOURCE | ?wxBITMAP_TYPE_PNG | ?wxBITMAP_TYPE_PNG_RESOURCE | ?wxBITMAP_TYPE_JPEG | ?wxBITMAP_TYPE_JPEG_RESOURCE | ?wxBITMAP_TYPE_PNM | ?wxBITMAP_TYPE_PNM_RESOURCE | ?wxBITMAP_TYPE_PCX | ?wxBITMAP_TYPE_PCX_RESOURCE | ?wxBITMAP_TYPE_PICT | ?wxBITMAP_TYPE_PICT_RESOURCE | ?wxBITMAP_TYPE_ICON | ?wxBITMAP_TYPE_ICON_RESOURCE | ?wxBITMAP_TYPE_ANI | ?wxBITMAP_TYPE_IFF | ?wxBITMAP_TYPE_TGA | ?wxBITMAP_TYPE_MACCURSOR | ?wxBITMAP_TYPE_MACCURSOR_RESOURCE | ?wxBITMAP_TYPE_ANY
.RE
.LP
.B
new(Bits, Width, Height) -> wxBitmap()
.br
.RS
.LP
Types:

.RS 3
Bits = binary()
.br
Width = integer()
.br
Height = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Also:
.br
new(Width, Height, [Option]) -> wxBitmap() when
.br
Width::integer(), Height::integer(),
.br
Option :: {depth, integer()}\&.
.br

.RE
.LP
.B
new(Bits, Width, Height, Option::[Option]) -> wxBitmap()
.br
.RS
.LP
Types:

.RS 3
Bits = binary()
.br
Width = integer()
.br
Height = integer()
.br
Option = {depth, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
convertToImage(This) -> wxImage() (see module wxImage)
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
copyFromIcon(This, Icon) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
Icon = wxIcon() (see module wxIcon)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This, Width, Height) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
Width = integer()
.br
Height = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcreate(This, Width, Height, [])\fR\&\&.
.RE
.LP
.B
create(This, Width, Height, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
Width = integer()
.br
Height = integer()
.br
Option = {depth, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDepth(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getHeight(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPalette(This) -> wxPalette() (see module wxPalette)
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMask(This) -> wxMask() (see module wxMask)
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getWidth(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSubBitmap(This, Rect) -> wxBitmap()
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
Rect = {X::integer(), Y::integer(), W::integer(), H::integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadFile(This, Name) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
Name = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBloadFile(This, Name, [])\fR\&\&.
.RE
.LP
.B
loadFile(This, Name, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
Name = chardata() (see module unicode)
.br
Option = {type, wx_enum() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Type = ?wxBITMAP_TYPE_INVALID | ?wxBITMAP_TYPE_BMP | ?wxBITMAP_TYPE_BMP_RESOURCE | ?wxBITMAP_TYPE_RESOURCE | ?wxBITMAP_TYPE_ICO | ?wxBITMAP_TYPE_ICO_RESOURCE | ?wxBITMAP_TYPE_CUR | ?wxBITMAP_TYPE_CUR_RESOURCE | ?wxBITMAP_TYPE_XBM | ?wxBITMAP_TYPE_XBM_DATA | ?wxBITMAP_TYPE_XPM | ?wxBITMAP_TYPE_XPM_DATA | ?wxBITMAP_TYPE_TIF | ?wxBITMAP_TYPE_TIF_RESOURCE | ?wxBITMAP_TYPE_GIF | ?wxBITMAP_TYPE_GIF_RESOURCE | ?wxBITMAP_TYPE_PNG | ?wxBITMAP_TYPE_PNG_RESOURCE | ?wxBITMAP_TYPE_JPEG | ?wxBITMAP_TYPE_JPEG_RESOURCE | ?wxBITMAP_TYPE_PNM | ?wxBITMAP_TYPE_PNM_RESOURCE | ?wxBITMAP_TYPE_PCX | ?wxBITMAP_TYPE_PCX_RESOURCE | ?wxBITMAP_TYPE_PICT | ?wxBITMAP_TYPE_PICT_RESOURCE | ?wxBITMAP_TYPE_ICON | ?wxBITMAP_TYPE_ICON_RESOURCE | ?wxBITMAP_TYPE_ANI | ?wxBITMAP_TYPE_IFF | ?wxBITMAP_TYPE_TGA | ?wxBITMAP_TYPE_MACCURSOR | ?wxBITMAP_TYPE_MACCURSOR_RESOURCE | ?wxBITMAP_TYPE_ANY
.RE
.LP
.B
ok(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
saveFile(This, Name, Type) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
Name = chardata() (see module unicode)
.br
Type = wx_enum() (see module wx)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBsaveFile(This, Name, Type, [])\fR\&\&.
.RE
.LP
.B
saveFile(This, Name, Type, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
Name = chardata() (see module unicode)
.br
Type = wx_enum() (see module wx)
.br
Option = {palette, wxPalette() (see module wxPalette)}
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Type = ?wxBITMAP_TYPE_INVALID | ?wxBITMAP_TYPE_BMP | ?wxBITMAP_TYPE_BMP_RESOURCE | ?wxBITMAP_TYPE_RESOURCE | ?wxBITMAP_TYPE_ICO | ?wxBITMAP_TYPE_ICO_RESOURCE | ?wxBITMAP_TYPE_CUR | ?wxBITMAP_TYPE_CUR_RESOURCE | ?wxBITMAP_TYPE_XBM | ?wxBITMAP_TYPE_XBM_DATA | ?wxBITMAP_TYPE_XPM | ?wxBITMAP_TYPE_XPM_DATA | ?wxBITMAP_TYPE_TIF | ?wxBITMAP_TYPE_TIF_RESOURCE | ?wxBITMAP_TYPE_GIF | ?wxBITMAP_TYPE_GIF_RESOURCE | ?wxBITMAP_TYPE_PNG | ?wxBITMAP_TYPE_PNG_RESOURCE | ?wxBITMAP_TYPE_JPEG | ?wxBITMAP_TYPE_JPEG_RESOURCE | ?wxBITMAP_TYPE_PNM | ?wxBITMAP_TYPE_PNM_RESOURCE | ?wxBITMAP_TYPE_PCX | ?wxBITMAP_TYPE_PCX_RESOURCE | ?wxBITMAP_TYPE_PICT | ?wxBITMAP_TYPE_PICT_RESOURCE | ?wxBITMAP_TYPE_ICON | ?wxBITMAP_TYPE_ICON_RESOURCE | ?wxBITMAP_TYPE_ANI | ?wxBITMAP_TYPE_IFF | ?wxBITMAP_TYPE_TGA | ?wxBITMAP_TYPE_MACCURSOR | ?wxBITMAP_TYPE_MACCURSOR_RESOURCE | ?wxBITMAP_TYPE_ANY
.RE
.LP
.B
setDepth(This, Depth) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
Depth = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setHeight(This, Height) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
Height = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMask(This, Mask) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
Mask = wxMask() (see module wxMask)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setPalette(This, Palette) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
Palette = wxPalette() (see module wxPalette)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWidth(This, Width) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxBitmap()
.br
Width = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxBitmap()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>