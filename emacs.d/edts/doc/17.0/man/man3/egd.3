.TH egd 3 "percept 0.8.9" "" "Erlang Module Definition"
.SH NAME
egd \- egd - erlang graphical drawer.
.SH DESCRIPTION
.LP
egd - erlang graphical drawer
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIcolor()\fR\&:

.TP 2
.B
\fIegd_image()\fR\&:

.TP 2
.B
\fIfont()\fR\&:

.TP 2
.B
\fIpoint() = {integer(), integer()}\fR\&:

.TP 2
.B
\fIrender_option() = {render_engine, opaque} | {render_engine, alpha}\fR\&:

.RE
.SH EXPORTS
.LP
.B
color(Color::Value | Name) -> color()
.br
.RS
.LP
Types:

.RS 3
Value = {byte(), byte(), byte()} | {byte(), byte(), byte(), byte()}
.br
Name = black | silver | gray | white | maroon | red | purple | fuchia | green | lime | olive | yellow | navy | blue | teal | aqua
.br
.RE
.RE
.RS
.LP
Creates a color reference\&.
.RE
.LP
.B
create(Width::integer(), Height::integer()) -> egd_image()
.br
.RS
.LP
Creates an image area and returns its reference\&.
.RE
.LP
.B
destroy(Image::egd_image()) -> ok
.br
.RS
.LP
Destroys the image\&.
.RE
.LP
.B
filledEllipse(Image::egd_image(), P1::point(), P2::point(), Color::color()) -> ok
.br
.RS
.LP
Creates a filled ellipse object\&.
.RE
.LP
.B
filledRectangle(Image::egd_image(), P1::point(), P2::point(), Color::color()) -> ok
.br
.RS
.LP
Creates a filled rectangle object\&.
.RE
.LP
.B
line(Image::egd_image(), P1::point(), P2::point(), Color::color()) -> ok
.br
.RS
.LP
Creates a line object from P1 to P2 in the image\&.
.RE
.LP
.B
rectangle(Image::egd_image(), P1::point(), P2::point(), Color::color()) -> ok
.br
.RS
.LP
Creates a rectangle object\&.
.RE
.LP
.B
render(Image::egd_image()) -> binary()
.br
.RS
.LP
Equivalent to \fBrender(Image, png, [{render_engine, opaque}])\fR\&\&.
.RE
.LP
.B
render(Image::egd_image(), Type::png | raw_bitmap) -> binary()
.br
.RS
.LP
Equivalent to \fBrender(Image, Type, [{render_engine, opaque}])\fR\&\&.
.RE
.LP
.B
render(Image::egd_image(), Type::png | raw_bitmap, Options::[render_option()]) -> binary()
.br
.RS
.LP
Renders a binary from the primitives specified by egd_image()\&. The binary can either be a raw bitmap with rgb tripplets or a binary in png format\&.
.RE
.LP
.B
save(Binary::binary(), Filename::string()) -> ok
.br
.RS
.LP
Saves the binary to file\&.
.RE
.LP
.B
text(Image::egd_image(), P::point(), Font::font(), Text::string(), Color::color()) -> ok
.br
.RS
.LP
Creates a text object\&.
.RE
.SH AUTHORS
.LP

.I
<>