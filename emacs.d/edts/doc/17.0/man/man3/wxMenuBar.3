.TH wxMenuBar 3 "wx 1.2" "" "Erlang Module Definition"
.SH NAME
wxMenuBar \- See external documentation: wxMenuBar.
.SH DESCRIPTION
.LP
See external documentation: wxMenuBar\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxMenuBar()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxMenuBar()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Style) -> wxMenuBar()
.br
.RS
.LP
Types:

.RS 3
Style = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
append(This, Menu, Title) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Menu = wxMenu() (see module wxMenu)
.br
Title = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
check(This, Itemid, Check) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Itemid = integer()
.br
Check = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enable(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBenable(This, [])\fR\&\&.
.RE
.LP
.B
enable(This, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Option = {enable, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enable(This, Itemid, Enable) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Itemid = integer()
.br
Enable = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enableTop(This, Pos, Flag) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Pos = integer()
.br
Flag = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findMenu(This, Title) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Title = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findMenuItem(This, MenuString, ItemString) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
MenuString = chardata() (see module unicode)
.br
ItemString = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findItem(This, Id) -> wxMenuItem() (see module wxMenuItem)
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Id = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getHelpString(This, Itemid) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLabel(This) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLabel(This, Itemid) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLabelTop(This, Pos) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMenu(This, Pos) -> wxMenu() (see module wxMenu)
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMenuCount(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insert(This, Pos, Menu, Title) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Pos = integer()
.br
Menu = wxMenu() (see module wxMenu)
.br
Title = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isChecked(This, Itemid) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isEnabled(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isEnabled(This, Itemid) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Itemid = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
remove(This, Pos) -> wxMenu() (see module wxMenu)
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
replace(This, Pos, Menu, Title) -> wxMenu() (see module wxMenu)
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Pos = integer()
.br
Menu = wxMenu() (see module wxMenu)
.br
Title = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setHelpString(This, Itemid, HelpString) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Itemid = integer()
.br
HelpString = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLabel(This, S) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
S = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLabel(This, Itemid, Label) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Itemid = integer()
.br
Label = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLabelTop(This, Pos, Label) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxMenuBar()
.br
Pos = integer()
.br
Label = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxMenuBar()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>