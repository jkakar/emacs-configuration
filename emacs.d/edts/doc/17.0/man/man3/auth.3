.TH auth 3 "kernel 3.0" "Ericsson AB" "Erlang Module Definition"
.SH NAME
auth \- Erlang Network Authentication Server
.SH DESCRIPTION
.LP
This module is deprecated\&. For a description of the Magic Cookie system, refer to \fBDistributed Erlang\fR\& in the Erlang Reference Manual\&.
.SH DATA TYPES
.nf

\fBcookie()\fR\& = atom()
.br
.fi
.SH EXPORTS
.LP
.nf

.B
is_auth(Node) -> yes | no
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Node = node()
.br
.RE
.RE
.RS
.LP
Returns \fIyes\fR\& if communication with \fINode\fR\& is authorized\&. Note that a connection to \fINode\fR\& will be established in this case\&. Returns \fIno\fR\& if \fINode\fR\& does not exist or communication is not authorized (it has another cookie than \fIauth\fR\& thinks it has)\&.
.LP
Use \fBnet_adm:ping(Node)\fR\& instead\&.
.RE
.LP
.nf

.B
cookie() -> Cookie
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Cookie = \fBcookie()\fR\&
.br
.RE
.RE
.RS
.LP
Use \fBerlang:get_cookie()\fR\& instead\&.
.RE
.LP
.nf

.B
cookie(TheCookie) -> true
.br
.fi
.br
.RS
.LP
Types:

.RS 3
TheCookie = Cookie | [Cookie]
.br
.RS 2
 The cookie may also be given as a list with a single atom element\&. 
.RE
Cookie = \fBcookie()\fR\&
.br
.RE
.RE
.RS
.LP
Use \fBerlang:set_cookie(node(), Cookie)\fR\& instead\&.
.RE
.LP
.B
node_cookie([Node, Cookie]) -> yes | no
.br
.RS
.LP
Types:

.RS 3
Node = node()
.br
Cookie = \fBcookie()\fR\&
.br
.RE
.RE
.RS
.LP
Equivalent to \fBnode_cookie(Node, Cookie)\fR\&\&.
.RE
.LP
.nf

.B
node_cookie(Node, Cookie) -> yes | no
.br
.fi
.br
.RS
.LP
Types:

.RS 3
Node = node()
.br
Cookie = \fBcookie()\fR\&
.br
.RE
.RE
.RS
.LP
Sets the magic cookie of \fINode\fR\& to \fICookie\fR\&, and verifies the status of the authorization\&. Equivalent to calling \fBerlang:set_cookie(Node, Cookie)\fR\&, followed by \fBauth:is_auth(Node)\fR\&\&.
.RE