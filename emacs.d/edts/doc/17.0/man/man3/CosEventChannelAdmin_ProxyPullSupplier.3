.TH CosEventChannelAdmin_ProxyPullSupplier 3 "cosEvent 2.1.15" "Ericsson AB" "Erlang Module Definition"
.SH NAME
CosEventChannelAdmin_ProxyPullSupplier \- This module implements a ProxyPullSupplier interface which acts as a middleman between pull consumer and the event channel.
.SH DESCRIPTION
.LP
The ProxyPullSupplier interface defines the second step for connecting pull consumers to the event channel\&. A proxy supplier is similar to a normal supplier, but includes an additional method for connecting a consumer to the proxy supplier\&.
.LP
To get access to all definitions, e\&.g\&., exceptions, include necessary \fIhrl\fR\& files by using:
.br
\fI-include_lib("cosEvent/include/*\&.hrl")\&.\fR\&
.LP
Any object that possesses an object reference that supports the ProxyPullSupplier interface can perform the following operations:
.SH EXPORTS
.LP
.B
connect_pull_consumer(Object, PullConsumer) -> Return
.br
.RS
.LP
Types:

.RS 3
Object = #objref
.br
PullConsumer = #objref of PullConsumer type
.br
Return = ok | {\&'EXCEPTION\&', #\&'CosEventChannelAdmin_AlreadyConnected\&'{}}
.br
.RE
.RE
.RS
.LP
This operation connects PullConsumer object to the ProxyPullSupplier object\&. A nil object reference can be passed to this operation\&. If so a channel cannot invoke the disconnect_pull_consumer operation on the consumer; the consumer may be disconnected from the channel without being informed\&. If the ProxyPullSupplier is already connected to a PullConsumer, then the \fICosEventChannelAdmin_AlreadyConnected\fR\& exception is raised\&.
.RE
.LP
.B
disconnect_pull_supplier(Object) -> Return
.br
.RS
.LP
Types:

.RS 3
Object = #objref
.br
Return = ok
.br
.RE
.RE
.RS
.LP
This operation disconnects proxy pull supplier from the event channel\&. It sends a notification about the loss of the connection to the pull consumer attached to it, unless nil object reference was passed at the connection time\&.
.RE
.LP
.B
pull(Object) -> Return
.br
.RS
.LP
Types:

.RS 3
Object = #objref
.br
Return = any
.br
.RE
.RE
.RS
.LP
This operation blocks until the event data is available or the \fICosEventComm_Disconnected\fR\& exception is raised\&. It returns the event data to the consumer\&.
.RE
.LP
.B
try_pull(Object) -> Return
.br
.RS
.LP
Types:

.RS 3
Object = #objref
.br
Return = {any, bool()}
.br
.RE
.RE
.RS
.LP
This operation does not block: if the event data is available, it returns the event data and sets the data availability flag to true; otherwise it returns a long with an undefined value and sets the data availability to false\&. If the event communication has already been disconnected, the \fICosEventComm_Disconnected\fR\& exception is raised\&.
.RE