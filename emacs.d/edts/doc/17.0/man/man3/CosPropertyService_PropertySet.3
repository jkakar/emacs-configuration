.TH CosPropertyService_PropertySet 3 "cosProperty 1.1.17" "Ericsson AB" "Erlang Module Definition"
.SH NAME
CosPropertyService_PropertySet \- This module implements the OMG CosPropertyService::PropertySet interface.
.SH DESCRIPTION
.LP
To get access to the record definitions for the structures use: 
.br
\fI-include_lib("cosProperty/include/CosPropertyService\&.hrl")\&.\fR\&
.SH EXPORTS
.LP
.B
define_property(PropertySet, Name, Value) -> Reply
.br
.RS
.LP
Types:

.RS 3
PropertySet = #objref
.br
Name = non-empty string()
.br
Value = #any
.br
Reply = ok | {\&'EXCEPTION\&', #CosPropertyService_InvalidPropertyName{}} | {\&'EXCEPTION\&', #CosPropertyService_ConflictingProperty{}} | {\&'EXCEPTION\&', #CosPropertyService_UnsupportedTypeCode{}} | {\&'EXCEPTION\&', #CosPropertyService_UnsupportedProperty{}} | {\&'EXCEPTION\&', #CosPropertyService_ReadOnlyProperty{}}
.br
.RE
.RE
.RS
.LP
This operation adds a new property to the given object\&. Depending on which initial arguments was supplied when starting the object several exceptions may be raised\&.
.RE
.LP
.B
define_properties(PropertySet, Properties) -> Reply
.br
.RS
.LP
Types:

.RS 3
PropertySet = #objref
.br
Properties = [#\&'CosPropertyService_Property\&'{property_name = Name, property_value = Value}]
.br
Name = string()
.br
Value = #any
.br
Reply = ok | {\&'EXCEPTION\&', #CosPropertyService_MultipleExceptions{exceptions = Excs}}
.br
Excs = [#\&'CosPropertyService_PropertyException{reason = Reason, failing_property_name = Name}]
.br
Reason = invalid_property_name | conflicting_property | property_not_found | unsupported_type_code | unsupported_property | unsupported_mode | fixed_property | read_only_property
.br
.RE
.RE
.RS
.LP
This operation adds several new properties to the given object\&. Depending on which initial arguments was supplied when starting the object an exceptions may be raised listing the properties failing\&.
.RE
.LP
.B
get_number_of_properties(PropertySet) -> ulong()
.br
.RS
.LP
Types:

.RS 3
PropertySet = #objref
.br
.RE
.RE
.RS
.LP
This operation returns the number of properties associated with the target object\&.
.RE
.LP
.B
get_all_property_names(PropertySet, Max) -> Reply
.br
.RS
.LP
Types:

.RS 3
PropertySet = NamesIterator = #objref
.br
Max = ulong()
.br
Reply = {ok, Names, NamesIterator}
.br
Names = [string()]
.br
.RE
.RE
.RS
.LP
This operation returns up to \fIMax\fR\& property names\&. If the target object have additional associated properties they will be put in the returned Iterator, otherwise the Iterator will be a \fINIL\fR\& object\&.
.RE
.LP
.B
get_property_value(PropertySet, Name) -> Reply
.br
.RS
.LP
Types:

.RS 3
PropertySet = #objref
.br
Name = string()
.br
Reply = #any | {\&'EXCEPTION\&', #CosPropertyService_PropertyNotFound{}} | {\&'EXCEPTION\&', #CosPropertyService_InvalidPropertyName{}}
.br
.RE
.RE
.RS
.LP
This operation returns the property value associated with given name\&. If no such property exists or the given name is an empty string an exception will be raised\&.
.RE
.LP
.B
get_properties(PropertySet, Names) -> Reply
.br
.RS
.LP
Types:

.RS 3
PropertySet = #objref
.br
Names = [string()]
.br
Reply = {boolean(), Properties}
.br
Properties = [#\&'CosPropertyService_Property\&'{property_name = Name, property_value = Value}]
.br
.RE
.RE
.RS
.LP
This operation returns all properties associated with given names\&. If the boolean flag is true all properties where retrieved correctly, otherwise, all properties with the type \fItk_void\fR\& was not found\&.
.RE
.LP
.B
get_all_properties(PropertySet, Max) -> Reply
.br
.RS
.LP
Types:

.RS 3
PropertySet = PropertiesIterator = #objref
.br
Reply = {ok, Properties, PropertiesIterator}
.br
Properties = [#\&'CosPropertyService_Property\&'{property_name = Name, property_value = Value}]
.br
.RE
.RE
.RS
.LP
This operation return a list \fIMax\fR\& properties or less\&. If more properties are associated with the target object they will be put in the \fIPropertiesIterator\fR\&\&. If the object had less than \fIMax\fR\& associated properties the Iterator will be a \fINIL\fR\& object\&.
.RE
.LP
.B
delete_property(PropertySet, Name) -> Reply
.br
.RS
.LP
Types:

.RS 3
PropertySet = #objref
.br
Name = string()
.br
Reply = ok | {\&'EXCEPTION\&', #CosPropertyService_FixedProperty{}} | {\&'EXCEPTION\&', #CosPropertyService_PropertyNotFound{}} | {\&'EXCEPTION\&', #CosPropertyService_InvalidPropertyName{}}
.br
.RE
.RE
.RS
.LP
This operation tries to delete the property with given Name\&. An exception which indicates why it failed is raised if so needed\&.
.RE
.LP
.B
delete_properties(PropertySet, Names) -> Reply
.br
.RS
.LP
Types:

.RS 3
PropertySet = #objref
.br
Names = [string()]
.br
Reply = ok | {\&'EXCEPTION\&', #CosPropertyService_MultipleExceptions{exceptions = Excs}}
.br
Excs = [#\&'CosPropertyService_PropertyException{reason = Reason, failing_property_name = Name}]
.br
Reason = invalid_property_name | conflicting_property | property_not_found | unsupported_type_code | unsupported_property | unsupported_mode | fixed_property | read_only_property
.br
.RE
.RE
.RS
.LP
This operation tries to delete all given Properties\&. If one or more removal fails an exception is raised which describe why\&.
.RE
.LP
.B
delete_all_properties(PropertySet) -> boolean()
.br
.RS
.LP
Types:

.RS 3
PropertySet = #objref
.br
.RE
.RE
.RS
.LP
This operation deletes all properties\&. The boolean flag, if set to false, indicates that it was not possible to remove one or more properties, e\&.g\&., may be read only\&.
.RE
.LP
.B
is_property_defined(PropertySet, Name) -> Reply
.br
.RS
.LP
Types:

.RS 3
PropertySet = #objref
.br
Name = non-empty string()
.br
Reply = boolean() | {\&'EXCEPTION\&', #CosPropertyService_InvalidPropertyName{}}
.br
.RE
.RE
.RS
.LP
This operation returns true if the target have an associated property with given name\&.
.RE