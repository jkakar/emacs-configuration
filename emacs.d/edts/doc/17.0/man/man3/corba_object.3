.TH corba_object 3 "orber 3.6.27" "Ericsson AB" "Erlang Module Definition"
.SH NAME
corba_object \- The CORBA Object interface functions
.SH DESCRIPTION
.LP
This module contains the CORBA Object interface functions that can be called for all objects\&.
.SH EXPORTS
.LP
.B
get_interface(Object) -> InterfaceDef
.br
.RS
.LP
Types:

.RS 3
Object = #objref
.br
InterfaceDef = term()
.br
.RE
.RE
.RS
.LP
This function returns the full interface description for an object\&.
.RE
.LP
.B
is_nil(Object) -> boolean()
.br
.RS
.LP
Types:

.RS 3
Object = #objref
.br
.RE
.RE
.RS
.LP
This function checks if the object reference has a nil object value, which denotes no object\&. It is the reference that is tested and no object implementation is involved in the test\&.
.RE
.LP
.B
is_a(Object, Logical_type_id) -> Return
.br
.B
is_a(Object, Logical_type_id, Contexts) -> Return
.br
.RS
.LP
Types:

.RS 3
Object = #objref
.br
Logical_type_id = string()
.br
Contexts = [Context]
.br
Context = #\&'IOP_ServiceContext\&'{context_id = CtxId, context_data = CtxData}
.br
CtxId = ?ORBER_GENERIC_CTX_ID
.br
CtxData = {interface, Interface} | {userspecific, term()} | {configuration, Options}
.br
Interface = string()
.br
Options = [{Key, Value}]
.br
Key = ssl_client_options
.br
Value = allowed value associated with the given key
.br
Return = boolean() | {\&'EXCEPTION\&', E}
.br
.RE
.RE
.RS
.LP
The \fILogical_type_id\fR\& is a string that is a share type identifier (repository id)\&. The function returns true if the object is an instance of that type or an ancestor of the "most derived" type of that object\&.
.LP
The \fIconfiguration\fR\& context is used to override the global SSL client side \fBconfiguration\fR\&\&.
.LP
Note: Other ORB suppliers may not support this function completely according to the OMG specification\&. Thus, a \fIis_a\fR\& call may raise an exception or respond unpredictable if the Object is located on a remote node\&.
.RE
.LP
.B
is_remote(Object) -> boolean()
.br
.RS
.LP
Types:

.RS 3
Object = #objref
.br
.RE
.RE
.RS
.LP
This function returns true if an object reference is remote otherwise false\&.
.RE
.LP
.B
non_existent(Object) -> Return
.br
.B
non_existent(Object, Contexts) -> Return
.br
.RS
.LP
Types:

.RS 3
Object = #objref
.br
Contexts = [Context]
.br
Context = #\&'IOP_ServiceContext\&'{context_id = CtxId, context_data = CtxData}
.br
CtxId = ?ORBER_GENERIC_CTX_ID
.br
CtxData = {interface, Interface} | {userspecific, term()} | {configuration, Options}
.br
Interface = string()
.br
Options = [{Key, Value}]
.br
Key = ssl_client_options
.br
Value = allowed value associated with the given key
.br
Return = boolean() | {\&'EXCEPTION\&', E}
.br
.RE
.RE
.RS
.LP
This function can be used to test if the object has been destroyed\&. It does this without invoking any application level code\&. The ORB returns true if it knows that the object is destroyed otherwise false\&.
.LP
The \fIconfiguration\fR\& context is used to override the global SSL client side \fBconfiguration\fR\&\&.
.LP
Note: The OMG have specified two different operators, \fI_not_existent\fR\& (CORBA version 2\&.0 and 2\&.2) and \fI_non_existent\fR\& (CORBA version 2\&.3), to be used for this function\&. It is not mandatory to support both versions\&. Thus, a \fInon_existent\fR\& call may raise an exception or respond unpredictable if the Object is located on a remote node\&. Depending on which version, ORB:s you intend to communicate with supports, you can either use this function or \fInot_existent/1\fR\&\&.
.RE
.LP
.B
not_existent(Object) -> Return
.br
.B
not_existent(Object, Contexts) -> Return
.br
.RS
.LP
Types:

.RS 3
Object = #objref
.br
Contexts = [Context]
.br
Context = #\&'IOP_ServiceContext\&'{context_id = CtxId, context_data = CtxData}
.br
CtxId = ?ORBER_GENERIC_CTX_ID
.br
CtxData = {interface, Interface} | {userspecific, term()} | {configuration, Options}
.br
Interface = string()
.br
Options = [{Key, Value}]
.br
Key = ssl_client_options
.br
Value = allowed value associated with the given key
.br
Return = boolean() | {\&'EXCEPTION\&', E}
.br
.RE
.RE
.RS
.LP
This function is implemented due to Interoperable purposes\&. Behaves as \fInon_existent\fR\& except the operator \fI_not_existent\fR\& is used when communicating with other ORB:s\&.
.LP
The \fIconfiguration\fR\& context is used to override the global SSL client side \fBconfiguration\fR\&\&.
.RE
.LP
.B
is_equivalent(Object, OtherObject) -> boolean()
.br
.RS
.LP
Types:

.RS 3
Object = #objref
.br
OtherObject = #objref
.br
.RE
.RE
.RS
.LP
This function is used to determine if two object references are equivalent so far the ORB easily can determine\&. It returns \fItrue\fR\& if the target object reference is equal to the other object reference and \fIfalse\fR\& otherwise\&.
.RE
.LP
.B
hash(Object, Maximum) -> int()
.br
.RS
.LP
Types:

.RS 3
Object = #objref
.br
Maximum = int()
.br
.RE
.RE
.RS
.LP
This function returns a hash value based on the object reference that not will change during the lifetime of the object\&. The \fIMaximum\fR\& parameter denotes the upper bound of the value\&.
.RE