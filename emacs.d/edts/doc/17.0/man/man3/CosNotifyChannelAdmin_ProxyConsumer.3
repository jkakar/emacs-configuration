.TH CosNotifyChannelAdmin_ProxyConsumer 3 "cosNotification 1.1.21" "Ericsson AB" "Erlang Module Definition"
.SH NAME
CosNotifyChannelAdmin_ProxyConsumer \- This module implements the OMG  CosNotifyChannelAdmin::ProxyConsumer interface.
.SH DESCRIPTION
.LP
To get access to the record definitions for the structures use: 
.br
\fI-include_lib("cosNotification/include/*\&.hrl")\&.\fR\&
.LP
This module also exports the functions described in:
.RS 2
.TP 2
*
\fBCosNotification_QoSAdmin\fR\&
.LP
.TP 2
*
\fBCosNotifyFilter_FilterAdmin\fR\&
.LP
.RE

.SH EXPORTS
.LP
.B
_get_MyType(ProxyConsumer) -> ProxyType
.br
.RS
.LP
Types:

.RS 3
ProxyConsumer = #objref
.br
ProxyType = \&'PUSH_ANY\&' | \&'PULL_ANY\&' | \&'PUSH_STRUCTURED\&' | \&'PULL_STRUCTURED\&' | \&'PUSH_SEQUENCE\&' | \&'PULL_SEQUENCE\&'
.br
.RE
.RE
.RS
.LP
This readonly attribute maintains the enumerant describing the which type the target object is\&.
.RE
.LP
.B
_get_MyAdmin(ProxyConsumer) -> AdminObject
.br
.RS
.LP
Types:

.RS 3
ProxyConsumer = AdminObject = #objref
.br
.RE
.RE
.RS
.LP
This readonly attribute maintains the admin\&'s reference which created the target object\&.
.RE
.LP
.B
obtain_subscription_types(ProxyConsumer, ObtainInfoMode) -> EventTypeSeq
.br
.RS
.LP
Types:

.RS 3
ProxyConsumer = #objref
.br
ObtainInfoMode = \&'ALL_NOW_UPDATES_OFF\&' | \&'ALL_NOW_UPDATES_ON\&' | \&'NONE_NOW_UPDATES_OFF\&' | \&'NONE_NOW_UPDATES_ON\&'
.br
EventTypeSeq = [EventType]
.br
EventType = #\&'CosNotification_EventType\&'{domain_name, type_name}
.br
domain_name = type_name = string()
.br
.RE
.RE
.RS
.LP
Depending on the input parameter \fIObtainInfoMode\fR\&, this operation may return a sequence of the \fIEventTypes\fR\& the target object is interested in receiving\&. If \fI\&'ALL_NOW_UPDATES_OFF\&'\fR\& or \fI\&'ALL_NOW_UPDATES_ON\&'\fR\& is given a sequence will be returned, otherwise not\&. If \fI\&'ALL_NOW_UPDATES_OFF\&'\fR\& or \fI\&'NONE_NOW_UPDATES_OFF\&'\fR\& are issued the target object will not inform the associated \fINotifySubscribe\fR\& object when an update occurs\&. \fI\&'ALL_NOW_UPDATES_ON\&'\fR\& or \fI\&'NONE_NOW_UPDATES_ON\&'\fR\& will result in that update information will be sent\&.
.RE
.LP
.B
validate_event_qos(ProxyConsumer, QoSProperties) -> Reply
.br
.RS
.LP
Types:

.RS 3
ProxyConsumer = #objref
.br
QoSProperties = [QoSProperty]
.br
QoSProperty = #\&'CosNotification_Property\&'{name, value}
.br
name = string()
.br
value = #any
.br
Reply = {ok, NamedPropertyRangeSeq} | {\&'EXCEPTION\&', CosNotification_UnsupportedQoS{qos_err}}
.br
NamedPropertyRangeSeq = [NamedPropertyRange]
.br
NamedPropertyRange = #CosNotification_NamedPropertyRange{name, range}
.br
name = string()
.br
range = #CosNotification_PropertyRange{low_val, high_val}
.br
low_val = #any
.br
high_val = #any
.br
qos_err = PropertyErrorSeq
.br
PropertyErrorSeq = [PropertyError]
.br
PropertyError = #\&'CosNotification_PropertyError\&'{code, name, available_range}
.br
code = \&'UNSUPPORTED_PROPERTY\&' | \&'UNAVAILABLE_PROPERTY\&' | \&'UNSUPPORTED_VALUE\&' | \&'UNAVAILABLE_VALUE\&' | \&'BAD_PROPERTY\&' | \&'BAD_TYPE\&' | \&'BAD_VALUE\&'
.br
name = string()
.br
available_range = PropertyRange
.br
PropertyRange = #CosNotification_PropertyRange{low_val, high_val}
.br
low_val = high_val = #any
.br
.RE
.RE
.RS
.LP
To check if certain Quality of Service properties can be added to events in the current context of the target object this operation should be used\&. If we cannot support the required settings an exception describing why will be raised\&.
.RE