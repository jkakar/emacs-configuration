.TH cosEventApp 3 "cosEvent 2.1.15" "Ericsson AB" "Erlang Module Definition"
.SH NAME
cosEventApp \- The main module of the cosEvent application.
.SH DESCRIPTION
.LP
To get access to the record definitions for the structures use:
.br
\fI-include_lib("cosEvent/include/*\&.hrl")\&.\fR\&
.LP
This module contains the functions for starting and stopping the application\&.
.SH EXPORTS
.LP
.B
install() -> Return
.br
.RS
.LP
Types:

.RS 3
Return = ok | {\&'EXCEPTION\&', E} | {\&'EXIT\&', R}
.br
.RE
.RE
.RS
.LP
This operation installs the cosEvent application\&.
.RE
.LP
.B
uninstall() -> Return
.br
.RS
.LP
Types:

.RS 3
Return = ok | {\&'EXCEPTION\&', E} | {\&'EXIT\&', R}
.br
.RE
.RE
.RS
.LP
This operation uninstalls the cosEvent application\&.
.RE
.LP
.B
start() -> Return
.br
.RS
.LP
Types:

.RS 3
Return = ok | {error, Reason}
.br
.RE
.RE
.RS
.LP
This operation starts the cosEvent application\&.
.RE
.LP
.B
stop() -> Return
.br
.RS
.LP
Types:

.RS 3
Return = ok | {error, Reason}
.br
.RE
.RE
.RS
.LP
This operation stops the cosEvent application\&.
.RE
.LP
.B
start_channel() -> Channel
.br
.RS
.LP
Types:

.RS 3
Channel = #objref
.br
.RE
.RE
.RS
.LP
This operation creates a new instance of a \fBEvent Channel\fR\& using the default settings\&.
.RE
.LP
.B
start_channel(Options) -> Channel
.br
.RS
.LP
Types:

.RS 3
Options = [Option]
.br
Option = {pull_interval, Seconds} | {typecheck, Boolean} | {maxEvents, Integer} | {blocking, Boolean}
.br
Channel = #objref
.br
.RE
.RE
.RS
.LP
This operation creates a new instance of a \fBEvent Channel\fR\&
.LP

.RS 2
.TP 2
*
\fI{pull_interval, Seconds}\fR\& - determine how often Proxy Pull Consumers will check for new events with the client application\&. The default value is 20 seconds\&.
.LP
.TP 2
*
\fI{typecheck, Boolean}\fR\& - if this option is set to true the proxies will check if the supplied client object is of correct type\&. The default value is false\&.
.LP
.TP 2
*
\fI{maxEvents, Integer}\fR\& - this option determine how many events the \fIProxyPullSuppliers\fR\& will store before discarding events\&. If the limit is reached events will be discarded in any order\&. The default value is 300\&.
.LP
.TP 2
*
\fI{blocking, Boolean}\fR\& - this option determine the behavior of the channel when handling events internally\&. If set to \fItrue\fR\& the risk of a single event supplier floods the system is reduced, but the performance may also be reduced\&. The default value is \fItrue\fR\&\&.
.LP
.RE

.RE
.LP
.B
start_channel_link() -> Channel
.br
.RS
.LP
Types:

.RS 3
Channel = #objref
.br
.RE
.RE
.RS
.LP
This operation creates a new instance of a \fBEvent Channel\fR\&, which is linked to the invoking process, using the default settings\&.
.RE
.LP
.B
start_channel_link(Options) -> Channel
.br
.RS
.LP
Types:

.RS 3
Options = [Option]
.br
Option = {pull_interval, Seconds} | {typecheck, Boolean} | {maxEvents, Integer} | {blocking, Boolean}
.br
Channel = #objref
.br
.RE
.RE
.RS
.LP
This operation creates a new instance of a \fBEvent Channel\fR\&, which is linked to the invoking process, with settings defined by the given options\&. Allowed options are the same as for \fIcosEventApp:start_channel/1\fR\&\&.
.RE
.LP
.B
stop_channel(Channel) -> Reply
.br
.RS
.LP
Types:

.RS 3
Channel = #objref
.br
Reply = ok | {\&'EXCEPTION\&', E}
.br
.RE
.RE
.RS
.LP
This operation stop the target event channel\&.
.RE