.TH CosEventDomainAdmin_EventDomainFactory 3 "cosEventDomain 1.1.14" "Ericsson AB" "Erlang Module Definition"
.SH NAME
CosEventDomainAdmin_EventDomainFactory \- This module implements an Event Domain Factory interface, which  is used to create new Event Domain instances.
.SH DESCRIPTION
.LP
To get access to all definitions include necessary \fIhrl\fR\& files by using:
.br
\fI-include_lib("cosEventDomain/include/*\&.hrl")\&.\fR\&
.SH EXPORTS
.LP
.B
create_event_domain(Factory, QoS, Admin) -> Reply
.br
.RS
.LP
Types:

.RS 3
Factory = #objref
.br
QoS = CosNotification::QoSProperties
.br
Admin = CosNotification::AdminProperties
.br
Reply = {EventDomain, DomainID} | {\&'EXCEPTION\&', #\&'CosNotification_UnsupportedQoS\&'{}} | {\&'EXCEPTION\&', #\&'CosNotification_UnsupportedAdmin\&'{}}
.br
EventDomain = #objref
.br
.RE
.RE
.RS
.LP
To create a new EventDomain this operation is used\&. If it is not possible to support the given \fIQoSProperties\fR\& or \fIAdminProperties\fR\& an exception is raised, which list the properties not supported\&. For more information see the \fIcosNotification\fR\& user\&'s guide\&.
.RE
.LP
.B
get_all_domains(Factory) -> DomainIDSeq
.br
.RS
.LP
Types:

.RS 3
Factory = #objref
.br
DomainIDSeq = [long()]
.br
.RE
.RE
.RS
.LP
This function returns a DomainID sequence of all domains associated with the target object\&.
.RE
.LP
.B
get_event_domain(Factory, DomainID) -> Reply
.br
.RS
.LP
Types:

.RS 3
Factory = #objref
.br
DomainID = long()
.br
Reply = EventDomain | {\&'EXCEPTION\&', #\&'CosEventDomainAdmin_DomainNotFound\&'{}}
.br
EventDomain = #objref
.br
.RE
.RE
.RS
.LP
This operation returns the EventDomain object associated with the given DomainID\&. If no such binding exists an exception is raised\&.
.RE