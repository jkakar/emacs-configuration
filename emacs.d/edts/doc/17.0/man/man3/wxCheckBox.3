.TH wxCheckBox 3 "wx 1.2" "" "Erlang Module Definition"
.SH NAME
wxCheckBox \- See external documentation: wxCheckBox.
.SH DESCRIPTION
.LP
See external documentation: wxCheckBox\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxControl\fR\& 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxCheckBox()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxCheckBox()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent, Id, Label) -> wxCheckBox()
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow() (see module wxWindow)
.br
Id = integer()
.br
Label = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBnew(Parent, Id, Label, [])\fR\&\&.
.RE
.LP
.B
new(Parent, Id, Label, Option::[Option]) -> wxCheckBox()
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow() (see module wxWindow)
.br
Id = integer()
.br
Label = chardata() (see module unicode)
.br
Option = {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()} | {validator, wx_object() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This, Parent, Id, Label) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
Parent = wxWindow() (see module wxWindow)
.br
Id = integer()
.br
Label = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcreate(This, Parent, Id, Label, [])\fR\&\&.
.RE
.LP
.B
create(This, Parent, Id, Label, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
Parent = wxWindow() (see module wxWindow)
.br
Id = integer()
.br
Label = chardata() (see module unicode)
.br
Option = {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()} | {validator, wx_object() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getValue(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
get3StateValue(This) -> wx_enum() (see module wx)
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
Res = ?wxCHK_UNCHECKED | ?wxCHK_CHECKED | ?wxCHK_UNDETERMINED
.RE
.LP
.B
is3rdStateAllowedForUser(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
is3State(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isChecked(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setValue(This, State) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
State = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
set3StateValue(This, State) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxCheckBox()
.br
State = wx_enum() (see module wx)
.br
.RE
.RE
.RS
.LP
See external documentation\&. 
.br
State = ?wxCHK_UNCHECKED | ?wxCHK_CHECKED | ?wxCHK_UNDETERMINED
.RE
.LP
.B
destroy(This::wxCheckBox()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>