.TH CosNotifyChannelAdmin_ConsumerAdmin 3 "cosNotification 1.1.21" "Ericsson AB" "Erlang Module Definition"
.SH NAME
CosNotifyChannelAdmin_ConsumerAdmin \- This module implements the OMG  CosNotifyChannelAdmin::ConsumerAdmin interface.
.SH DESCRIPTION
.LP
To get access to the record definitions for the structures use: 
.br
\fI-include_lib("cosNotification/include/*\&.hrl")\&.\fR\&
.LP
This module also exports the functions described in:
.RS 2
.TP 2
*
\fBCosNotification_QoSAdmin\fR\&
.LP
.TP 2
*
\fBCosNotifyComm_NotifySubscribe\fR\&
.LP
.TP 2
*
\fBCosNotifyFilter_FilterAdmin\fR\&
.LP
.RE

.SH EXPORTS
.LP
.B
_get_MyID(ConsumerAdmin) -> AdminID
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = #objref
.br
AdminID = long()
.br
.RE
.RE
.RS
.LP
The ID returned by the creating channel is equal to the value encapsulated by this readonly attribute\&.
.RE
.LP
.B
_get_MyChannel(ConsumerAdmin) -> Channel
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = #objref
.br
Channel = #objref
.br
.RE
.RE
.RS
.LP
The creating channel\&'s reference is maintained by this readonly attribute\&.
.RE
.LP
.B
_get_MyOperator(ConsumerAdmin) -> OpType
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = #objref
.br
OpType = \&'AND_OP\&' | \&'OR_OP\&'
.br
.RE
.RE
.RS
.LP
When \fIConsumerAdmin\&'s\fR\& are created an operation type, i\&.e\&., \fI\&'AND_OP\&'\fR\& or \fI\&'OR_OP\&'\fR\&, is supplied, which determines the semantics used by the target object concerning evaluation against any associated \fIFilter\fR\& objects\&.
.RE
.LP
.B
_get_priority_filter(ConsumerAdmin) -> MappingFilter
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = MappingFilter = #objref
.br
.RE
.RE
.RS
.LP
If set, this operation returns the associated priority \fIMappingFilter\fR\&, otherwise a \fINIL\fR\& object reference is returned\&.
.RE
.LP
.B
_set_priority_filter(ConsumerAdmin, MappingFilter) -> ok
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = MappingFilter = #objref
.br
.RE
.RE
.RS
.LP
To associate a priority \fIMappingFilter\fR\& with the target object this operation must be used\&.
.RE
.LP
.B
_get_lifetime_filter(ConsumerAdmin) -> MappingFilter
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = MappingFilter = #objref
.br
.RE
.RE
.RS
.LP
Unless a lifetime \fIMappingFilter\fR\& have been associated with the target object a \fINIL\fR\& object reference is returned by this operation\&.
.RE
.LP
.B
_set_lifetime_filter(ConsumerAdmin, MappingFilter) -> ok
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = MappingFilter = #objref
.br
.RE
.RE
.RS
.LP
This operation associate a lifetime \fIMappingFilter\fR\& with the target object\&.
.RE
.LP
.B
_get_pull_suppliers(ConsumerAdmin) -> ProxyIDSeq
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = #objref
.br
ProxyIDSeq = [ProxyID]
.br
ProxyID = long()
.br
.RE
.RE
.RS
.LP
This readonly attribute maintains the Id\&'s for all \fIPullProxies\fR\& created by the target object and still alive\&.
.RE
.LP
.B
_get_push_suppliers(ConsumerAdmin) -> ProxyIDSeq
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = #objref
.br
ProxyIDSeq = [ProxyID]
.br
ProxyID = long()
.br
.RE
.RE
.RS
.LP
This attribute is similar to the \fI_get_pull_suppliers\fR\& attribute but maintains the Id\&'s for all \fIPushProxies\fR\& created by the target object and still alive\&.
.RE
.LP
.B
get_proxy_supplier(ConsumerAdmin, ProxyID) -> Reply
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = #objref
.br
ProxyID = long()
.br
Reply = Proxy | {\&'EXCEPTION\&', #\&'CosNotifyChannelAdmin_ProxyNotFound\&'{}}
.br
Proxy = #objref
.br
.RE
.RE
.RS
.LP
If a proxy with the given Id exists the reference to the object is returned, but if the object have terminated, or an incorrect Id is supplied, an exception is raised\&.
.RE
.LP
.B
obtain_notification_pull_supplier(ConsumerAdmin, ConsumerType) -> Reply
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = #objref
.br
ConsumerType = \&'ANY_EVENT\&' | \&'STRUCTURED_EVENT\&' | \&'SEQUENCE_EVENT\&'
.br
Reply = {Proxy, ProxyID}
.br
Proxy = #objref
.br
ProxyID = long()
.br
.RE
.RE
.RS
.LP
Determined by the parameter \fIConsumerType\fR\&, a proxy which will accept events of the defined type is created\&. Along with the object reference an Id is returned\&.
.RE
.LP
.B
obtain_pull_supplier(ConsumerAdmin) -> Proxy
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = #objref
.br
Proxy = #objref
.br
.RE
.RE
.RS
.LP
This operation creates a new proxy which accepts \fI#any{}\fR\& events\&.
.RE
.LP
.B
obtain_notification_push_supplier(ConsumerAdmin, ConsumerType) -> Reply
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = #objref
.br
ConsumerType = \&'ANY_EVENT\&' | \&'STRUCTURED_EVENT\&' | \&'SEQUENCE_EVENT\&'
.br
Reply = {Proxy, ProxyID}
.br
Proxy = #objref
.br
ProxyID = long()
.br
.RE
.RE
.RS
.LP
A proxy which accepts events of the type described by the parameter \fIConsumerType\fR\& is created by this operation\&. A unique Id is returned as an out parameter\&.
.RE
.LP
.B
obtain_push_supplier(ConsumerAdmin) -> Proxy
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = #objref
.br
Proxy = #objref
.br
.RE
.RE
.RS
.LP
The object created by this function is a proxy which accepts \fI#any{}\fR\& events\&.
.RE
.LP
.B
destroy(ConsumerAdmin) -> ok
.br
.RS
.LP
Types:

.RS 3
ConsumerAdmin = #objref
.br
.RE
.RE
.RS
.LP
To terminate the target object this operation should be used\&. The associated \fIChannel\fR\& will be notified\&.
.RE