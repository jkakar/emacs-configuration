.TH cosTime 3 "cosTime 1.1.14" "Ericsson AB" "Erlang Module Definition"
.SH NAME
cosTime \- The main module of the cosTime application
.SH DESCRIPTION
.LP
To get access to the record definitions for the structures use: 
.br
\fI-include_lib("cosTime/include/*\&.hrl")\&.\fR\&
.LP
This module contains the functions for starting and stopping the application\&.
.LP
This application use the time base \fI15 october 1582 00:00\fR\&\&. Performing operations using other time bases will not yield correct result\&.
.LP
The OMG CosTime specification defines the operation \fIsecure_universal_time\fR\&\&. As of today we cannot provide this functionality considering the criteria demanded to fulfill the OMG specification\&.
.LP
When using this application, time and inaccuracy supplied by the user must be given in number of \fI100 nano seconds\fR\&\&. The \fITime Displacement Factor\fR\& is positive east of the meridian, while those to the west are negative\&.
.LP
This application use \fIcalender:now_to_universal_time(Now)\fR\& to create a UTC\&. Hence, the underlying OS must deliver a correct result when calling \fIerlang:now()\fR\&\&.
.LP
When determining the inaccuracy of the system, the user should consider the way the time objects will be used\&. Communicating with other ORB\&'s, add a substantial overhead and should be taken into consideration\&.
.SH EXPORTS
.LP
.B
install_time() -> Return
.br
.RS
.LP
Types:

.RS 3
Return = ok | {\&'EXIT\&', Reason}
.br
.RE
.RE
.RS
.LP
This operation installs the cosTime Time Service part application\&.
.RE
.LP
.B
uninstall_time() -> Return
.br
.RS
.LP
Types:

.RS 3
Return = ok | {\&'EXIT\&', Reason}
.br
.RE
.RE
.RS
.LP
This operation uninstalls the cosTime Time Service part application\&.
.RE
.LP
.B
install_timerevent() -> Return
.br
.RS
.LP
Types:

.RS 3
Return = ok | {\&'EXIT\&', Reason}
.br
.RE
.RE
.RS
.LP
This operation installs the cosTime Timer Event Service part application\&.
.LP

.RS -4
.B
Note:
.RE
The Timer Event Service part requires \fITime Service\fR\& part and \fIcosEvent\fR\& or the \fIcosNotification\fR\& application to be installed first\&.

.RE
.LP
.B
uninstall_timerevent() -> Return
.br
.RS
.LP
Types:

.RS 3
Return = ok | {\&'EXIT\&', Reason}
.br
.RE
.RE
.RS
.LP
This operation uninstalls the cosTime Timer Event Service part application\&.
.RE
.LP
.B
start() -> Return
.br
.RS
.LP
Types:

.RS 3
Return = ok | {error, Reason}
.br
.RE
.RE
.RS
.LP
This operation starts the cosTime application\&.
.RE
.LP
.B
stop() -> Return
.br
.RS
.LP
Types:

.RS 3
Return = ok | {error, Reason}
.br
.RE
.RE
.RS
.LP
This operation stops the cosTime application\&.
.RE
.LP
.B
start_time_service(Tdf, Inaccuracy) -> Return
.br
.RS
.LP
Types:

.RS 3
Tdf = short()
.br
Inaccuracy = ulonglong(), eq\&. #100 nano seconds
.br
Return = ok | {\&'EXCEPTION\&', #\&'BAD_PARAM\&'{}}
.br
.RE
.RE
.RS
.LP
This operation starts a Time Service server\&. Please note that there may only be exactly one Time Service active at a time\&. The \fIInaccuracy\fR\& parameter defines the inaccuracy the underlying OS will introduce\&. Remember to take into account latency when passing time object between nodes\&.
.RE
.LP
.B
stop_time_service(TimeService) -> ok
.br
.RS
.LP
Types:

.RS 3
TimeService = #objref
.br
.RE
.RE
.RS
.LP
This operation stops the Time Service object\&.
.RE
.LP
.B
start_timerevent_service(TimeService) -> ok
.br
.RS
.LP
Types:

.RS 3
TimeService = #objref
.br
.RE
.RE
.RS
.LP
This operation starts a Timer Event Service server\&. Please note that there may only be exactly one Timer Event Service per node active at a time\&. The supplied TimeServcie reference will be the object Timer Event Service contacts to get access to a new UTC\&.
.RE
.LP
.B
stop_timerevent_service(TimerEventService) -> ok
.br
.RS
.LP
Types:

.RS 3
TimerEventService = #objref
.br
.RE
.RE
.RS
.LP
This operation stops the Timer Event Service object\&.
.RE