.TH wxTextCtrl 3 "wx 1.2" "" "Erlang Module Definition"
.SH NAME
wxTextCtrl \- See external documentation: wxTextCtrl.
.SH DESCRIPTION
.LP
See external documentation: wxTextCtrl\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxControl\fR\& 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxTextCtrl()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxTextCtrl()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent, Id) -> wxTextCtrl()
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow() (see module wxWindow)
.br
Id = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBnew(Parent, Id, [])\fR\&\&.
.RE
.LP
.B
new(Parent, Id, Option::[Option]) -> wxTextCtrl()
.br
.RS
.LP
Types:

.RS 3
Parent = wxWindow() (see module wxWindow)
.br
Id = integer()
.br
Option = {value, chardata() (see module unicode)} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()} | {validator, wx_object() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
appendText(This, Text) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Text = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canCopy(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canCut(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canPaste(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canRedo(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canUndo(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clear(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
copy(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This, Parent, Id) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Parent = wxWindow() (see module wxWindow)
.br
Id = integer()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBcreate(This, Parent, Id, [])\fR\&\&.
.RE
.LP
.B
create(This, Parent, Id, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Parent = wxWindow() (see module wxWindow)
.br
Id = integer()
.br
Option = {value, chardata() (see module unicode)} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()} | {validator, wx_object() (see module wx)}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
cut(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
discardEdits(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
emulateKeyPress(This, Event) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Event = wxKeyEvent() (see module wxKeyEvent)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultStyle(This) -> wxTextAttr() (see module wxTextAttr)
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getInsertionPoint(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLastPosition(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLineLength(This, LineNo) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
LineNo = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLineText(This, LineNo) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
LineNo = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getNumberOfLines(This) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getRange(This, From, To) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
From = integer()
.br
To = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelection(This) -> {From::integer(), To::integer()}
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStringSelection(This) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStyle(This, Position, Style) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Position = integer()
.br
Style = wxTextAttr() (see module wxTextAttr)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getValue(This) -> charlist() (see module unicode)
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isEditable(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isModified(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isMultiLine(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isSingleLine(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadFile(This, File) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
File = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
Equivalent to \fBloadFile(This, File, [])\fR\&\&.
.RE
.LP
.B
loadFile(This, File, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
File = chardata() (see module unicode)
.br
Option = {fileType, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markDirty(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
paste(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
positionToXY(This, Pos) -> Result
.br
.RS
.LP
Types:

.RS 3
Result = {Res::boolean(), X::integer(), Y::integer()}
.br
This = wxTextCtrl()
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
redo(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
remove(This, From, To) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
From = integer()
.br
To = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
replace(This, From, To, Value) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
From = integer()
.br
To = integer()
.br
Value = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
saveFile(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
Equivalent to \fBsaveFile(This, [])\fR\&\&.
.RE
.LP
.B
saveFile(This, Option::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Option = {file, chardata() (see module unicode)} | {fileType, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDefaultStyle(This, Style) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Style = wxTextAttr() (see module wxTextAttr)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setEditable(This, Editable) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Editable = boolean()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setInsertionPoint(This, Pos) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setInsertionPointEnd(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMaxLength(This, Len) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Len = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelection(This, From, To) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
From = integer()
.br
To = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStyle(This, Start, End, Style) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Start = integer()
.br
End = integer()
.br
Style = wxTextAttr() (see module wxTextAttr)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setValue(This, Value) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Value = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
showPosition(This, Pos) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Pos = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
undo(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
writeText(This, Text) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
Text = chardata() (see module unicode)
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
xYToPosition(This, X, Y) -> integer()
.br
.RS
.LP
Types:

.RS 3
This = wxTextCtrl()
.br
X = integer()
.br
Y = integer()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxTextCtrl()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>