.TH ssh_channel 3 "ssh 3.0.1" "Ericsson AB" "Erlang Module Definition"
.SH NAME
ssh_channel \- -behaviour(ssh_channel).
  
.SH DESCRIPTION
.LP
SSH services (clients and servers) are implemented as channels that are multiplexed over an SSH connection and communicates via the  SSH Connection Protocol\&. This module provides a callback API that takes care of generic channel aspects such as flow control and close messages and lets the callback functions take care of the service (application) specific parts\&. This behavior also ensures that the channel process honors the principal of an OTP-process so that it can be part of a supervisor tree\&. This is a requirement of channel processes implementing a subsystem that will be added to the SSH applications supervisor tree\&.
.LP

.RS -4
.B
Note:
.RE
When implementing a SSH subsystem use the \fI-behaviour(ssh_daemon_channel)\&.\fR\& instead of \fI-behaviour(ssh_channel)\&.\fR\& as the only relevant callback functions for subsystems are init/1, handle_ssh_msg/2, handle_msg/2 and terminate/2, so the ssh_daemon_channel behaviour is limited version of the ssh_channel behaviour\&.

.SH "DATA TYPES "

.LP
Type definitions that are used more than once in this module and/or abstractions to indicate the intended use of the data type:
.LP
\fIboolean() = true | false \fR\&
.LP
\fIstring() = list of ASCII characters\fR\&
.LP
\fItimeout() = infinity | integer() - in milliseconds\&.\fR\&
.LP
\fIssh_connection_ref() - opaque to the user returned by ssh:connect/3 or sent to an SSH channel process\fR\&
.LP
\fIssh_channel_id() = integer() \fR\&
.LP
\fIssh_data_type_code() = 1 ("stderr") | 0 ("normal") are currently valid values see RFC 4254  section 5\&.2\&.\fR\&
.SH EXPORTS
.LP
.B
call(ChannelRef, Msg) ->
.br
.B
call(ChannelRef, Msg, Timeout) -> Reply | {error, Reason}
.br
.RS
.LP
Types:

.RS 3
ChannelRef = pid() 
.br
.RS 2
As returned by start_link/4 
.RE
Msg = term() 
.br
Timeout = timeout() 
.br
Reply = term() 
.br
Reason = closed | timeout 
.br
.RE
.RE
.RS
.LP
Makes a synchronous call to the channel process by sending a message and waiting until a reply arrives or a timeout occurs\&. The channel will call \fBModule:handle_call/3\fR\& to handle the message\&. If the channel process does not exist \fI{error, closed}\fR\& is returned\&.
.RE
.LP
.B
cast(ChannelRef, Msg) -> ok 
.br
.RS
.LP
Types:

.RS 3
ChannelRef = pid() 
.br
.RS 2
As returned by start_link/4 
.RE
Msg = term() 
.br
.RE
.RE
.RS
.LP
Sends an asynchronous message to the channel process and returns ok immediately, ignoring if the destination node or channel process does not exist\&. The channel will call \fBModule:handle_cast/2\fR\& to handle the message\&.
.RE
.LP
.B
enter_loop(State) -> _ 
.br
.RS
.LP
Types:

.RS 3
 State = term() - as returned by \fBssh_channel:init/1\fR\&
.br
.RE
.RE
.RS
.LP
Makes an existing process an \fIssh_channel\fR\& process\&. Does not return, instead the calling process will enter the \fIssh_channel\fR\& process receive loop and become an \fIssh_channel process\&.\fR\& The process must have been started using one of the start functions in proc_lib, see \fBproc_lib(3)\fR\&\&. The user is responsible for any initialization of the process and needs to call \fBssh_channel:init/1\fR\& 
.RE
.LP
.B
init(Options) -> {ok, State} | {ok, State, Timeout} | {stop, Reason} 
.br
.RS
.LP
Types:

.RS 3
Options = [{Option, Value}]
.br
State = term()
.br
Timeout = timeout() 
.br
Reason = term() 
.br
.RE
.RE
.RS
.LP
The following options must be present:
.RS 2
.TP 2
.B
\fI{channel_cb, atom()}\fR\&:
The module that implements the channel behaviour\&.
.TP 2
.B
\fI{init_args(), list()}\fR\&:
 The list of arguments to the callback module\&'s init function\&.
.TP 2
.B
\fI{cm, connection_ref()}\fR\&:
 Reference to the ssh connection as returned by \fBssh:connect/3\fR\&
.TP 2
.B
\fI{channel_id, channel_id()}\fR\&:
 Id of the SSH channel\&.
.RE
.LP

.RS -4
.B
Note:
.RE
This function is normally not called by the user\&. The user only needs to call if for some reason the channel process needs to be started with help of \fIproc_lib\fR\& instead of calling \fIssh_channel:start/4\fR\& or \fIssh_channel:start_link/4\fR\& 

.RE
.LP
.B
reply(Client, Reply) -> _
.br
.RS
.LP
Types:

.RS 3
Client - opaque to the user, see explanation below
.br
Reply = term()
.br
.RE
.RE
.RS
.LP
This function can be used by a channel to explicitly send a reply to a client that called \fIcall/[2,3]\fR\& when the reply cannot be defined in the return value of \fBModule:handle_call/3\fR\&\&.
.LP
\fIClient\fR\& must be the \fIFrom\fR\& argument provided to the callback function \fIhandle_call/3\fR\&\&. \fIReply\fR\& is an arbitrary term, which will be given back to the client as the return value of \fBssh_channel:call/[2,3]\&.\fR\&>
.RE
.LP
.B
start(SshConnection, ChannelId, ChannelCb, CbInitArgs) -> 
.br
.B
start_link(SshConnection, ChannelId, ChannelCb, CbInitArgs) -> {ok, ChannelRef} | {error, Reason}
.br
.RS
.LP
Types:

.RS 3
SshConnection = ssh_connection_ref()
.br
ChannelId = ssh_channel_id() 
.br
.RS 2
 As returned by cannot be defined in the return value of \fBssh_connection:session_channel/[2,4]\fR\&
.RE
ChannelCb = atom()
.br
.RS 2
 The name of the module implementing the service specific parts of the channel\&.
.RE
CbInitArgs = [term()]
.br
.RS 2
Argument list for the init function in the callback module\&. 
.RE
ChannelRef = pid()
.br
.RE
.RE
.RS
.LP
Starts a processes that handles an SSH channel\&. It will be called internally by the SSH daemon or explicitly by the SSH client implementations\&. The behavior will set the \fItrap_exit\fR\& flag to true\&.
.RE
.SH " CALLBACK TIMEOUTS"

.LP
The timeout values that may be returned by the callback functions has the same semantics as in a \fBgen_server\fR\& If the timeout occurs \fBhandle_msg/2\fR\& will be called as \fIhandle_msg(timeout, State)\&. \fR\&
.SH EXPORTS
.LP
.B
Module:code_change(OldVsn, State, Extra) -> {ok, NewState}
.br
.RS
.LP
Types:

.RS 3
OldVsn = term()
.br
.RS 2
In the case of an upgrade, \fIOldVsn\fR\& is \fIVsn\fR\&, and in the case of a downgrade, \fIOldVsn\fR\& is \fI{down,Vsn}\fR\&\&. \fIVsn\fR\& is defined by the \fIvsn\fR\& attribute(s) of the old version of the callback module \fIModule\fR\&\&. If no such attribute is defined, the version is the checksum of the BEAM file\&.
.RE
State = term()
.br
.RS 2
The internal state of the channel\&.
.RE
Extra = term()
.br
.RS 2
Passed as-is from the \fI{advanced,Extra}\fR\& part of the update instruction\&.
.RE
.RE
.RE
.RS
.LP
Converts process state when code is changed\&.
.LP
This function is called by a client side channel when it should update its internal state during a release upgrade/downgrade, i\&.e\&. when the instruction \fI{update,Module,Change,\&.\&.\&.}\fR\& where \fIChange={advanced,Extra}\fR\& is given in the \fIappup\fR\& file\&. See \fBOTP Design Principles\fR\& for more information\&.
.LP

.RS -4
.B
Note:
.RE
Soft upgrade according to the OTP release concept is not straight forward for the server side, as subsystem channel processes are spawned by the SSH application and hence added to its supervisor tree\&. It could be possible to upgrade the subsystem channels, when upgrading the user application, if the callback functions can handle two versions of the state, but this function can not be used in the normal way\&.

.RE
.LP
.B
Module:init(Args) -> {ok, State} | {ok, State, timeout()} | {stop, Reason}
.br
.RS
.LP
Types:

.RS 3
 Args = term() 
.br
.RS 2
 Last argument to ssh_channel:start_link/4\&.
.RE
 State = term() 
.br
 Reason = term() 
.br
.RE
.RE
.RS
.LP
Makes necessary initializations and returns the initial channel state if the initializations succeed\&.
.LP
For more detailed information on timeouts see the section \fBCALLBACK TIMEOUTS\fR\&\&.
.RE
.LP
.B
Module:handle_call(Msg, From, State) -> Result
.br
.RS
.LP
Types:

.RS 3
Msg = term()
.br
From = opaque to the user should be used as argument to ssh_channel:reply/2
.br
State = term()
.br
Result = {reply, Reply, NewState} | {reply, Reply, NewState, timeout()} | {noreply, NewState} | {noreply , NewState, timeout()} | {stop, Reason, Reply, NewState} | {stop, Reason, NewState} 
.br
Reply = term() - will be the return value of ssh_channel:call/[2,3]
.br
NewState = term()
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Handles messages sent by calling \fBssh_channel:call/[2,3]\fR\& 
.LP
For more detailed information on timeouts see the section \fBCALLBACK TIMEOUTS\fR\&\&.
.RE
.LP
.B
Module:handle_cast(Msg, State) -> Result
.br
.RS
.LP
Types:

.RS 3
Msg = term()
.br
State = term()
.br
Result = {noreply, NewState} | {noreply, NewState, timeout()} | {stop, Reason, NewState}
.br
NewState = term() 
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
Handles messages sent by calling \fIssh_channel:cast/2\fR\& 
.LP
For more detailed information on timeouts see the section \fBCALLBACK TIMEOUTS\fR\&\&.
.RE
.LP
.B
Module:handle_msg(Msg, State) -> {ok, State} | {stop, ChannelId, State}
.br
.RS
.LP
Types:

.RS 3
Msg = timeout | term()
.br
ChannelId = ssh_channel_id()
.br
State = term() 
.br
.RE
.RE
.RS
.LP
Handle other messages than ssh connection protocol, call or cast messages sent to the channel\&.
.LP
Possible erlang \&'EXIT\&'-messages should be handled by this function and all channels should handle the following message\&.
.RS 2
.TP 2
.B
\fI{ssh_channel_up, ssh_channel_id(), ssh_connection_ref()}\fR\&:
This is the first messages that will be received by the channel, it is sent just before the \fBssh_channel:init/1\fR\& function returns successfully\&. This is especially useful if the server wants to send a message to the client without first receiving a message from it\&. If the message is not useful for your particular scenario just ignore it by immediately returning {ok, State}\&. 
.RE
.RE
.LP
.B
Module:handle_ssh_msg(Msg, State) -> {ok, State} | {stop, ChannelId, State}
.br
.RS
.LP
Types:

.RS 3
Msg = \fB ssh_connection:event() \fR\&
.br
ChannelId = ssh_channel_id()
.br
State = term()
.br
.RE
.RE
.RS
.LP
Handles SSH connection protocol messages that may need service specific attention\&.
.LP
The following message is completely taken care of by the SSH channel behavior
.RS 2
.TP 2
.B
\fI{closed, ssh_channel_id()}\fR\&:
 The channel behavior will send a close message to the other side if such a message has not already been sent and then terminate the channel with reason normal\&.
.RE
.RE
.LP
.B
Module:terminate(Reason, State) -> _
.br
.RS
.LP
Types:

.RS 3
Reason = term()
.br
State = term()
.br
.RE
.RE
.RS
.LP
This function is called by a channel process when it is about to terminate\&. Before this function is called \fB ssh_connection:close/2 \fR\& will be called if it has not been called earlier\&. This function should do any necessary cleaning up\&. When it returns, the channel process terminates with reason \fIReason\fR\&\&. The return value is ignored\&.
.RE