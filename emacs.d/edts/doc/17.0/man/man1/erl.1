.TH erl 1 "erts 6.0" "Ericsson AB" "User Commands"
.SH NAME
erl \- The Erlang Emulator
.SH DESCRIPTION
.LP
The \fIerl\fR\& program starts an Erlang runtime system\&. The exact details (for example, whether \fIerl\fR\& is a script or a program and which other programs it calls) are system-dependent\&.
.LP
Windows users probably wants to use the \fIwerl\fR\& program instead, which runs in its own window with scrollbars and supports command-line editing\&. The \fIerl\fR\& program on Windows provides no line editing in its shell, and on Windows 95 there is no way to scroll back to text which has scrolled off the screen\&. The \fIerl\fR\& program must be used, however, in pipelines or if you want to redirect standard input or output\&.
.LP

.RS -4
.B
Note:
.RE
As of ERTS version 5\&.9 (OTP-R15B) the runtime system will by default \fInot\fR\& bind schedulers to logical processors\&. For more information see documentation of the \fB+sbt\fR\& system flag\&.

.SH EXPORTS
.LP
.B
erl <arguments>
.br
.RS
.LP
Starts an Erlang runtime system\&.
.LP
The arguments can be divided into \fIemulator flags\fR\&, \fIflags\fR\& and \fIplain arguments\fR\&:
.RS 2
.TP 2
*
Any argument starting with the character \fI+\fR\& is interpreted as an \fBemulator flag\fR\&\&.
.RS 2
.LP
As indicated by the name, emulator flags controls the behavior of the emulator\&.
.RE
.LP
.TP 2
*
Any argument starting with the character \fI-\fR\& (hyphen) is interpreted as a \fBflag\fR\& which should be passed to the Erlang part of the runtime system, more specifically to the \fIinit\fR\& system process, see \fBinit(3)\fR\&\&.
.RS 2
.LP
The \fIinit\fR\& process itself interprets some of these flags, the \fIinit flags\fR\&\&. It also stores any remaining flags, the \fIuser flags\fR\&\&. The latter can be retrieved by calling \fIinit:get_argument/1\fR\&\&.
.RE
.RS 2
.LP
It can be noted that there are a small number of "-" flags which now actually are emulator flags, see the description below\&.
.RE
.LP
.TP 2
*
Plain arguments are not interpreted in any way\&. They are also stored by the \fIinit\fR\& process and can be retrieved by calling \fIinit:get_plain_arguments/0\fR\&\&. Plain arguments can occur before the first flag, or after a \fI--\fR\& flag\&. Additionally, the flag \fI-extra\fR\& causes everything that follows to become plain arguments\&.
.LP
.RE

.LP
Example:
.LP
.nf

% erl +W w -sname arnie +R 9 -s my_init -extra +bertie
(arnie@host)1> init:get_argument(sname)\&.
{ok,[["arnie"]]}
(arnie@host)2> init:get_plain_arguments()\&.
["+bertie"]
.fi
.LP
Here \fI+W w\fR\& and \fI+R 9\fR\& are emulator flags\&. \fI-s my_init\fR\& is an init flag, interpreted by \fIinit\fR\&\&. \fI-sname arnie\fR\& is a user flag, stored by \fIinit\fR\&\&. It is read by Kernel and will cause the Erlang runtime system to become distributed\&. Finally, everything after \fI-extra\fR\& (that is, \fI+bertie\fR\&) is considered as plain arguments\&.
.LP
.nf

% erl -myflag 1
1> init:get_argument(myflag)\&.
{ok,[["1"]]}
2> init:get_plain_arguments()\&.
[]
.fi
.LP
Here the user flag \fI-myflag 1\fR\& is passed to and stored by the \fIinit\fR\& process\&. It is a user defined flag, presumably used by some user defined application\&.
.RE
.SH "FLAGS"

.LP
In the following list, init flags are marked (init flag)\&. Unless otherwise specified, all other flags are user flags, for which the values can be retrieved by calling \fIinit:get_argument/1\fR\&\&. Note that the list of user flags is not exhaustive, there may be additional, application specific flags which instead are documented in the corresponding application documentation\&.
.RS 2
.TP 2
.B
\fI--\fR\&(init flag):
Everything following \fI--\fR\& up to the next flag (\fI-flag\fR\& or \fI+flag\fR\&) is considered plain arguments and can be retrieved using \fIinit:get_plain_arguments/0\fR\&\&.
.TP 2
.B
\fI-Application Par Val\fR\&:
Sets the application configuration parameter \fIPar\fR\& to the value \fIVal\fR\& for the application \fIApplication\fR\&, see \fBapp(4)\fR\& and \fBapplication(3)\fR\&\&.
.TP 2
.B
\fB\fI-args_file FileName\fR\&\fR\&:
Command line arguments are read from the file \fIFileName\fR\&\&. The arguments read from the file replace the \&'\fI-args_file FileName\fR\&\&' flag on the resulting command line\&.
.RS 2
.LP
The file \fIFileName\fR\& should be a plain text file and may contain comments and command line arguments\&. A comment begins with a # character and continues until next end of line character\&. Backslash (\\\\) is used as quoting character\&. All command line arguments accepted by \fIerl\fR\& are allowed, also the \fI-args_file FileName\fR\& flag\&. Be careful not to cause circular dependencies between files containing the \fI-args_file\fR\& flag, though\&.
.RE
.RS 2
.LP
The \fI-extra\fR\& flag is treated specially\&. Its scope ends at the end of the file\&. Arguments following an \fI-extra\fR\& flag are moved on the command line into the \fI-extra\fR\& section, i\&.e\&. the end of the command line following after an \fI-extra\fR\& flag\&.
.RE
.TP 2
.B
\fI-async_shell_start\fR\&:
The initial Erlang shell does not read user input until the system boot procedure has been completed (Erlang 5\&.4 and later)\&. This flag disables the start synchronization feature and lets the shell start in parallel with the rest of the system\&.
.TP 2
.B
\fI-boot File\fR\&:
Specifies the name of the boot file, \fIFile\&.boot\fR\&, which is used to start the system\&. See \fBinit(3)\fR\&\&. Unless \fIFile\fR\& contains an absolute path, the system searches for \fIFile\&.boot\fR\& in the current and \fI$ROOT/bin\fR\& directories\&.
.RS 2
.LP
Defaults to \fI$ROOT/bin/start\&.boot\fR\&\&.
.RE
.TP 2
.B
\fI-boot_var Var Dir\fR\&:
If the boot script contains a path variable \fIVar\fR\& other than \fI$ROOT\fR\&, this variable is expanded to \fIDir\fR\&\&. Used when applications are installed in another directory than \fI$ROOT/lib\fR\&, see \fBsystools:make_script/1,2\fR\&\&.
.TP 2
.B
\fI-code_path_cache\fR\&:
Enables the code path cache of the code server, see \fBcode(3)\fR\&\&.
.TP 2
.B
\fI-compile Mod1 Mod2 \&.\&.\&.\fR\&:
Compiles the specified modules and then terminates (with non-zero exit code if the compilation of some file did not succeed)\&. Implies \fI-noinput\fR\&\&. Not recommended - use \fBerlc\fR\& instead\&.
.TP 2
.B
\fI-config Config\fR\&:
Specifies the name of a configuration file, \fIConfig\&.config\fR\&, which is used to configure applications\&. See \fBapp(4)\fR\& and \fBapplication(3)\fR\&\&.
.TP 2
.B
\fB\fI-connect_all false\fR\&\fR\&:
If this flag is present, \fIglobal\fR\& will not maintain a fully connected network of distributed Erlang nodes, and then global name registration cannot be used\&. See \fBglobal(3)\fR\&\&.
.TP 2
.B
\fI-cookie Cookie\fR\&:
Obsolete flag without any effect and common misspelling for \fI-setcookie\fR\&\&. Use \fI-setcookie\fR\& instead\&.
.TP 2
.B
\fI-detached\fR\&:
Starts the Erlang runtime system detached from the system console\&. Useful for running daemons and backgrounds processes\&. Implies \fI-noinput\fR\&\&.
.TP 2
.B
\fI-emu_args\fR\&:
Useful for debugging\&. Prints out the actual arguments sent to the emulator\&.
.TP 2
.B
\fI-env Variable Value\fR\&:
Sets the host OS environment variable \fIVariable\fR\& to the value \fIValue\fR\& for the Erlang runtime system\&. Example:
.LP
.nf

% erl -env DISPLAY gin:0
.fi
.RS 2
.LP
In this example, an Erlang runtime system is started with the \fIDISPLAY\fR\& environment variable set to \fIgin:0\fR\&\&.
.RE
.TP 2
.B
\fI-eval Expr\fR\&(init flag):
Makes \fIinit\fR\& evaluate the expression \fIExpr\fR\&, see \fBinit(3)\fR\&\&.
.TP 2
.B
\fI-extra\fR\&(init flag):
Everything following \fI-extra\fR\& is considered plain arguments and can be retrieved using \fIinit:get_plain_arguments/0\fR\&\&.
.TP 2
.B
\fI-heart\fR\&:
Starts heart beat monitoring of the Erlang runtime system\&. See \fBheart(3)\fR\&\&.
.TP 2
.B
\fI-hidden\fR\&:
Starts the Erlang runtime system as a hidden node, if it is run as a distributed node\&. Hidden nodes always establish hidden connections to all other nodes except for nodes in the same global group\&. Hidden connections are not published on either of the connected nodes, i\&.e\&. neither of the connected nodes are part of the result from \fInodes/0\fR\& on the other node\&. See also hidden global groups, \fBglobal_group(3)\fR\&\&.
.TP 2
.B
\fI-hosts Hosts\fR\&:
Specifies the IP addresses for the hosts on which Erlang boot servers are running, see \fBerl_boot_server(3)\fR\&\&. This flag is mandatory if the \fI-loader inet\fR\& flag is present\&.
.RS 2
.LP
The IP addresses must be given in the standard form (four decimal numbers separated by periods, for example \fI"150\&.236\&.20\&.74"\fR\&\&. Hosts names are not acceptable, but a broadcast address (preferably limited to the local network) is\&.
.RE
.TP 2
.B
\fI-id Id\fR\&:
Specifies the identity of the Erlang runtime system\&. If it is run as a distributed node, \fIId\fR\& must be identical to the name supplied together with the \fI-sname\fR\& or \fI-name\fR\& flag\&.
.TP 2
.B
\fI-init_debug\fR\&:
Makes \fIinit\fR\& write some debug information while interpreting the boot script\&.
.TP 2
.B
\fB\fI-instr\fR\&(emulator flag)\fR\&:
Selects an instrumented Erlang runtime system (virtual machine) to run, instead of the ordinary one\&. When running an instrumented runtime system, some resource usage data can be obtained and analysed using the module \fIinstrument\fR\&\&. Functionally, it behaves exactly like an ordinary Erlang runtime system\&.
.TP 2
.B
\fI-loader Loader\fR\&:
Specifies the method used by \fIerl_prim_loader\fR\& to load Erlang modules into the system\&. See \fBerl_prim_loader(3)\fR\&\&. Two \fILoader\fR\& methods are supported, \fIefile\fR\& and \fIinet\fR\&\&. \fIefile\fR\& means use the local file system, this is the default\&. \fIinet\fR\& means use a boot server on another machine, and the \fI-id\fR\&, \fI-hosts\fR\& and \fI-setcookie\fR\& flags must be specified as well\&. If \fILoader\fR\& is something else, the user supplied \fILoader\fR\& port program is started\&.
.TP 2
.B
\fI-make\fR\&:
Makes the Erlang runtime system invoke \fImake:all()\fR\& in the current working directory and then terminate\&. See \fBmake(3)\fR\&\&. Implies \fI-noinput\fR\&\&.
.TP 2
.B
\fI-man Module\fR\&:
Displays the manual page for the Erlang module \fIModule\fR\&\&. Only supported on Unix\&.
.TP 2
.B
\fI-mode interactive | embedded\fR\&:
Indicates if the system should load code dynamically (\fIinteractive\fR\&), or if all code should be loaded during system initialization (\fIembedded\fR\&), see \fBcode(3)\fR\&\&. Defaults to \fIinteractive\fR\&\&.
.TP 2
.B
\fI-name Name\fR\&:
Makes the Erlang runtime system into a distributed node\&. This flag invokes all network servers necessary for a node to become distributed\&. See \fBnet_kernel(3)\fR\&\&. It is also ensured that \fIepmd\fR\& runs on the current host before Erlang is started\&. See \fBepmd(1)\fR\&\&.
.RS 2
.LP
The name of the node will be \fIName@Host\fR\&, where \fIHost\fR\& is the fully qualified host name of the current host\&. For short names, use the \fI-sname\fR\& flag instead\&.
.RE
.TP 2
.B
\fI-noinput\fR\&:
Ensures that the Erlang runtime system never tries to read any input\&. Implies \fI-noshell\fR\&\&.
.TP 2
.B
\fI-noshell\fR\&:
Starts an Erlang runtime system with no shell\&. This flag makes it possible to have the Erlang runtime system as a component in a series of UNIX pipes\&.
.TP 2
.B
\fI-nostick\fR\&:
Disables the sticky directory facility of the Erlang code server, see \fBcode(3)\fR\&\&.
.TP 2
.B
\fI-oldshell\fR\&:
Invokes the old Erlang shell from Erlang 3\&.3\&. The old shell can still be used\&.
.TP 2
.B
\fI-pa Dir1 Dir2 \&.\&.\&.\fR\&:
Adds the specified directories to the beginning of the code path, similar to \fIcode:add_pathsa/1\fR\&\&. See \fBcode(3)\fR\&\&. As an alternative to \fI-pa\fR\&, if several directories are to be prepended to the code and the directories have a common parent directory, that parent directory could be specified in the \fIERL_LIBS\fR\& environment variable\&. See \fBcode(3)\fR\&\&.
.TP 2
.B
\fI-pz Dir1 Dir2 \&.\&.\&.\fR\&:
Adds the specified directories to the end of the code path, similar to \fIcode:add_pathsz/1\fR\&\&. See \fBcode(3)\fR\&\&.
.TP 2
.B
\fI-remsh Node\fR\&:
Starts Erlang with a remote shell connected to \fINode\fR\&\&.
.TP 2
.B
\fI-rsh Program\fR\&:
Specifies an alternative to \fIrsh\fR\& for starting a slave node on a remote host\&. See \fBslave(3)\fR\&\&.
.TP 2
.B
\fI-run Mod [Func [Arg1, Arg2, \&.\&.\&.]]\fR\&(init flag):
Makes \fIinit\fR\& call the specified function\&. \fIFunc\fR\& defaults to \fIstart\fR\&\&. If no arguments are provided, the function is assumed to be of arity 0\&. Otherwise it is assumed to be of arity 1, taking the list \fI[Arg1,Arg2,\&.\&.\&.]\fR\& as argument\&. All arguments are passed as strings\&. See \fBinit(3)\fR\&\&.
.TP 2
.B
\fI-s Mod [Func [Arg1, Arg2, \&.\&.\&.]]\fR\&(init flag):
Makes \fIinit\fR\& call the specified function\&. \fIFunc\fR\& defaults to \fIstart\fR\&\&. If no arguments are provided, the function is assumed to be of arity 0\&. Otherwise it is assumed to be of arity 1, taking the list \fI[Arg1,Arg2,\&.\&.\&.]\fR\& as argument\&. All arguments are passed as atoms\&. See \fBinit(3)\fR\&\&.
.TP 2
.B
\fI-setcookie Cookie\fR\&:
Sets the magic cookie of the node to \fICookie\fR\&, see \fBerlang:set_cookie/2\fR\&\&.
.TP 2
.B
\fI-shutdown_time Time\fR\&:
Specifies how long time (in milliseconds) the \fIinit\fR\& process is allowed to spend shutting down the system\&. If \fITime\fR\& ms have elapsed, all processes still existing are killed\&. Defaults to \fIinfinity\fR\&\&.
.TP 2
.B
\fI-sname Name\fR\&:
Makes the Erlang runtime system into a distributed node, similar to \fI-name\fR\&, but the host name portion of the node name \fIName@Host\fR\& will be the short name, not fully qualified\&.
.RS 2
.LP
This is sometimes the only way to run distributed Erlang if the DNS (Domain Name System) is not running\&. There can be no communication between nodes running with the \fI-sname\fR\& flag and those running with the \fI-name\fR\& flag, as node names must be unique in distributed Erlang systems\&.
.RE
.TP 2
.B
\fB\fI-smp [enable|auto|disable]\fR\&\fR\&:
\fI-smp enable\fR\& and \fI-smp\fR\& starts the Erlang runtime system with SMP support enabled\&. This may fail if no runtime system with SMP support is available\&. \fI-smp auto\fR\& starts the Erlang runtime system with SMP support enabled if it is available and more than one logical processor are detected\&. \fI-smp disable\fR\& starts a runtime system without SMP support\&.
.RS 2
.LP
\fINOTE\fR\&: The runtime system with SMP support will not be available on all supported platforms\&. See also the \fB+S\fR\& flag\&.
.RE
.TP 2
.B
\fI-version\fR\&(emulator flag):
Makes the emulator print out its version number\&. The same as \fIerl +V\fR\&\&.
.RE
.SH "EMULATOR FLAGS"

.LP
\fIerl\fR\& invokes the code for the Erlang emulator (virtual machine), which supports the following flags:
.RS 2
.TP 2
.B
\fB\fI+a size\fR\&\fR\&:
Suggested stack size, in kilowords, for threads in the async-thread pool\&. Valid range is 16-8192 kilowords\&. The default suggested stack size is 16 kilowords, i\&.e, 64 kilobyte on 32-bit architectures\&. This small default size has been chosen since the amount of async-threads might be quite large\&. The default size is enough for drivers delivered with Erlang/OTP, but might not be sufficiently large for other dynamically linked in drivers that use the \fBdriver_async()\fR\& functionality\&. Note that the value passed is only a suggestion, and it might even be ignored on some platforms\&.
.TP 2
.B
\fB\fI+A size\fR\&\fR\&:
Sets the number of threads in async thread pool, valid range is 0-1024\&. If thread support is available, the default is 10\&.
.TP 2
.B
\fI+B [c | d | i]\fR\&:
The \fIc\fR\& option makes \fICtrl-C\fR\& interrupt the current shell instead of invoking the emulator break handler\&. The \fId\fR\& option (same as specifying \fI+B\fR\& without an extra option) disables the break handler\&. The \fIi\fR\& option makes the emulator ignore any break signal\&.
.RS 2
.LP
If the \fIc\fR\& option is used with \fIoldshell\fR\& on Unix, \fICtrl-C\fR\& will restart the shell process rather than interrupt it\&.
.RE
.RS 2
.LP
Note that on Windows, this flag is only applicable for \fIwerl\fR\&, not \fIerl\fR\& (\fIoldshell\fR\&)\&. Note also that \fICtrl-Break\fR\& is used instead of \fICtrl-C\fR\& on Windows\&.
.RE
.TP 2
.B
\fI+c\fR\&:
Disable compensation for sudden changes of system time\&.
.RS 2
.LP
Normally, \fIerlang:now/0\fR\& will not immediately reflect sudden changes in the system time, in order to keep timers (including \fIreceive-after\fR\&) working\&. Instead, the time maintained by \fIerlang:now/0\fR\& is slowly adjusted towards the new system time\&. (Slowly means in one percent adjustments; if the time is off by one minute, the time will be adjusted in 100 minutes\&.)
.RE
.RS 2
.LP
When the \fI+c\fR\& option is given, this slow adjustment will not take place\&. Instead \fIerlang:now/0\fR\& will always reflect the current system time\&. Note that timers are based on \fIerlang:now/0\fR\&\&. If the system time jumps, timers then time out at the wrong time\&.
.RE
.TP 2
.B
\fI+d\fR\&:
If the emulator detects an internal error (or runs out of memory), it will by default generate both a crash dump and a core dump\&. The core dump will, however, not be very useful since the content of process heaps is destroyed by the crash dump generation\&.
.RS 2
.LP
The \fI+d\fR\& option instructs the emulator to only produce a core dump and no crash dump if an internal error is detected\&.
.RE
.RS 2
.LP
Calling \fIerlang:halt/1\fR\& with a string argument will still produce a crash dump\&.
.RE
.TP 2
.B
\fB\fI+e Number\fR\&\fR\&:
Set max number of ETS tables\&.
.TP 2
.B
\fI+ec\fR\&:
Force the \fIcompressed\fR\& option on all ETS tables\&. Only intended for test and evaluation\&.
.TP 2
.B
\fI+fnl\fR\&:
The VM works with file names as if they are encoded using the ISO-latin-1 encoding, disallowing Unicode characters with codepoints beyond 255\&.
.RS 2
.LP
See \fBSTDLIB User\&'s Guide\fR\& for more infomation about unicode file names\&. Note that this value also applies to command-line parameters and environment variables (see \fBSTDLIB User\&'s Guide\fR\&)\&.
.RE
.TP 2
.B
\fI+fnu[{w|i|e}]\fR\&:
The VM works with file names as if they are encoded using UTF-8 (or some other system specific Unicode encoding)\&. This is the default on operating systems that enforce Unicode encoding, i\&.e\&. Windows and MacOS X\&.
.RS 2
.LP
The \fI+fnu\fR\& switch can be followed by \fIw\fR\&, \fIi\fR\&, or \fIe\fR\& to control the way wrongly encoded file names are to be reported\&. \fIw\fR\& means that a warning is sent to the \fIerror_logger\fR\& whenever a wrongly encoded file name is "skipped" in directory listings, \fIi\fR\& means that those wrongly encoded file names are silently ignored and \fIe\fR\& means that the API function will return an error whenever a wrongly encoded file (or directory) name is encountered\&. \fIw\fR\& is the default\&. Note that \fIfile:read_link/1\fR\& will always return an error if the link points to an invalid file name\&.
.RE
.RS 2
.LP
See \fBSTDLIB User\&'s Guide\fR\& for more infomation about unicode file names\&. Note that this value also applies to command-line parameters and environment variables (see \fBSTDLIB User\&'s Guide\fR\&)\&.
.RE
.TP 2
.B
\fI+fna[{w|i|e}]\fR\&:
Selection between \fI+fnl\fR\& and \fI+fnu\fR\& is done based on the current locale settings in the OS, meaning that if you have set your terminal for UTF-8 encoding, the filesystem is expected to use the same encoding for file names\&. This is default on all operating systems except MacOS X and Windows\&.
.RS 2
.LP
The \fI+fna\fR\& switch can be followed by \fIw\fR\&, \fIi\fR\&, or \fIe\fR\&\&. This will have effect if the locale settings cause the behavior of \fI+fnu\fR\& to be selected\&. See the description of \fI+fnu\fR\& above\&. If the locale settings cause the behavior of \fI+fnl\fR\& to be selected, then \fIw\fR\&, \fIi\fR\&, or \fIe\fR\& will not have any effect\&.
.RE
.RS 2
.LP
See \fBSTDLIB User\&'s Guide\fR\& for more infomation about unicode file names\&. Note that this value also applies to command-line parameters and environment variables (see \fBSTDLIB User\&'s Guide\fR\&)\&.
.RE
.TP 2
.B
\fI+hms Size\fR\&:
Sets the default heap size of processes to the size \fISize\fR\&\&.
.TP 2
.B
\fI+hmbs Size\fR\&:
Sets the default binary virtual heap size of processes to the size \fISize\fR\&\&.
.TP 2
.B
\fI+K true | false\fR\&:
Enables or disables the kernel poll functionality if the emulator supports it\&. Default is \fIfalse\fR\& (disabled)\&. If the emulator does not support kernel poll, and the \fI+K\fR\& flag is passed to the emulator, a warning is issued at startup\&.
.TP 2
.B
\fI+l\fR\&:
Enables auto load tracing, displaying info while loading code\&.
.TP 2
.B
\fI+L\fR\&:
Don\&'t load information about source file names and line numbers\&. This will save some memory, but exceptions will not contain information about the file names and line numbers\&.
.TP 2
.B
\fB\fI+MFlag Value\fR\&\fR\&:
Memory allocator specific flags, see \fBerts_alloc(3)\fR\& for further information\&.
.TP 2
.B
\fI+n Behavior\fR\&:
Control behavior of signals to ports\&.
.RS 2
.LP
As of OTP-R16 signals to ports are truly asynchronously delivered\&. Note that signals always have been documented as asynchronous\&. The underlying implementation has, however, previously delivered these signals synchronously\&. Correctly written Erlang programs should be able to handle this without any issues\&. Bugs in existing Erlang programs that make false assumptions about signals to ports may, however, be tricky to find\&. This switch has been introduced in order to at least make it easier to compare behaviors during a transition period\&. Note that \fIthis flag is deprecated\fR\& as of its introduction, and is scheduled for removal in OTP-R17\&. \fIBehavior\fR\& should be one of the following characters:
.RE
.RS 2
.TP 2
.B
\fId\fR\&:
The default\&. Asynchronous signals\&. A process that sends a signal to a port may continue execution before the signal has been delivered to the port\&.
.TP 2
.B
\fIs\fR\&:
Synchronous signals\&. A processes that sends a signal to a port will not continue execution until the signal has been delivered\&. Should \fIonly\fR\& be used for testing and debugging\&.
.TP 2
.B
\fIa\fR\&:
Asynchronous signals\&. As the default, but a processes that sends a signal will even more frequently continue execution before the signal has been delivered to the port\&. Should \fIonly\fR\& be used for testing and debugging\&.
.RE
.TP 2
.B
\fB\fI+pc Range\fR\&\fR\&:
Sets the range of characters that the system will consider printable in heuristic detection of strings\&. This typically affects the shell, debugger and io:format functions (when ~tp is used in the format string)\&.
.RS 2
.LP
Currently two values for the \fIRange\fR\& are supported: 
.RS 2
.TP 2
.B
\fIlatin1\fR\&:
The default\&. Only characters in the ISO-latin-1 range can be considered printable, which means that a character with a code point > 255 will never be considered printable and that lists containing such characters will be displayed as lists of integers rather than text strings by tools\&.
.TP 2
.B
\fIunicode\fR\&:
All printable Unicode characters are considered when determining if a list of integers is to be displayed in string syntax\&. This may give unexpected results if for example your font does not cover all Unicode characters\&.
.RE 
.RE
.RS 2
.LP
Se also \fB io:printable_range/0\fR\&\&.
.RE
.TP 2
.B
\fB\fI+P Number|legacy\fR\&\fR\&:
Sets the maximum number of simultaneously existing processes for this system if a \fINumber\fR\& is passed as value\&. Valid range for \fINumber\fR\& is \fI[1024-134217727]\fR\&
.RS 2
.LP
\fINOTE\fR\&: The actual maximum chosen may be much larger than the \fINumber\fR\& passed\&. Currently the runtime system often, but not always, chooses a value that is a power of 2\&. This might, however, be changed in the future\&. The actual value chosen can be checked by calling \fBerlang:system_info(process_limit)\fR\&\&.
.RE
.RS 2
.LP
The default value is \fI262144\fR\&
.RE
.RS 2
.LP
If \fIlegacy\fR\& is passed as value, the legacy algorithm for allocation of process identifiers will be used\&. Using the legacy algorithm, identifiers will be allocated in a strictly increasing fashion until largest possible identifier has been reached\&. Note that this algorithm suffers from performance issues and can under certain circumstances be extremely expensive\&. The legacy algoritm is deprecated, and the \fIlegacy\fR\& option is scheduled for removal in OTP-R18\&.
.RE
.TP 2
.B
\fB\fI+Q Number|legacy\fR\&\fR\&:
Sets the maximum number of simultaneously existing ports for this system if a Number is passed as value\&. Valid range for \fINumber\fR\& is \fI[1024-134217727]\fR\&
.RS 2
.LP
\fINOTE\fR\&: The actual maximum chosen may be much larger than the actual \fINumber\fR\& passed\&. Currently the runtime system often, but not always, chooses a value that is a power of 2\&. This might, however, be changed in the future\&. The actual value chosen can be checked by calling \fBerlang:system_info(port_limit)\fR\&\&.
.RE
.RS 2
.LP
The default value used is normally \fI65536\fR\&\&. However, if the runtime system is able to determine maximum amount of file descriptors that it is allowed to open and this value is larger than \fI65536\fR\&, the chosen value will increased to a value larger or equal to the maximum amount of file descriptors that can be opened\&.
.RE
.RS 2
.LP
On Windows the default value is set to \fI8196\fR\& because the normal OS limitations are set higher than most machines can handle\&.
.RE
.RS 2
.LP
Previously the environment variable \fIERL_MAX_PORTS\fR\& was used for setting the maximum number of simultaneously existing ports\&. This environment variable is deprecated, and scheduled for removal in OTP-R17, but can still be used\&.
.RE
.RS 2
.LP
If \fIlegacy\fR\& is passed as value, the legacy algorithm for allocation of port identifiers will be used\&. Using the legacy algorithm, identifiers will be allocated in a strictly increasing fashion until largest possible identifier has been reached\&. Note that this algorithm suffers from performance issues and can under certain circumstances be extremely expensive\&. The legacy algoritm is deprecated, and the \fIlegacy\fR\& option is scheduled for removal in OTP-R18\&.
.RE
.TP 2
.B
\fB\fI+R ReleaseNumber\fR\&\fR\&:
Sets the compatibility mode\&.
.RS 2
.LP
The distribution mechanism is not backwards compatible by default\&. This flags sets the emulator in compatibility mode with an earlier Erlang/OTP release \fIReleaseNumber\fR\&\&. The release number must be in the range \fI<current release>-2\&.\&.<current release>\fR\&\&. This limits the emulator, making it possible for it to communicate with Erlang nodes (as well as C- and Java nodes) running that earlier release\&.
.RE
.RS 2
.LP
Note: Make sure all nodes (Erlang-, C-, and Java nodes) of a distributed Erlang system is of the same Erlang/OTP release, or from two different Erlang/OTP releases X and Y, where \fIall\fR\& Y nodes have compatibility mode X\&.
.RE
.TP 2
.B
\fI+r\fR\&:
Force ets memory block to be moved on realloc\&.
.TP 2
.B
\fB\fI+rg ReaderGroupsLimit\fR\&\fR\&:
Limits the amount of reader groups used by read/write locks optimized for read operations in the Erlang runtime system\&. By default the reader groups limit equals 64\&.
.RS 2
.LP
When the amount of schedulers is less than or equal to the reader groups limit, each scheduler has its own reader group\&. When the amount of schedulers is larger than the reader groups limit, schedulers share reader groups\&. Shared reader groups degrades read lock and read unlock performance while a large amount of reader groups degrades write lock performance, so the limit is a tradeoff between performance for read operations and performance for write operations\&. Each reader group currently consumes 64 byte in each read/write lock\&. Also note that a runtime system using shared reader groups benefits from \fBbinding schedulers to logical processors\fR\&, since the reader groups are distributed better between schedulers\&.
.RE
.TP 2
.B
\fB\fI+S Schedulers:SchedulerOnline\fR\&\fR\&:
Sets the number of scheduler threads to create and scheduler threads to set online when SMP support has been enabled\&. The maximum for both values is 1024\&. If the Erlang runtime system is able to determine the amount of logical processors configured and logical processors available, \fISchedulers\fR\& will default to logical processors configured, and \fISchedulersOnline\fR\& will default to logical processors available; otherwise, the default values will be 1\&. \fISchedulers\fR\& may be omitted if \fI:SchedulerOnline\fR\& is not and vice versa\&. The number of schedulers online can be changed at run time via \fBerlang:system_flag(schedulers_online, SchedulersOnline)\fR\&\&.
.RS 2
.LP
If \fISchedulers\fR\& or \fISchedulersOnline\fR\& is specified as a negative number, the value is subtracted from the default number of logical processors configured or logical processors available, respectively\&.
.RE
.RS 2
.LP
Specifying the value 0 for \fISchedulers\fR\& or \fISchedulersOnline\fR\& resets the number of scheduler threads or scheduler threads online respectively to its default value\&.
.RE
.RS 2
.LP
This option is ignored if the emulator doesn\&'t have SMP support enabled (see the \fB-smp\fR\& flag)\&.
.RE
.TP 2
.B
\fB\fI+SP SchedulersPercentage:SchedulersOnlinePercentage\fR\&\fR\&:
Similar to \fB+S\fR\& but uses percentages to set the number of scheduler threads to create, based on logical processors configured, and scheduler threads to set online, based on logical processors available, when SMP support has been enabled\&. Specified values must be greater than 0\&. For example, \fI+SP 50:25\fR\& sets the number of scheduler threads to 50% of the logical processors configured and the number of scheduler threads online to 25% of the logical processors available\&. \fISchedulersPercentage\fR\& may be omitted if \fI:SchedulersOnlinePercentage\fR\& is not and vice versa\&. The number of schedulers online can be changed at run time via \fBerlang:system_flag(schedulers_online, SchedulersOnline)\fR\&\&.
.RS 2
.LP
This option interacts with \fB+S\fR\& settings\&. For example, on a system with 8 logical cores configured and 8 logical cores available, the combination of the options \fI+S 4:4 +SP 50:25\fR\& (in either order) results in 2 scheduler threads (50% of 4) and 1 scheduler thread online (25% of 4)\&.
.RE
.RS 2
.LP
This option is ignored if the emulator doesn\&'t have SMP support enabled (see the \fB-smp\fR\& flag)\&.
.RE
.TP 2
.B
\fB\fI+SDcpu DirtyCPUSchedulers:DirtyCPUSchedulersOnline\fR\&\fR\&:
Sets the number of dirty CPU scheduler threads to create and dirty CPU scheduler threads to set online when threading support has been enabled\&. The maximum for both values is 1024, and each value is further limited by the settings for normal schedulers: the number of dirty CPU scheduler threads created cannot exceed the number of normal scheduler threads created, and the number of dirty CPU scheduler threads online cannot exceed the number of normal scheduler threads online (see the \fB+S\fR\& and \fB+SP\fR\& flags for more details)\&. By default, the number of dirty CPU scheduler threads created equals the number of normal scheduler threads created, and the number of dirty CPU scheduler threads online equals the number of normal scheduler threads online\&. \fIDirtyCPUSchedulers\fR\& may be omitted if \fI:DirtyCPUSchedulersOnline\fR\& is not and vice versa\&. The number of dirty CPU schedulers online can be changed at run time via \fBerlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline)\fR\&\&.
.RS 2
.LP
This option is ignored if the emulator doesn\&'t have threading support enabled\&. Currently, \fIthis option is experimental\fR\& and is supported only if the emulator was configured and built with support for dirty schedulers enabled (it\&'s disabled by default)\&.
.RE
.TP 2
.B
\fB\fI+SDPcpu DirtyCPUSchedulersPercentage:DirtyCPUSchedulersOnlinePercentage\fR\&\fR\&:
Similar to \fB+SDcpu\fR\& but uses percentages to set the number of dirty CPU scheduler threads to create and number of dirty CPU scheduler threads to set online when threading support has been enabled\&. Specified values must be greater than 0\&. For example, \fI+SDPcpu 50:25\fR\& sets the number of dirty CPU scheduler threads to 50% of the logical processors configured and the number of dirty CPU scheduler threads online to 25% of the logical processors available\&. \fIDirtyCPUSchedulersPercentage\fR\& may be omitted if \fI:DirtyCPUSchedulersOnlinePercentage\fR\& is not and vice versa\&. The number of dirty CPU schedulers online can be changed at run time via \fBerlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline)\fR\&\&.
.RS 2
.LP
This option interacts with \fB+SDcpu\fR\& settings\&. For example, on a system with 8 logical cores configured and 8 logical cores available, the combination of the options \fI+SDcpu 4:4 +SDPcpu 50:25\fR\& (in either order) results in 2 dirty CPU scheduler threads (50% of 4) and 1 dirty CPU scheduler thread online (25% of 4)\&.
.RE
.RS 2
.LP
This option is ignored if the emulator doesn\&'t have threading support enabled\&. Currently, \fIthis option is experimental\fR\& and is supported only if the emulator was configured and built with support for dirty schedulers enabled (it\&'s disabled by default)\&.
.RE
.TP 2
.B
\fB\fI+SDio IOSchedulers\fR\&\fR\&:

.TP 2
.B
\fI+sFlag Value\fR\&:
Scheduling specific flags\&.
.RS 2
.TP 2
.B
\fB\fI+sbt BindType\fR\&\fR\&:
Set scheduler bind type\&.
.RS 2
.LP
Schedulers can also be bound using the \fB+stbt\fR\& flag\&. The only difference between these two flags is how the following errors are handled:
.RE
.RS 2
.TP 2
*
Binding of schedulers is not supported on the specific platform\&.
.LP
.TP 2
*
No available CPU topology\&. That is the runtime system was not able to automatically detected the CPU topology, and no \fBuser defined CPU topology\fR\& was set\&.
.LP
.RE

.RS 2
.LP
If any of these errors occur when \fI+sbt\fR\& has been passed, the runtime system will print an error message, and refuse to start\&. If any of these errors occur when \fI+stbt\fR\& has been passed, the runtime system will silently ignore the error, and start up using unbound schedulers\&.
.RE
.RS 2
.LP
Currently valid \fIBindType\fR\&s:
.RE
.RS 2
.TP 2
.B
\fIu\fR\&:
\fIunbound\fR\& - Schedulers will not be bound to logical processors, i\&.e\&., the operating system decides where the scheduler threads execute, and when to migrate them\&. This is the default\&.
.TP 2
.B
\fIns\fR\&:
\fIno_spread\fR\& - Schedulers with close scheduler identifiers will be bound as close as possible in hardware\&.
.TP 2
.B
\fIts\fR\&:
\fIthread_spread\fR\& - Thread refers to hardware threads (e\&.g\&. Intel\&'s hyper-threads)\&. Schedulers with low scheduler identifiers, will be bound to the first hardware thread of each core, then schedulers with higher scheduler identifiers will be bound to the second hardware thread of each core, etc\&.
.TP 2
.B
\fIps\fR\&:
\fIprocessor_spread\fR\& - Schedulers will be spread like \fIthread_spread\fR\&, but also over physical processor chips\&.
.TP 2
.B
\fIs\fR\&:
\fIspread\fR\& - Schedulers will be spread as much as possible\&.
.TP 2
.B
\fInnts\fR\&:
\fIno_node_thread_spread\fR\& - Like \fIthread_spread\fR\&, but if multiple NUMA (Non-Uniform Memory Access) nodes exists, schedulers will be spread over one NUMA node at a time, i\&.e\&., all logical processors of one NUMA node will be bound to schedulers in sequence\&.
.TP 2
.B
\fInnps\fR\&:
\fIno_node_processor_spread\fR\& - Like \fIprocessor_spread\fR\&, but if multiple NUMA nodes exists, schedulers will be spread over one NUMA node at a time, i\&.e\&., all logical processors of one NUMA node will be bound to schedulers in sequence\&.
.TP 2
.B
\fItnnps\fR\&:
\fIthread_no_node_processor_spread\fR\& - A combination of \fIthread_spread\fR\&, and \fIno_node_processor_spread\fR\&\&. Schedulers will be spread over hardware threads across NUMA nodes, but schedulers will only be spread over processors internally in one NUMA node at a time\&.
.TP 2
.B
\fIdb\fR\&:
\fIdefault_bind\fR\& - Binds schedulers the default way\&. Currently the default is \fIthread_no_node_processor_spread\fR\& (which might change in the future)\&.
.RE
.RS 2
.LP
Binding of schedulers is currently only supported on newer Linux, Solaris, FreeBSD, and Windows systems\&.
.RE
.RS 2
.LP
If no CPU topology is available when the \fI+sbt\fR\& flag is processed and \fIBindType\fR\& is any other type than \fIu\fR\&, the runtime system will fail to start\&. CPU topology can be defined using the \fB+sct\fR\& flag\&. Note that the \fI+sct\fR\& flag may have to be passed before the \fI+sbt\fR\& flag on the command line (in case no CPU topology has been automatically detected)\&.
.RE
.RS 2
.LP
The runtime system will by default \fInot\fR\& bind schedulers to logical processors\&.
.RE
.RS 2
.LP
\fINOTE:\fR\& If the Erlang runtime system is the only operating system process that binds threads to logical processors, this improves the performance of the runtime system\&. However, if other operating system processes (as for example another Erlang runtime system) also bind threads to logical processors, there might be a performance penalty instead\&. In some cases this performance penalty might be severe\&. If this is the case, you are advised to not bind the schedulers\&.
.RE
.RS 2
.LP
How schedulers are bound matters\&. For example, in situations when there are fewer running processes than schedulers online, the runtime system tries to migrate processes to schedulers with low scheduler identifiers\&. The more the schedulers are spread over the hardware, the more resources will be available to the runtime system in such situations\&.
.RE
.RS 2
.LP
\fINOTE:\fR\& If a scheduler fails to bind, this will often be silently ignored\&. This since it isn\&'t always possible to verify valid logical processor identifiers\&. If an error is reported, it will be reported to the \fIerror_logger\fR\&\&. If you want to verify that the schedulers actually have bound as requested, call \fBerlang:system_info(scheduler_bindings)\fR\&\&.
.RE
.TP 2
.B
\fB\fI+sbwt none|very_short|short|medium|long|very_long\fR\&\fR\&:
Set scheduler busy wait threshold\&. Default is \fImedium\fR\&\&. The threshold determines how long schedulers should busy wait when running out of work before going to sleep\&.
.RS 2
.LP
\fINOTE:\fR\& This flag may be removed or changed at any time without prior notice\&.
.RE
.TP 2
.B
\fB\fI+scl true|false\fR\&\fR\&:
Enable or disable scheduler compaction of load\&. By default scheduler compaction of load is enabled\&. When enabled, load balancing will strive for a load distribution which causes as many scheduler threads as possible to be fully loaded (i\&.e\&., not run out of work)\&. This is accomplished by migrating load (e\&.g\&. runnable processes) into a smaller set of schedulers when schedulers frequently run out of work\&. When disabled, the frequency with which schedulers run out of work will not be taken into account by the load balancing logic\&. 
.br
\fI+scl false\fR\& is similar to \fB+sub true\fR\& with the difference that \fI+sub true\fR\& also will balance scheduler utilization between schedulers\&.
.TP 2
.B
\fB\fI+sct CpuTopology\fR\&\fR\&:

.RS 2
.TP 2
*
\fI<Id> = integer(); when 0 =< <Id> =< 65535\fR\&
.LP
.TP 2
*
\fI<IdRange> = <Id>-<Id>\fR\&
.LP
.TP 2
*
\fI<IdOrIdRange> = <Id> | <IdRange>\fR\&
.LP
.TP 2
*
\fI<IdList> = <IdOrIdRange>,<IdOrIdRange> | <IdOrIdRange>\fR\&
.LP
.TP 2
*
\fI<LogicalIds> = L<IdList>\fR\&
.LP
.TP 2
*
\fI<ThreadIds> = T<IdList> | t<IdList>\fR\&
.LP
.TP 2
*
\fI<CoreIds> = C<IdList> | c<IdList>\fR\&
.LP
.TP 2
*
\fI<ProcessorIds> = P<IdList> | p<IdList>\fR\&
.LP
.TP 2
*
\fI<NodeIds> = N<IdList> | n<IdList>\fR\&
.LP
.TP 2
*
\fI<IdDefs> = <LogicalIds><ThreadIds><CoreIds><ProcessorIds><NodeIds> | <LogicalIds><ThreadIds><CoreIds><NodeIds><ProcessorIds>\fR\&
.LP
.TP 2
*
\fICpuTopology = <IdDefs>:<IdDefs> | <IdDefs>\fR\&
.LP
.RE

.RS 2
.LP
Set a user defined CPU topology\&. The user defined CPU topology will override any automatically detected CPU topology\&. The CPU topology is used when \fBbinding schedulers to logical processors\fR\&\&.
.RE
.RS 2
.LP
Upper-case letters signify real identifiers and lower-case letters signify fake identifiers only used for description of the topology\&. Identifiers passed as real identifiers may be used by the runtime system when trying to access specific hardware and if they are not correct the behavior is undefined\&. Faked logical CPU identifiers are not accepted since there is no point in defining the CPU topology without real logical CPU identifiers\&. Thread, core, processor, and node identifiers may be left out\&. If left out, thread id defaults to \fIt0\fR\&, core id defaults to \fIc0\fR\&, processor id defaults to \fIp0\fR\&, and node id will be left undefined\&. Either each logical processor must belong to one and only one NUMA node, or no logical processors must belong to any NUMA nodes\&.
.RE
.RS 2
.LP
Both increasing and decreasing \fI<IdRange>\fR\&s are allowed\&.
.RE
.RS 2
.LP
NUMA node identifiers are system wide\&. That is, each NUMA node on the system have to have a unique identifier\&. Processor identifiers are also system wide\&. Core identifiers are processor wide\&. Thread identifiers are core wide\&.
.RE
.RS 2
.LP
The order of the identifier types imply the hierarchy of the CPU topology\&. Valid orders are either \fI<LogicalIds><ThreadIds><CoreIds><ProcessorIds><NodeIds>\fR\&, or \fI<LogicalIds><ThreadIds><CoreIds><NodeIds><ProcessorIds>\fR\&\&. That is, thread is part of a core which is part of a processor which is part of a NUMA node, or thread is part of a core which is part of a NUMA node which is part of a processor\&. A cpu topology can consist of both processor external, and processor internal NUMA nodes as long as each logical processor belongs to one and only one NUMA node\&. If \fI<ProcessorIds>\fR\& is left out, its default position will be before \fI<NodeIds>\fR\&\&. That is, the default is processor external NUMA nodes\&.
.RE
.RS 2
.LP
If a list of identifiers is used in an \fI<IdDefs>\fR\&:
.RE
.RS 2
.TP 2
*
\fI<LogicalIds>\fR\& have to be a list of identifiers\&.
.LP
.TP 2
*
At least one other identifier type apart from \fI<LogicalIds>\fR\& also have to have a list of identifiers\&.
.LP
.TP 2
*
All lists of identifiers have to produce the same amount of identifiers\&.
.LP
.RE

.RS 2
.LP
A simple example\&. A single quad core processor may be described this way:
.RE
.LP
.nf

% erl +sct L0-3c0-3
1> erlang:system_info(cpu_topology)\&.
[{processor,[{core,{logical,0}},
             {core,{logical,1}},
             {core,{logical,2}},
             {core,{logical,3}}]}]

.fi
.RS 2
.LP
A little more complicated example\&. Two quad core processors\&. Each processor in its own NUMA node\&. The ordering of logical processors is a little weird\&. This in order to give a better example of identifier lists:
.RE
.LP
.nf

% erl +sct L0-1,3-2c0-3p0N0:L7,4,6-5c0-3p1N1
1> erlang:system_info(cpu_topology)\&.
[{node,[{processor,[{core,{logical,0}},
                    {core,{logical,1}},
                    {core,{logical,3}},
                    {core,{logical,2}}]}]},
 {node,[{processor,[{core,{logical,7}},
                    {core,{logical,4}},
                    {core,{logical,6}},
                    {core,{logical,5}}]}]}]

.fi
.RS 2
.LP
As long as real identifiers are correct it is okay to pass a CPU topology that is not a correct description of the CPU topology\&. When used with care this can actually be very useful\&. This in order to trick the emulator to bind its schedulers as you want\&. For example, if you want to run multiple Erlang runtime systems on the same machine, you want to reduce the amount of schedulers used and manipulate the CPU topology so that they bind to different logical CPUs\&. An example, with two Erlang runtime systems on a quad core machine:
.RE
.LP
.nf

% erl +sct L0-3c0-3 +sbt db +S3:2 -detached -noinput -noshell -sname one
% erl +sct L3-0c0-3 +sbt db +S3:2 -detached -noinput -noshell -sname two

.fi
.RS 2
.LP
In this example each runtime system have two schedulers each online, and all schedulers online will run on different cores\&. If we change to one scheduler online on one runtime system, and three schedulers online on the other, all schedulers online will still run on different cores\&.
.RE
.RS 2
.LP
Note that a faked CPU topology that does not reflect how the real CPU topology looks like is likely to decrease the performance of the runtime system\&.
.RE
.RS 2
.LP
For more information, see \fBerlang:system_info(cpu_topology)\fR\&\&.
.RE
.TP 2
.B
\fB\fI+sfwi Interval\fR\&\fR\&:
Set scheduler forced wakeup interval\&. All run queues will be scanned each \fIInterval\fR\& milliseconds\&. While there are sleeping schedulers in the system, one scheduler will be woken for each non-empty run queue found\&. An \fIInterval\fR\& of zero disables this feature, which also is the default\&.
.RS 2
.LP
This feature has been introduced as a temporary workaround for lengthy executing native code, and native code that do not bump reductions properly in OTP\&. When these bugs have be fixed the \fI+sfwi\fR\& flag will be removed\&.
.RE
.TP 2
.B
\fB\fI+stbt BindType\fR\&\fR\&:
Try to set scheduler bind type\&. The same as the \fB+sbt\fR\& flag with the exception of how some errors are handled\&. For more information, see the documentation of the \fB+sbt\fR\& flag\&.
.TP 2
.B
\fB\fI+sub true|false\fR\&\fR\&:
Enable or disable \fBscheduler utilization\fR\& balancing of load\&. By default scheduler utilization balancing is disabled and instead scheduler compaction of load is enabled which will strive for a load distribution which causes as many scheduler threads as possible to be fully loaded (i\&.e\&., not run out of work)\&. When scheduler utilization balancing is enabled the system will instead try to balance scheduler utilization between schedulers\&. That is, strive for equal scheduler utilization on all schedulers\&. 
.br
\fI+sub true\fR\& is only supported on systems where the runtime system detects and use a monotonically increasing high resolution clock\&. On other systems, the runtime system will fail to start\&. 
.br
\fI+sub true\fR\& implies \fB+scl false\fR\&\&. The difference between \fI+sub true\fR\& and \fI+scl false\fR\& is that \fI+scl false\fR\& will not try to balance the scheduler utilization\&.
.TP 2
.B
\fB\fI+sws very_eager|eager|medium|lazy|very_lazy\fR\&\fR\&:
Set scheduler wake cleanup threshold\&. Default is \fImedium\fR\&\&. This flag controls how eager schedulers should be requesting wake up due to certain cleanup operations\&. When a lazy setting is used, more outstanding cleanup operations can be left undone while a scheduler is idling\&. When an eager setting is used, schedulers will more frequently be woken, potentially increasing CPU-utilization\&.
.RS 2
.LP
\fINOTE:\fR\& This flag may be removed or changed at any time without prior notice\&.
.RE
.TP 2
.B
\fB\fI+sws default|legacy\fR\&\fR\&:
Set scheduler wakeup strategy\&. Default strategy changed in erts-5\&.10/OTP-R16A\&. This strategy was previously known as \fIproposal\fR\& in OTP-R15\&. The \fIlegacy\fR\& strategy was used as default from R13 up to and including R15\&.
.RS 2
.LP
\fINOTE:\fR\& This flag may be removed or changed at any time without prior notice\&.
.RE
.TP 2
.B
\fB\fI+swt very_low|low|medium|high|very_high\fR\&\fR\&:
Set scheduler wakeup threshold\&. Default is \fImedium\fR\&\&. The threshold determines when to wake up sleeping schedulers when more work than can be handled by currently awake schedulers exist\&. A low threshold will cause earlier wakeups, and a high threshold will cause later wakeups\&. Early wakeups will distribute work over multiple schedulers faster, but work will more easily bounce between schedulers\&.
.RS 2
.LP
\fINOTE:\fR\& This flag may be removed or changed at any time without prior notice\&.
.RE
.TP 2
.B
\fB\fI+spp Bool\fR\&\fR\&:
Set default scheduler hint for port parallelism\&. If set to \fItrue\fR\&, the VM will schedule port tasks when doing so will improve parallelism in the system\&. If set to \fIfalse\fR\&, the VM will try to perform port tasks immediately, improving latency at the expense of parallelism\&. If this flag has not been passed, the default scheduler hint for port parallelism is currently \fIfalse\fR\&\&. The default used can be inspected in runtime by calling \fBerlang:system_info(port_parallelism)\fR\&\&. The default can be overriden on port creation by passing the \fBparallelism\fR\& option to \fBopen_port/2\fR\&\&. 
.TP 2
.B
\fB\fI+sss size\fR\&\fR\&:
Suggested stack size, in kilowords, for scheduler threads\&. Valid range is 4-8192 kilowords\&. The default stack size is OS dependent\&.
.RE
.TP 2
.B
\fB\fI+t size\fR\&\fR\&:
Set the maximum number of atoms the VM can handle\&. Default is 1048576\&.
.TP 2
.B
\fB\fI+T Level\fR\&\fR\&:
Enables modified timing and sets the modified timing level\&. Currently valid range is 0-9\&. The timing of the runtime system will change\&. A high level usually means a greater change than a low level\&. Changing the timing can be very useful for finding timing related bugs\&.
.RS 2
.LP
Currently, modified timing affects the following:
.RE
.RS 2
.TP 2
.B
Process spawning:
A process calling \fIspawn\fR\&, \fIspawn_link\fR\&, \fIspawn_monitor\fR\&, or \fIspawn_opt\fR\& will be scheduled out immediately after completing the call\&. When higher modified timing levels are used, the caller will also sleep for a while after being scheduled out\&.
.TP 2
.B
Context reductions:
The amount of reductions a process is a allowed to use before being scheduled out is increased or reduced\&.
.TP 2
.B
Input reductions:
The amount of reductions performed before checking I/O is increased or reduced\&.
.RE
.RS 2
.LP
\fINOTE:\fR\& Performance will suffer when modified timing is enabled\&. This flag is \fIonly\fR\& intended for testing and debugging\&. Also note that \fIreturn_to\fR\& and \fIreturn_from\fR\& trace messages will be lost when tracing on the spawn BIFs\&. This flag may be removed or changed at any time without prior notice\&.
.RE
.TP 2
.B
\fI+V\fR\&:
Makes the emulator print out its version number\&.
.TP 2
.B
\fI+v\fR\&:
Verbose\&.
.TP 2
.B
\fI+W w | i\fR\&:
Sets the mapping of warning messages for \fIerror_logger\fR\&\&. Messages sent to the error logger using one of the warning routines can be mapped either to errors (default), warnings (\fI+W w\fR\&), or info reports (\fI+W i\fR\&)\&. The current mapping can be retrieved using \fIerror_logger:warning_map/0\fR\&\&. See \fBerror_logger(3)\fR\& for further information\&.
.TP 2
.B
\fI+zFlag Value\fR\&:
Miscellaneous flags\&.
.RS 2
.TP 2
.B
\fB\fI+zdbbl size\fR\&\fR\&:
Set the distribution buffer busy limit (\fBdist_buf_busy_limit\fR\&) in kilobytes\&. Valid range is 1-2097151\&. Default is 1024\&.
.RS 2
.LP
A larger buffer limit will allow processes to buffer more outgoing messages over the distribution\&. When the buffer limit has been reached, sending processes will be suspended until the buffer size has shrunk\&. The buffer limit is per distribution channel\&. A higher limit will give lower latency and higher throughput at the expense of higher memory usage\&.
.RE
.RE
.RE
.SH "ENVIRONMENT VARIABLES"

.RS 2
.TP 2
.B
\fIERL_CRASH_DUMP\fR\&:
If the emulator needs to write a crash dump, the value of this variable will be the file name of the crash dump file\&. If the variable is not set, the name of the crash dump file will be \fIerl_crash\&.dump\fR\& in the current directory\&.
.TP 2
.B
\fIERL_CRASH_DUMP_NICE\fR\&:
\fIUnix systems\fR\&: If the emulator needs to write a crash dump, it will use the value of this variable to set the nice value for the process, thus lowering its priority\&. The allowable range is 1 through 39 (higher values will be replaced with 39)\&. The highest value, 39, will give the process the lowest priority\&.
.TP 2
.B
\fIERL_CRASH_DUMP_SECONDS\fR\&:
\fIUnix systems\fR\&: This variable gives the number of seconds that the emulator will be allowed to spend writing a crash dump\&. When the given number of seconds have elapsed, the emulator will be terminated by a SIGALRM signal\&.
.RS 2
.LP
If the environment variable is \fInot\fR\& set or it is set to zero seconds, \fIERL_CRASH_DUMP_SECONDS=0\fR\&, the runtime system will not even attempt to write the crash dump file\&. It will just terminate\&.
.RE
.RS 2
.LP
If the environment variable is set to negative valie, e\&.g\&. \fIERL_CRASH_DUMP_SECONDS=-1\fR\&, the runtime system will wait indefinitely for the crash dump file to be written\&.
.RE
.RS 2
.LP
This environment variable is used in conjuction with \fB\fIheart\fR\&\fR\& if \fIheart\fR\& is running:
.RE
.RS 2
.TP 2
.B
\fIERL_CRASH_DUMP_SECONDS=0\fR\&:
Suppresses the writing a crash dump file entirely, thus rebooting the runtime system immediately\&. This is the same as not setting the environment variable\&.
.TP 2
.B
\fIERL_CRASH_DUMP_SECONDS=-1\fR\&:
Setting the environment variable to a negative value will cause the termination of the runtime system to wait until the crash dump file has been completly written\&.
.TP 2
.B
\fIERL_CRASH_DUMP_SECONDS=S\fR\&:
Will wait for \fIS\fR\& seconds to complete the crash dump file and then terminate the runtime system\&.
.RE
.TP 2
.B
\fB\fIERL_AFLAGS\fR\&\fR\&:
The content of this environment variable will be added to the beginning of the command line for \fIerl\fR\&\&.
.RS 2
.LP
The \fI-extra\fR\& flag is treated specially\&. Its scope ends at the end of the environment variable content\&. Arguments following an \fI-extra\fR\& flag are moved on the command line into the \fI-extra\fR\& section, i\&.e\&. the end of the command line following after an \fI-extra\fR\& flag\&.
.RE
.TP 2
.B
\fB\fIERL_ZFLAGS\fR\&\fR\& and \fB\fIERL_FLAGS\fR\&\fR\&:
The content of these environment variables will be added to the end of the command line for \fIerl\fR\&\&.
.RS 2
.LP
The \fI-extra\fR\& flag is treated specially\&. Its scope ends at the end of the environment variable content\&. Arguments following an \fI-extra\fR\& flag are moved on the command line into the \fI-extra\fR\& section, i\&.e\&. the end of the command line following after an \fI-extra\fR\& flag\&.
.RE
.TP 2
.B
\fIERL_LIBS\fR\&:
This environment variable contains a list of additional library directories that the code server will search for applications and add to the code path\&. See \fBcode(3)\fR\&\&.
.TP 2
.B
\fIERL_EPMD_ADDRESS\fR\&:
This environment variable may be set to a comma-separated list of IP addresses, in which case the \fBepmd\fR\& daemon will listen only on the specified address(es) and on the loopback address (which is implicitly added to the list if it has not been specified)\&.
.TP 2
.B
\fIERL_EPMD_PORT\fR\&:
This environment variable can contain the port number to use when communicating with \fBepmd\fR\&\&. The default port will work fine in most cases\&. A different port can be specified to allow nodes of independent clusters to co-exist on the same host\&. All nodes in a cluster must use the same epmd port number\&.
.RE
.SH "CONFIGURATION"

.LP
The standard Erlang/OTP system can be re-configured to change the default behavior on start-up\&.
.RS 2
.TP 2
.B
The \&.erlang Start-up File:
When Erlang/OTP is started, the system searches for a file named \&.erlang in the directory where Erlang/OTP is started\&. If not found, the user\&'s home directory is searched for an \&.erlang file\&.
.RS 2
.LP
If an \&.erlang file is found, it is assumed to contain valid Erlang expressions\&. These expressions are evaluated as if they were input to the shell\&.
.RE
.RS 2
.LP
A typical \&.erlang file contains a set of search paths, for example:
.RE
.LP
.nf

        io:format("executing user profile in HOME/.erlang\\n",[]).
        code:add_path("/home/calvin/test/ebin").
        code:add_path("/home/hobbes/bigappl-1.2/ebin").
        io:format(".erlang rc finished\\n",[]).
    
.fi
.TP 2
.B
user_default and shell_default:
Functions in the shell which are not prefixed by a module name are assumed to be functional objects (Funs), built-in functions (BIFs), or belong to the module user_default or shell_default\&.
.RS 2
.LP
To include private shell commands, define them in a module user_default and add the following argument as the first line in the \&.erlang file\&.
.RE
.LP
.nf

         code:load_abs("..../user_default").
    
.fi
.TP 2
.B
erl:
If the contents of \&.erlang are changed and a private version of user_default is defined, it is possible to customize the Erlang/OTP environment\&. More powerful changes can be made by supplying command line arguments in the start-up script erl\&. Refer to erl(1) and \fBinit(3)\fR\& for further information\&.
.RE
.SH "SEE ALSO"

.LP
\fBinit(3)\fR\&, \fBerl_prim_loader(3)\fR\&, \fBerl_boot_server(3)\fR\&, \fBcode(3)\fR\&, \fBapplication(3)\fR\&, \fBheart(3)\fR\&, \fBnet_kernel(3)\fR\&, \fBauth(3)\fR\&, \fBmake(3)\fR\&, \fBepmd(1)\fR\&, \fBerts_alloc(3)\fR\&